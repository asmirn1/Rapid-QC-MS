window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "ms_autoqc", "modulename": "ms_autoqc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "ms_autoqc.AcquisitionListener", "modulename": "ms_autoqc.AcquisitionListener", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "ms_autoqc.AcquisitionListener.DataAcquisitionEventHandler", "modulename": "ms_autoqc.AcquisitionListener", "qualname": "DataAcquisitionEventHandler", "kind": "class", "doc": "<p>Event handler that alerts when the data file has completed sample acquisition.\nFor more information, see: <a href=\"https://python-watchdog.readthedocs.io/en/stable/\">https://python-watchdog.readthedocs.io/en/stable/</a></p>\n", "bases": "watchdog.events.FileSystemEventHandler"}, {"fullname": "ms_autoqc.AcquisitionListener.DataAcquisitionEventHandler.__init__", "modulename": "ms_autoqc.AcquisitionListener", "qualname": "DataAcquisitionEventHandler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">observer</span>,</span><span class=\"param\">\t<span class=\"n\">path</span>,</span><span class=\"param\">\t<span class=\"n\">filenames</span>,</span><span class=\"param\">\t<span class=\"n\">extension</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_id</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">current_sample</span></span>)</span>"}, {"fullname": "ms_autoqc.AcquisitionListener.DataAcquisitionEventHandler.on_created", "modulename": "ms_autoqc.AcquisitionListener", "qualname": "DataAcquisitionEventHandler.on_created", "kind": "function", "doc": "<p>Listens to data acquisition path and starts watching newly-created data files,\nbut only if the filename exists in the sequence.</p>\n\n<p>If the acquisition listener process was restarted, the last sample being acquired\nor monitored will be reprocessed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>event (FileCreatedEvent):</strong>  Event representing file / directory creation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AcquisitionListener.DataAcquisitionEventHandler.watch_file", "modulename": "ms_autoqc.AcquisitionListener", "qualname": "DataAcquisitionEventHandler.watch_file", "kind": "function", "doc": "<p>Returns True if MD5 checksums match AND next sample in sequence has begun acquiring,\neffectively determining whether sample acquisition has been completed.</p>\n\n<p>Checksum matching is checking if the MD5 checksum computed for the file matches the\nMD5 checksum that was written to the database 3 minutes ago.</p>\n\n<p>If watching the last sample in the sequence, this function will skip checking for the next sample.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  Data acquisition path</li>\n<li><strong>filename (str):</strong>  Name of sample data file</li>\n<li><strong>extension (str):</strong>  Data file extension, derived from instrument vendor</li>\n<li><strong>next_sample (str, default None):</strong>  Next sample in sequence after current sample being watched</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if data acquisition is deemed complete.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">extension</span>, </span><span class=\"param\"><span class=\"n\">next_sample</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AcquisitionListener.DataAcquisitionEventHandler.trigger_pipeline", "modulename": "ms_autoqc.AcquisitionListener", "qualname": "DataAcquisitionEventHandler.trigger_pipeline", "kind": "function", "doc": "<p>Wrapper function that routes data file to monitoring and processing functions.</p>\n\n<p>This function is called every time a data file is created in the data acquisition path.\nSee watch_file() and process_data_file() for more information.</p>\n\n<p>At the end of the instrument run, marks job as completed and kills listener process.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  Data acquisition path</li>\n<li><strong>filename (str):</strong>  Name of sample data file</li>\n<li><strong>extension (str):</strong>  Data file extension, derived from instrument vendor</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">extension</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AcquisitionListener.start_listener", "modulename": "ms_autoqc.AcquisitionListener", "qualname": "start_listener", "kind": "function", "doc": "<p>Initializes acquisition listener process to process data files upon sample acquisition completion.</p>\n\n<p>If the QC job is for a completed instrument run (i.e. all data files have been previously acquired and exist\nin a directory), then this function simply iterates through the list of filenames and processes each sample.</p>\n\n<p>If the QC job is for an active instrument run, this function initializes the Watchdog file monitor to capture\nincoming data files and wait for them to finish writing before processing each sample.</p>\n\n<p>In addition, to handle crashes, restarted jobs, and other events, this function checks for and processes\nall unprocessed samples in active instrument runs. Unprocessed samples are defined as data files that exist but\ndo not have QC results in the database.</p>\n\n<p>For more information on the Watchdog package, see: <a href=\"https://python-watchdog.readthedocs.io/en/stable/\">https://python-watchdog.readthedocs.io/en/stable/</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  Data acquisition path</li>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AcquisitionListener.terminate_job", "modulename": "ms_autoqc.AcquisitionListener", "qualname": "terminate_job", "kind": "function", "doc": "<p>Wraps up QC job after the last data file has been routed to the pipeline.</p>\n\n<h6 id=\"performs-the-following-functions\">Performs the following functions:</h6>\n\n<blockquote>\n  <ol>\n  <li>Marks instrument run as completed</li>\n  <li>Uploads database to Google Drive (if Google Drive sync is enabled)</li>\n  <li>Deletes temporary data file directory in /data</li>\n  <li>Kills acquisition listener process</li>\n  </ol>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AcquisitionListener.get_md5", "modulename": "ms_autoqc.AcquisitionListener", "qualname": "get_md5", "kind": "function", "doc": "<p>Computes MD5 checksum for a given file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  File path</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: MD5 checksum for the given file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing", "modulename": "ms_autoqc.AutoQCProcessing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "ms_autoqc.AutoQCProcessing.sequence_is_valid", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "sequence_is_valid", "kind": "function", "doc": "<p>Validates that instrument sequence file contains the correct columns.</p>\n\n<p>TODO: Add support for other mass spectrometry instrument vendors here.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  Acquisition sequence file name</li>\n<li><strong>contents (io.StringIO):</strong>  Acquisition sequence as in-memory file object</li>\n<li><strong>vendor (str, default \"Thermo Fisher\"):</strong>  Instrument vendor for parsing sequence</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if sequence table is valid, otherwise False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">contents</span>, </span><span class=\"param\"><span class=\"n\">vendor</span><span class=\"o\">=</span><span class=\"s1\">&#39;Thermo Fisher&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing.metadata_is_valid", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "metadata_is_valid", "kind": "function", "doc": "<p>Validates that sample metadata file contains the required columns.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  Metadata file name</li>\n<li><strong>contents (io.StringIO):</strong>  Metadata file as in-memory file object</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if metadata table is valid, otherwise False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">contents</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing.chromatography_valid", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "chromatography_valid", "kind": "function", "doc": "<p>Validates that MSP / TXT files for the given chromatography method exist.</p>\n\n<p>TODO: Per Brian, some labs don't run in both polarities. Will need to make this function flexible for that.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chromatography (str):</strong>  Chromatography method ID to validate</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if chromatography method files exist, False if not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chromatography</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing.biological_standards_valid", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "biological_standards_valid", "kind": "function", "doc": "<p>Validates that the given list of biological standards have MSP files.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chromatography (str):</strong>  Chromatography method ID to validate</li>\n<li><strong>biological_standards (list):</strong>  List of biological standards to validate</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if all MSP / TXT files exist, False if not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">biological_standards</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing.convert_sequence_to_json", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "convert_sequence_to_json", "kind": "function", "doc": "<p>Converts sequence table to JSON string for database storage.</p>\n\n<p>TODO: Convert to \"records\" orient instead. Much faster to load data using pd.DataFrame(json.loads(json_string))\n    instead of pd.read_json(json_string, orient=\"split\").</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sequence_contents (io.StringIO):</strong>  Acquisition file as in-memory file object</li>\n<li><strong>vendor (str, default \"Thermo Fisher\"):</strong>  Instrument vendor for parsing sequence</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>JSON string of acquisition sequence DataFrame in \"split\" format.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sequence_contents</span>, </span><span class=\"param\"><span class=\"n\">vendor</span><span class=\"o\">=</span><span class=\"s1\">&#39;Thermo Fisher&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing.convert_metadata_to_json", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "convert_metadata_to_json", "kind": "function", "doc": "<p>Converts sequence and metadata files to JSON strings for database storage.</p>\n\n<p>TODO: Convert to \"records\" orient instead. Much faster to load data using pd.DataFrame(json.loads(json_string))\n    instead of pd.read_json(json_string, orient=\"split\").</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>metadata_contents (io.StringIO):</strong>  Metadata file as in-memory file object</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>JSON string of sample metadata DataFrame in \"split\" format.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">metadata_contents</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing.run_msconvert", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "run_msconvert", "kind": "function", "doc": "<p>Makes a copy of data file and converts it from instrument vendor format to open mzML format.</p>\n\n<p>This function runs msconvert.exe in a background process. It checks every second for 30 seconds if the\nmzML file was created, and if it hangs, will terminate the msconvert subprocess and return None.</p>\n\n<p>TODO: As MS-AutoQC has evolved, some arguments for this function have become redundant.\n    The output folder is always fixed, so this parameter should be removed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  Data acquisition path (with \"/\" at the end)</li>\n<li><strong>filename (str):</strong>  Name of sample data file</li>\n<li><strong>extension (str):</strong>  Data file extension, derived from instrument vendor</li>\n<li><strong>output_folder (str):</strong>  Output directory for mzML file \u2013 this is always ../data/instrument_id_run_id/data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>File path for mzML file (*.mzml)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">extension</span>, </span><span class=\"param\"><span class=\"n\">output_folder</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing.run_msdial_processing", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "run_msdial_processing", "kind": "function", "doc": "<p>Processes data file (in mzML format) using the MS-DIAL console app.</p>\n\n<p>TODO: As MS-AutoQC has evolved, some arguments for this function have become redundant.\n    The input and output folders are fixed, so these parameters should be removed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  Name of sample data file</li>\n<li><strong>msdial_path (str):</strong>  Path for directory storing MSDialConsoleApp.exe</li>\n<li><strong>parameter_file (str):</strong>  Path for parameters.txt file, stored in /methods directory</li>\n<li><strong>input_folder (str):</strong>  Input folder \u2013 this is always ../data/instrument_id_run_id/data</li>\n<li><strong>output_folder (str):</strong>  Output folder \u2013 this is always ../data/instrument_id_run_id/results</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>File path for MS-DIAL result file (*.msdial)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">msdial_path</span>, </span><span class=\"param\"><span class=\"n\">parameter_file</span>, </span><span class=\"param\"><span class=\"n\">input_folder</span>, </span><span class=\"param\"><span class=\"n\">output_folder</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing.peak_list_to_dataframe", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "peak_list_to_dataframe", "kind": "function", "doc": "<p>Filters duplicates and poor annotations from MS-DIAL peak table and creates DataFrame storing\nm/z, RT, and intensity data for each internal standard (or targeted metabolite) in the sample.</p>\n\n<p>TODO: Describe duplicate handling in more detail in this docstring.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sample_peak_list (str):</strong>  File path for MS-DIAL peak table, an .msdial file located in /data/instrument_id_run_id/results</li>\n<li><strong>df_features (DataFrame):</strong>  An m/z - RT table derived from internal standard (or biological standard) MSP library in database</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame with m/z, RT, and intensity data for each internal standard / targeted metabolite in the sample.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sample_peak_list</span>, </span><span class=\"param\"><span class=\"n\">df_features</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing.qc_sample", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "qc_sample", "kind": "function", "doc": "<p>Performs quality control on sample data based on user-defined criteria in Settings &gt; QC Configurations.</p>\n\n<p>The following quality control parameters are used to determine QC pass, warning, or fail:\n    1. Intensity dropouts cutoff:\n        How many internal standards are missing in the sample?\n    2. RT shift from library value cutoff:\n        How many retention times are shifted from the expected value for the chromatography method?\n    3. RT shift from in-run average cutoff:\n        How many retention times are shifted from their average RT during the run?\n    4. m/z shift from library value cutoff:\n        How many precursor masses are shifted from the expected value for the internal standard?</p>\n\n<p>This function returns a DataFrame with a single record in the following format:</p>\n\n<table>\n<thead>\n<tr>\n  <th>Sample</th>\n  <th>Delta m/z</th>\n  <th>Delta RT</th>\n  <th>In-run delta RT</th>\n  <th>Warnings</th>\n  <th>Fails</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>SAMPLE_001</td>\n  <td>0.000001</td>\n  <td>0.05</td>\n  <td>0.00001</td>\n  <td>Delta RT</td>\n  <td>None</td>\n</tr>\n</tbody>\n</table>\n\n<p>Confusingly, a sample has an overall QC result, as well as QC warnings and fails for each internal standard.\nThis makes it easier to determine what caused the overall QC result.</p>\n\n<p>See a screenshot of the sample information card in the Overview page of the website for context.</p>\n\n<p>While the thresholds for QC pass and fail are explicit, allowing the user to determine thresholds for QC warnings\nwas deemed too cumbersome. Instead, an overall QC result of \"Warning\" happens if any of the following are true:\n    1. The number of intensity dropouts is 75% or more than the defined cutoff\n    2. The QC result is not a \"Fail\" and 50% or more internal standards have a QC Warning</p>\n\n<p>For each internal standard, a note is added to the \"Warning\" or \"Fail\" column of qc_dataframe based on the user's\ndefined criteria in Settings &gt; QC Configurations. If the internal standard is not marked as a \"Fail\", then\n\"Warnings\" for individual internal standards could be marked if:\n    1. The delta RT is greater than 66% of the \"RT shift from library value\" cutoff\n    2. The In-run delta RT is greater than 80% of the \"RT shift from in-run average value\" cutoff\n    3. The delta m/z is greater than 80% of the \"RT shift from library value\" cutoff</p>\n\n<p>TODO: Define and implement quality control for biological standards.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (Job ID)</li>\n<li><strong>polarity (str):</strong>  Polarity, either \"Pos or \"Neg\"</li>\n<li><strong>df_peak_list (DataFrame):</strong>  Filtered peak table, from peak_list_to_dataframe()</li>\n<li><strong>df_features (DataFrame):</strong>  An m/z - RT table derived from internal standard (or biological standard) MSP library in database</li>\n<li><strong>is_bio_standard (bool):</strong>  Whether sample is a biological standard or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(DataFrame, str): Tuple containing QC results table and QC result (either \"Pass\", \"Fail\", or \"Warning\").</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">instrument_id</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">df_peak_list</span>,</span><span class=\"param\">\t<span class=\"n\">df_features</span>,</span><span class=\"param\">\t<span class=\"n\">is_bio_standard</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing.convert_to_dict", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "convert_to_dict", "kind": "function", "doc": "<p>Converts DataFrames to dictionary records, with features as columns and samples as rows,\nwhich are then cast to string format for database storage.</p>\n\n<p>See parse_internal_standard_data() in the DatabaseFunctions module for more information.</p>\n\n<p>Format:</p>\n\n<p>| Name       | iSTD 1 | iSTD 2 | iSTD 3 | iSTD 4 | ... |\n| ---------- | ------ | ------ | ------ | ------ | ... |\n| SAMPLE_001 | 1.207  | 1.934  | 3.953  | 8.132  | ... |</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sample_id (str):</strong>  Sample ID</li>\n<li><strong>df_peak_list (DataFrame):</strong>  Filtered MS-DIAL peak table result</li>\n<li><strong>qc_dataframe (DataFrame):</strong>  Table of various QC results</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(str, str, str, str): Tuple containing dictionary records of m/z, RT, intensity, and\n  QC data, respectively, cast as strings for database storage.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sample_id</span>, </span><span class=\"param\"><span class=\"n\">df_peak_list</span>, </span><span class=\"param\"><span class=\"n\">qc_dataframe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing.process_data_file", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "process_data_file", "kind": "function", "doc": "<p>Processes data file upon sample acquisition completion.</p>\n\n<p>For more details, please visit the Documentation page on the website.</p>\n\n<h6 id=\"performs-the-following-functions\">Performs the following functions:</h6>\n\n<blockquote>\n  <ol>\n  <li>Convert data file to mzML format using MSConvert</li>\n  <li>Process data file using MS-DIAL and user-defined parameter configuration</li>\n  <li>Load peak table into DataFrame and filter out poor annotations</li>\n  <li>Perform quality control checks based on user-defined criteria</li>\n  <li>Notify user of QC warnings or fails via Slack or email</li>\n  <li>Write QC results to instrument database</li>\n  <li>If Google Drive sync is enabled, upload results as CSV files</li>\n  </ol>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  Data acquisition path</li>\n<li><strong>filename (str):</strong>  Name of sample data file</li>\n<li><strong>extension (str):</strong>  Data file extension, derived from instrument vendor</li>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">extension</span>, </span><span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing.subprocess_is_running", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "subprocess_is_running", "kind": "function", "doc": "<p>Returns True if subprocess is still running, and False if not.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pid (int):</strong>  Subprocess ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if subprocess is still running, False if not</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.AutoQCProcessing.kill_subprocess", "modulename": "ms_autoqc.AutoQCProcessing", "qualname": "kill_subprocess", "kind": "function", "doc": "<p>Kills subprocess.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pid (int):</strong>  Subprocess ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp", "modulename": "ms_autoqc.DashWebApp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "ms_autoqc.DashWebApp.local_stylesheet", "modulename": "ms_autoqc.DashWebApp", "qualname": "local_stylesheet", "kind": "variable", "doc": "<p>Dash app layout</p>\n", "default_value": " = {&#x27;href&#x27;: &#x27;https://fonts.googleapis.com/css2?family=Lato:wght@400;700&amp;display=swap&#x27;, &#x27;rel&#x27;: &#x27;stylesheet&#x27;}"}, {"fullname": "ms_autoqc.DashWebApp.serve_layout", "modulename": "ms_autoqc.DashWebApp", "qualname": "serve_layout", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.sync_with_google_drive", "modulename": "ms_autoqc.DashWebApp", "qualname": "sync_with_google_drive", "kind": "function", "doc": "<p>For users signed in to MS-AutoQC from an external device, this will download the selected instrument database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.authenticate_with_google_drive", "modulename": "ms_autoqc.DashWebApp", "qualname": "authenticate_with_google_drive", "kind": "function", "doc": "<p>Authenticates with Google Drive if the credentials file is found</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">on_page_load</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.launch_google_drive_authentication", "modulename": "ms_autoqc.DashWebApp", "qualname": "launch_google_drive_authentication", "kind": "function", "doc": "<p>Launches Google Drive authentication window from first-time setup</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">setup_auth_button_clicks</span>,</span><span class=\"param\">\t<span class=\"n\">sign_in_auth_button_clicks</span>,</span><span class=\"param\">\t<span class=\"n\">settings_button_clicks</span>,</span><span class=\"param\">\t<span class=\"n\">client_id_1</span>,</span><span class=\"param\">\t<span class=\"n\">client_id_2</span>,</span><span class=\"param\">\t<span class=\"n\">client_id_3</span>,</span><span class=\"param\">\t<span class=\"n\">client_secret_1</span>,</span><span class=\"param\">\t<span class=\"n\">client_secret_2</span>,</span><span class=\"param\">\t<span class=\"n\">client_secret_3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.check_first_time_google_drive_authentication", "modulename": "ms_autoqc.DashWebApp", "qualname": "check_first_time_google_drive_authentication", "kind": "function", "doc": "<p>UI feedback for Google Drive authentication in Welcome &gt; Setup New Instrument page</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">google_drive_is_authenticated</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.vendor_dropdown_handling", "modulename": "ms_autoqc.DashWebApp", "qualname": "vendor_dropdown_handling", "kind": "function", "doc": "<p>Why didn't Dash Bootstrap Components implement this themselves?\nThe world may never know...</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">thermo_fisher_click</span>,</span><span class=\"param\">\t<span class=\"n\">agilent_click</span>,</span><span class=\"param\">\t<span class=\"n\">bruker_click</span>,</span><span class=\"param\">\t<span class=\"n\">sciex_click</span>,</span><span class=\"param\">\t<span class=\"n\">waters_click</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.enable_complete_setup_button", "modulename": "ms_autoqc.DashWebApp", "qualname": "enable_complete_setup_button", "kind": "function", "doc": "<p>Enables \"Complete setup\" button upon form completion in Welcome &gt; Setup New Instrument page</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_name</span>, </span><span class=\"param\"><span class=\"n\">instrument_vendor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_feedback_for_complete_setup_button", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_feedback_for_complete_setup_button", "kind": "function", "doc": "<p>Returns loading feedback on complete setup button</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.complete_first_time_setup", "modulename": "ms_autoqc.DashWebApp", "qualname": "complete_first_time_setup", "kind": "function", "doc": "<p>Upon \"Complete setup\" button click, this callback completes the following:</p>\n\n<ol>\n<li>If databases DO exist in Google Drive, downloads databases</li>\n<li>If databases DO NOT exist in Google Drive, initializes new SQLite database</li>\n<li>Adds instrument to \"instruments\" table</li>\n<li>Uploads database to Google Drive folder</li>\n<li>Dismisses setup window</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">button_click</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_id</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_vendor</span>,</span><span class=\"param\">\t<span class=\"n\">google_drive_authenticated</span>,</span><span class=\"param\">\t<span class=\"n\">gdrive_folder_id</span>,</span><span class=\"param\">\t<span class=\"n\">methods_zip_file_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.check_workspace_login_google_drive_authentication", "modulename": "ms_autoqc.DashWebApp", "qualname": "check_workspace_login_google_drive_authentication", "kind": "function", "doc": "<p>UI feedback for Google Drive authentication in Welcome &gt; Sign In To Workspace page</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">google_drive_is_authenticated</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.enable_instrument_id_selection", "modulename": "ms_autoqc.DashWebApp", "qualname": "enable_instrument_id_selection", "kind": "function", "doc": "<p>In Welcome &gt; Sign In To Workspace page, enables instrument dropdown selection if user is signing in to instrument</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">is_instrument_computer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.enable_workspace_login_button", "modulename": "ms_autoqc.DashWebApp", "qualname": "enable_workspace_login_button", "kind": "function", "doc": "<p>Enables \"Sign in to workspace\" button upon form completion in Welcome &gt; Sign In To Workspace page</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_text</span>, </span><span class=\"param\"><span class=\"n\">is_instrument_computer</span>, </span><span class=\"param\"><span class=\"n\">instrument_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_feedback_for_workspace_login_button", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_feedback_for_workspace_login_button", "kind": "function", "doc": "<p>UI feedback for workspace sign in button in Setup &gt; Login To Workspace</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_feedback_for_login_button", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_feedback_for_login_button", "kind": "function", "doc": "<p>Dismisses setup window and signs in to MS-AutoQC workspace</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">is_instrument_computer</span>, </span><span class=\"param\"><span class=\"n\">instrument_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.dismiss_setup_window", "modulename": "ms_autoqc.DashWebApp", "qualname": "dismiss_setup_window", "kind": "function", "doc": "<p>Checks for a valid database on every start and dismisses setup window if found</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">workspace_has_been_setup_1</span>, </span><span class=\"param\"><span class=\"n\">workspace_has_been_setup_2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.update_google_drive_sync_status_in_settings", "modulename": "ms_autoqc.DashWebApp", "qualname": "update_google_drive_sync_status_in_settings", "kind": "function", "doc": "<p>Updates Google Drive sync status in user settings on user authentication</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">google_drive_authenticated</span>,</span><span class=\"param\">\t<span class=\"n\">google_drive_authenticated_on_start</span>,</span><span class=\"param\">\t<span class=\"n\">settings_is_open</span>,</span><span class=\"param\">\t<span class=\"n\">form_text</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.regenerate_settings_yaml_file", "modulename": "ms_autoqc.DashWebApp", "qualname": "regenerate_settings_yaml_file", "kind": "function", "doc": "<p>Regenerates settings.yaml file with new credentials</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">client_id</span>, </span><span class=\"param\"><span class=\"n\">client_secret</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_alert_on_gdrive_credential_save", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_alert_on_gdrive_credential_save", "kind": "function", "doc": "<p>Displays UI alert on Google API credential save</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">credential_save_result</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.get_instrument_tabs", "modulename": "ms_autoqc.DashWebApp", "qualname": "get_instrument_tabs", "kind": "function", "doc": "<p>Retrieves all instruments on a user installation of MS-AutoQC</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instruments</span>, </span><span class=\"param\"><span class=\"n\">check_workspace_setup</span>, </span><span class=\"param\"><span class=\"n\">sync_update</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.reset_instrument_table", "modulename": "ms_autoqc.DashWebApp", "qualname": "reset_instrument_table", "kind": "function", "doc": "<p>Removes selected cell highlight upon tab switch to different instrument\n(A case study in insane side missions during frontend development)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument</span>, </span><span class=\"param\"><span class=\"n\">job_deleted</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.populate_instrument_runs_table", "modulename": "ms_autoqc.DashWebApp", "qualname": "populate_instrument_runs_table", "kind": "function", "doc": "<p>Dash callback for populating tables with list of past/active instrument runs</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">instrument_id</span>,</span><span class=\"param\">\t<span class=\"n\">refresh</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span>,</span><span class=\"param\">\t<span class=\"n\">sync_update</span>,</span><span class=\"param\">\t<span class=\"n\">new_job_started</span>,</span><span class=\"param\">\t<span class=\"n\">job_marked_completed</span>,</span><span class=\"param\">\t<span class=\"n\">job_deleted</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.open_loading_modal", "modulename": "ms_autoqc.DashWebApp", "qualname": "open_loading_modal", "kind": "function", "doc": "<p>Shows loading modal on selection of an instrument run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">active_cell</span>, </span><span class=\"param\"><span class=\"n\">table_data</span>, </span><span class=\"param\"><span class=\"n\">load_finished</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.load_data", "modulename": "ms_autoqc.DashWebApp", "qualname": "load_data", "kind": "function", "doc": "<p>Updates and stores QC results in dcc.Store objects (user's browser session)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">refresh</span>, </span><span class=\"param\"><span class=\"n\">active_cell</span>, </span><span class=\"param\"><span class=\"n\">table_data</span>, </span><span class=\"param\"><span class=\"n\">resources</span>, </span><span class=\"param\"><span class=\"n\">instrument_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.signal_load_finished", "modulename": "ms_autoqc.DashWebApp", "qualname": "signal_load_finished", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">load_finished</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.populate_sample_tables", "modulename": "ms_autoqc.DashWebApp", "qualname": "populate_sample_tables", "kind": "function", "doc": "<p>Populates table with list of samples for selected run from instrument runs table</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">samples</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.update_dropdowns_on_polarity_change", "modulename": "ms_autoqc.DashWebApp", "qualname": "update_dropdowns_on_polarity_change", "kind": "function", "doc": "<p>Updates dropdown lists with correct items for user-selected polarity</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">table_data</span>,</span><span class=\"param\">\t<span class=\"n\">samples</span>,</span><span class=\"param\">\t<span class=\"n\">bio_intensity_pos</span>,</span><span class=\"param\">\t<span class=\"n\">bio_intensity_neg</span>,</span><span class=\"param\">\t<span class=\"n\">pos_internal_standards</span>,</span><span class=\"param\">\t<span class=\"n\">neg_internal_standards</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.apply_sample_filter_to_plots", "modulename": "ms_autoqc.DashWebApp", "qualname": "apply_sample_filter_to_plots", "kind": "function", "doc": "<p>Apply sample filter to internal standard plots, options are:</p>\n\n<ol>\n<li>All samples</li>\n<li>Filter by samples only</li>\n<li>Filter by treatments / classes</li>\n<li>Filter by pools</li>\n<li>Filter by blanks</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">filter</span>, </span><span class=\"param\"><span class=\"n\">polarity</span>, </span><span class=\"param\"><span class=\"n\">samples</span>, </span><span class=\"param\"><span class=\"n\">metadata</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.populate_istd_rt_plot", "modulename": "ms_autoqc.DashWebApp", "qualname": "populate_istd_rt_plot", "kind": "function", "doc": "<p>Populates internal standard retention time vs. sample plot</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">internal_standard</span>,</span><span class=\"param\">\t<span class=\"n\">selected_samples</span>,</span><span class=\"param\">\t<span class=\"n\">rt_pos</span>,</span><span class=\"param\">\t<span class=\"n\">rt_neg</span>,</span><span class=\"param\">\t<span class=\"n\">samples</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span>,</span><span class=\"param\">\t<span class=\"n\">pos_internal_standards</span>,</span><span class=\"param\">\t<span class=\"n\">neg_internal_standards</span>,</span><span class=\"param\">\t<span class=\"n\">previous</span>,</span><span class=\"param\">\t<span class=\"nb\">next</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.populate_istd_intensity_plot", "modulename": "ms_autoqc.DashWebApp", "qualname": "populate_istd_intensity_plot", "kind": "function", "doc": "<p>Populates internal standard intensity vs. sample plot</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">internal_standard</span>,</span><span class=\"param\">\t<span class=\"n\">selected_samples</span>,</span><span class=\"param\">\t<span class=\"n\">intensity_pos</span>,</span><span class=\"param\">\t<span class=\"n\">intensity_neg</span>,</span><span class=\"param\">\t<span class=\"n\">samples</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span>,</span><span class=\"param\">\t<span class=\"n\">pos_internal_standards</span>,</span><span class=\"param\">\t<span class=\"n\">neg_internal_standards</span>,</span><span class=\"param\">\t<span class=\"n\">previous</span>,</span><span class=\"param\">\t<span class=\"nb\">next</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.populate_istd_mz_plot", "modulename": "ms_autoqc.DashWebApp", "qualname": "populate_istd_mz_plot", "kind": "function", "doc": "<p>Populates internal standard delta m/z vs. sample plot</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">internal_standard</span>,</span><span class=\"param\">\t<span class=\"n\">selected_samples</span>,</span><span class=\"param\">\t<span class=\"n\">delta_mz_pos</span>,</span><span class=\"param\">\t<span class=\"n\">delta_mz_neg</span>,</span><span class=\"param\">\t<span class=\"n\">samples</span>,</span><span class=\"param\">\t<span class=\"n\">pos_internal_standards</span>,</span><span class=\"param\">\t<span class=\"n\">neg_internal_standards</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span>,</span><span class=\"param\">\t<span class=\"n\">previous</span>,</span><span class=\"param\">\t<span class=\"nb\">next</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.populate_biological_standards_dropdown", "modulename": "ms_autoqc.DashWebApp", "qualname": "populate_biological_standards_dropdown", "kind": "function", "doc": "<p>Retrieves list of biological standards included in run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">resources</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.populate_bio_standard_mz_rt_plot", "modulename": "ms_autoqc.DashWebApp", "qualname": "populate_bio_standard_mz_rt_plot", "kind": "function", "doc": "<p>Populates biological standard m/z vs. RT plot</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">rt_pos</span>,</span><span class=\"param\">\t<span class=\"n\">rt_neg</span>,</span><span class=\"param\">\t<span class=\"n\">intensity_pos</span>,</span><span class=\"param\">\t<span class=\"n\">intensity_neg</span>,</span><span class=\"param\">\t<span class=\"n\">mz_pos</span>,</span><span class=\"param\">\t<span class=\"n\">mz_neg</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span>,</span><span class=\"param\">\t<span class=\"n\">click_data</span>,</span><span class=\"param\">\t<span class=\"n\">selected_bio_standard</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.populate_bio_standard_benchmark_plot", "modulename": "ms_autoqc.DashWebApp", "qualname": "populate_bio_standard_benchmark_plot", "kind": "function", "doc": "<p>Populates biological standard benchmark plot</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">selected_feature</span>,</span><span class=\"param\">\t<span class=\"n\">intensity_pos</span>,</span><span class=\"param\">\t<span class=\"n\">intensity_neg</span>,</span><span class=\"param\">\t<span class=\"n\">selected_bio_standard</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.toggle_sample_card", "modulename": "ms_autoqc.DashWebApp", "qualname": "toggle_sample_card", "kind": "function", "doc": "<p>Opens information modal when a sample is clicked from the sample table</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">is_open</span>,</span><span class=\"param\">\t<span class=\"n\">active_cell</span>,</span><span class=\"param\">\t<span class=\"n\">table_data</span>,</span><span class=\"param\">\t<span class=\"n\">rt_click</span>,</span><span class=\"param\">\t<span class=\"n\">intensity_click</span>,</span><span class=\"param\">\t<span class=\"n\">mz_click</span>,</span><span class=\"param\">\t<span class=\"n\">rt_pos</span>,</span><span class=\"param\">\t<span class=\"n\">rt_neg</span>,</span><span class=\"param\">\t<span class=\"n\">intensity_pos</span>,</span><span class=\"param\">\t<span class=\"n\">intensity_neg</span>,</span><span class=\"param\">\t<span class=\"n\">mz_pos</span>,</span><span class=\"param\">\t<span class=\"n\">mz_neg</span>,</span><span class=\"param\">\t<span class=\"n\">delta_rt_pos</span>,</span><span class=\"param\">\t<span class=\"n\">delta_rt_neg</span>,</span><span class=\"param\">\t<span class=\"n\">in_run_delta_rt_pos</span>,</span><span class=\"param\">\t<span class=\"n\">in_run_delta_rt_neg</span>,</span><span class=\"param\">\t<span class=\"n\">delta_mz_pos</span>,</span><span class=\"param\">\t<span class=\"n\">delta_mz_neg</span>,</span><span class=\"param\">\t<span class=\"n\">qc_warnings_pos</span>,</span><span class=\"param\">\t<span class=\"n\">qc_warnings_neg</span>,</span><span class=\"param\">\t<span class=\"n\">qc_fails_pos</span>,</span><span class=\"param\">\t<span class=\"n\">qc_fails_neg</span>,</span><span class=\"param\">\t<span class=\"n\">bio_rt_pos</span>,</span><span class=\"param\">\t<span class=\"n\">bio_rt_neg</span>,</span><span class=\"param\">\t<span class=\"n\">bio_intensity_pos</span>,</span><span class=\"param\">\t<span class=\"n\">bio_intensity_neg</span>,</span><span class=\"param\">\t<span class=\"n\">bio_mz_pos</span>,</span><span class=\"param\">\t<span class=\"n\">bio_mz_neg</span>,</span><span class=\"param\">\t<span class=\"n\">sequence</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.toggle_settings_modal", "modulename": "ms_autoqc.DashWebApp", "qualname": "toggle_settings_modal", "kind": "function", "doc": "<p>Toggles global settings modal</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.show_sync_modal", "modulename": "ms_autoqc.DashWebApp", "qualname": "show_sync_modal", "kind": "function", "doc": "<p>Launches progress modal, which syncs database and methods directory to Google Drive</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings_is_open</span>,</span><span class=\"param\">\t<span class=\"n\">google_drive_authenticated</span>,</span><span class=\"param\">\t<span class=\"n\">sync_modal_is_open</span>,</span><span class=\"param\">\t<span class=\"n\">sync_finished</span>,</span><span class=\"param\">\t<span class=\"n\">md5_checksum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.sync_settings_to_google_drive", "modulename": "ms_autoqc.DashWebApp", "qualname": "sync_settings_to_google_drive", "kind": "function", "doc": "<p>Syncs settings and methods files to Google Drive</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings_modal_is_open</span>,</span><span class=\"param\">\t<span class=\"n\">google_drive_authenticated</span>,</span><span class=\"param\">\t<span class=\"n\">auth_in_app</span>,</span><span class=\"param\">\t<span class=\"n\">md5_checksum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.close_sync_modal", "modulename": "ms_autoqc.DashWebApp", "qualname": "close_sync_modal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sync_finished</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.get_users_with_workspace_access", "modulename": "ms_autoqc.DashWebApp", "qualname": "get_users_with_workspace_access", "kind": "function", "doc": "<p>Returns table of users that have access to the MS-AutoQC workspace</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">on_page_load</span>, </span><span class=\"param\"><span class=\"n\">user_added</span>, </span><span class=\"param\"><span class=\"n\">user_deleted</span>, </span><span class=\"param\"><span class=\"n\">sync_update</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.add_user_to_workspace", "modulename": "ms_autoqc.DashWebApp", "qualname": "add_user_to_workspace", "kind": "function", "doc": "<p>Grants user permission to MS-AutoQC workspace in Google Drive</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">user_email_address</span>, </span><span class=\"param\"><span class=\"n\">google_drive_is_authenticated</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.delete_user_from_workspace", "modulename": "ms_autoqc.DashWebApp", "qualname": "delete_user_from_workspace", "kind": "function", "doc": "<p>Revokes user permission to MS-AutoQC workspace in Google Drive</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">user_email_address</span>, </span><span class=\"param\"><span class=\"n\">google_drive_is_authenticated</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_feedback_for_adding_gdrive_user", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_feedback_for_adding_gdrive_user", "kind": "function", "doc": "<p>UI alert upon adding a new user to MS-AutoQC workspace</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user_added_result</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_feedback_for_deleting_gdrive_user", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_feedback_for_deleting_gdrive_user", "kind": "function", "doc": "<p>UI alert upon deleting a user from the MS-AutoQC workspace</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user_deleted_result</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.get_slack_bot_token", "modulename": "ms_autoqc.DashWebApp", "qualname": "get_slack_bot_token", "kind": "function", "doc": "<p>Get Slack bot token saved in database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">token_save_result</span>, </span><span class=\"param\"><span class=\"n\">sync_update</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.save_slack_bot_token", "modulename": "ms_autoqc.DashWebApp", "qualname": "save_slack_bot_token", "kind": "function", "doc": "<p>Saves Slack bot user OAuth token in database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">slack_bot_token</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_alert_on_slack_token_save", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_alert_on_slack_token_save", "kind": "function", "doc": "<p>Displays UI alert on Slack bot token save</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">token_save_result</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.get_slack_channel", "modulename": "ms_autoqc.DashWebApp", "qualname": "get_slack_channel", "kind": "function", "doc": "<p>Gets Slack channel and notification toggle setting from database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">result</span>, </span><span class=\"param\"><span class=\"n\">sync_update</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.save_slack_channel", "modulename": "ms_autoqc.DashWebApp", "qualname": "save_slack_channel", "kind": "function", "doc": "<ol>\n<li>Registers Slack channel for MS-AutoQC notifications</li>\n<li>Sends a Slack message to confirm registration</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">notifications_enabled</span>, </span><span class=\"param\"><span class=\"n\">slack_channel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_alert_on_slack_notifications_toggle", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_alert_on_slack_notifications_toggle", "kind": "function", "doc": "<p>UI alert on setting Slack channel and toggling Slack notifications</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">result</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.get_emails_registered_for_notifications", "modulename": "ms_autoqc.DashWebApp", "qualname": "get_emails_registered_for_notifications", "kind": "function", "doc": "<p>Returns table of emails that are registered for email notifications</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">on_page_load</span>, </span><span class=\"param\"><span class=\"n\">email_added</span>, </span><span class=\"param\"><span class=\"n\">email_deleted</span>, </span><span class=\"param\"><span class=\"n\">sync_update</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.register_email_for_notifications", "modulename": "ms_autoqc.DashWebApp", "qualname": "register_email_for_notifications", "kind": "function", "doc": "<p>Registers email address for MS-AutoQC notifications</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">user_email_address</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.delete_email_from_notifications", "modulename": "ms_autoqc.DashWebApp", "qualname": "delete_email_from_notifications", "kind": "function", "doc": "<p>Unsubscribes email address from MS-AutoQC notifications</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">user_email_address</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_feedback_for_registering_email", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_feedback_for_registering_email", "kind": "function", "doc": "<p>UI alert upon registering email for email notifications</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">email_added_result</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_feedback_for_deleting_email", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_feedback_for_deleting_email", "kind": "function", "doc": "<p>UI alert upon deleting email from email notifications list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">email_deleted_result</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.add_chromatography_method", "modulename": "ms_autoqc.DashWebApp", "qualname": "add_chromatography_method", "kind": "function", "doc": "<p>Add chromatography method to database</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">on_page_load</span>,</span><span class=\"param\">\t<span class=\"n\">button_click</span>,</span><span class=\"param\">\t<span class=\"n\">chromatography_method</span>,</span><span class=\"param\">\t<span class=\"n\">msp_added</span>,</span><span class=\"param\">\t<span class=\"n\">method_removed</span>,</span><span class=\"param\">\t<span class=\"n\">config_added</span>,</span><span class=\"param\">\t<span class=\"n\">sync_update</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.remove_chromatography_method", "modulename": "ms_autoqc.DashWebApp", "qualname": "remove_chromatography_method", "kind": "function", "doc": "<p>Remove chromatography method from database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">chromatography</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.show_alert_on_chromatography_addition", "modulename": "ms_autoqc.DashWebApp", "qualname": "show_alert_on_chromatography_addition", "kind": "function", "doc": "<p>UI feedback for removing a chromatography method</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chromatography_removed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.add_msp_to_chromatography_button_feedback", "modulename": "ms_autoqc.DashWebApp", "qualname": "add_msp_to_chromatography_button_feedback", "kind": "function", "doc": "<p>\"Save changes\" button UI feedback for Settings &gt; Internal Standards</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">polarity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.bio_standard_msp_text_field_feedback", "modulename": "ms_autoqc.DashWebApp", "qualname": "bio_standard_msp_text_field_feedback", "kind": "function", "doc": "<p>UI feedback for selecting an MSP to save for a chromatography method</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.capture_uploaded_istd_msp", "modulename": "ms_autoqc.DashWebApp", "qualname": "capture_uploaded_istd_msp", "kind": "function", "doc": "<p>In Settings &gt; Internal Standards, captures contents of uploaded MSP file and calls add_msp_to_database()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">contents</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">polarity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_feedback_for_adding_msp_to_chromatography", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_feedback_for_adding_msp_to_chromatography", "kind": "function", "doc": "<p>UI feedback for adding an MSP to a chromatography method</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msp_added</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.get_msdial_directory", "modulename": "ms_autoqc.DashWebApp", "qualname": "get_msdial_directory", "kind": "function", "doc": "<p>Returns (previously inputted by user) location of MS-DIAL directory</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">select_folder_button</span>,</span><span class=\"param\">\t<span class=\"n\">settings_modal_is_open</span>,</span><span class=\"param\">\t<span class=\"n\">selected_folder</span>,</span><span class=\"param\">\t<span class=\"n\">sync_update</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.update_msdial_directory", "modulename": "ms_autoqc.DashWebApp", "qualname": "update_msdial_directory", "kind": "function", "doc": "<p>Updates MS-DIAL directory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">msdial_directory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_alert_for_msdial_directory_save", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_alert_for_msdial_directory_save", "kind": "function", "doc": "<p>Displays alert on MS-DIAL directory update</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msdial_folder_save_result</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.add_msdial_configuration", "modulename": "ms_autoqc.DashWebApp", "qualname": "add_msdial_configuration", "kind": "function", "doc": "<p>Adds new MS-DIAL configuration to the database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">msdial_config_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.delete_msdial_configuration", "modulename": "ms_autoqc.DashWebApp", "qualname": "delete_msdial_configuration", "kind": "function", "doc": "<p>Removes dropdown-selected MS-DIAL configuration from database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">msdial_config_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.get_msdial_configs_for_dropdown", "modulename": "ms_autoqc.DashWebApp", "qualname": "get_msdial_configs_for_dropdown", "kind": "function", "doc": "<p>Retrieves list of user-created configurations of MS-DIAL parameters from database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">on_page_load</span>, </span><span class=\"param\"><span class=\"n\">on_config_added</span>, </span><span class=\"param\"><span class=\"n\">on_config_removed</span>, </span><span class=\"param\"><span class=\"n\">sync_update</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.show_alert_on_msdial_config_addition", "modulename": "ms_autoqc.DashWebApp", "qualname": "show_alert_on_msdial_config_addition", "kind": "function", "doc": "<p>UI feedback on MS-DIAL configuration addition</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_added</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.show_alert_on_msdial_config_removal", "modulename": "ms_autoqc.DashWebApp", "qualname": "show_alert_on_msdial_config_removal", "kind": "function", "doc": "<p>UI feedback on MS-DIAL configuration removal</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_removed</span>, </span><span class=\"param\"><span class=\"n\">selected_config</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.get_msdial_parameters_for_config", "modulename": "ms_autoqc.DashWebApp", "qualname": "get_msdial_parameters_for_config", "kind": "function", "doc": "<p>In Settings &gt; MS-DIAL parameters, fills text fields with placeholders\nof current parameter values stored in the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msdial_config_id</span>, </span><span class=\"param\"><span class=\"n\">on_parameters_saved</span>, </span><span class=\"param\"><span class=\"n\">on_parameters_reset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.write_msdial_parameters_to_database", "modulename": "ms_autoqc.DashWebApp", "qualname": "write_msdial_parameters_to_database", "kind": "function", "doc": "<p>Saves MS-DIAL parameters to respective configuration in database</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">button_clicks</span>,</span><span class=\"param\">\t<span class=\"n\">config_name</span>,</span><span class=\"param\">\t<span class=\"n\">rt_begin</span>,</span><span class=\"param\">\t<span class=\"n\">rt_end</span>,</span><span class=\"param\">\t<span class=\"n\">mz_begin</span>,</span><span class=\"param\">\t<span class=\"n\">mz_end</span>,</span><span class=\"param\">\t<span class=\"n\">ms1_centroid_tolerance</span>,</span><span class=\"param\">\t<span class=\"n\">ms2_centroid_tolerance</span>,</span><span class=\"param\">\t<span class=\"n\">smoothing_method</span>,</span><span class=\"param\">\t<span class=\"n\">smoothing_level</span>,</span><span class=\"param\">\t<span class=\"n\">mass_slice_width</span>,</span><span class=\"param\">\t<span class=\"n\">min_peak_width</span>,</span><span class=\"param\">\t<span class=\"n\">min_peak_height</span>,</span><span class=\"param\">\t<span class=\"n\">post_id_rt_tolerance</span>,</span><span class=\"param\">\t<span class=\"n\">post_id_mz_tolerance</span>,</span><span class=\"param\">\t<span class=\"n\">post_id_score_cutoff</span>,</span><span class=\"param\">\t<span class=\"n\">alignment_rt_tolerance</span>,</span><span class=\"param\">\t<span class=\"n\">alignment_mz_tolerance</span>,</span><span class=\"param\">\t<span class=\"n\">alignment_rt_factor</span>,</span><span class=\"param\">\t<span class=\"n\">alignment_mz_factor</span>,</span><span class=\"param\">\t<span class=\"n\">peak_count_filter</span>,</span><span class=\"param\">\t<span class=\"n\">qc_at_least_filter</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.reset_msdial_parameters_to_default", "modulename": "ms_autoqc.DashWebApp", "qualname": "reset_msdial_parameters_to_default", "kind": "function", "doc": "<p>Resets parameters for selected QC configuration to default settings</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_clicks</span>, </span><span class=\"param\"><span class=\"n\">qc_config_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.show_alert_on_parameter_save", "modulename": "ms_autoqc.DashWebApp", "qualname": "show_alert_on_parameter_save", "kind": "function", "doc": "<p>UI feedback for saving changes to MS-DIAL parameters</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parameters_saved</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.show_alert_on_parameter_reset", "modulename": "ms_autoqc.DashWebApp", "qualname": "show_alert_on_parameter_reset", "kind": "function", "doc": "<p>UI feedback for resetting MS-DIAL parameters in a configuration</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parameters_reset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.add_qc_configuration", "modulename": "ms_autoqc.DashWebApp", "qualname": "add_qc_configuration", "kind": "function", "doc": "<p>Adds new QC configuration to the database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">qc_config_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.delete_qc_configuration", "modulename": "ms_autoqc.DashWebApp", "qualname": "delete_qc_configuration", "kind": "function", "doc": "<p>Removes dropdown-selected QC configuration from database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">qc_config_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.get_qc_configs_for_dropdown", "modulename": "ms_autoqc.DashWebApp", "qualname": "get_qc_configs_for_dropdown", "kind": "function", "doc": "<p>Retrieves list of user-created configurations of QC parameters from database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">on_page_load</span>, </span><span class=\"param\"><span class=\"n\">qc_config_added</span>, </span><span class=\"param\"><span class=\"n\">qc_config_removed</span>, </span><span class=\"param\"><span class=\"n\">sync_update</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.show_alert_on_qc_config_addition", "modulename": "ms_autoqc.DashWebApp", "qualname": "show_alert_on_qc_config_addition", "kind": "function", "doc": "<p>UI feedback on QC configuration addition</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_added</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.show_alert_on_qc_config_removal", "modulename": "ms_autoqc.DashWebApp", "qualname": "show_alert_on_qc_config_removal", "kind": "function", "doc": "<p>UI feedback on QC configuration removal</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_removed</span>, </span><span class=\"param\"><span class=\"n\">selected_config</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.get_qc_parameters_for_config", "modulename": "ms_autoqc.DashWebApp", "qualname": "get_qc_parameters_for_config", "kind": "function", "doc": "<p>In Settings &gt; QC Configurations, fills text fields with placeholders\nof current parameter values stored in the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">qc_config_name</span>, </span><span class=\"param\"><span class=\"n\">on_parameters_saved</span>, </span><span class=\"param\"><span class=\"n\">on_parameters_reset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.write_qc_parameters_to_database", "modulename": "ms_autoqc.DashWebApp", "qualname": "write_qc_parameters_to_database", "kind": "function", "doc": "<p>Saves QC parameters to respective configuration in database</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">button_clicks</span>,</span><span class=\"param\">\t<span class=\"n\">qc_config_name</span>,</span><span class=\"param\">\t<span class=\"n\">intensity_dropouts_cutoff</span>,</span><span class=\"param\">\t<span class=\"n\">library_rt_shift_cutoff</span>,</span><span class=\"param\">\t<span class=\"n\">in_run_rt_shift_cutoff</span>,</span><span class=\"param\">\t<span class=\"n\">library_mz_shift_cutoff</span>,</span><span class=\"param\">\t<span class=\"n\">intensity_enabled</span>,</span><span class=\"param\">\t<span class=\"n\">library_rt_enabled</span>,</span><span class=\"param\">\t<span class=\"n\">in_run_rt_enabled</span>,</span><span class=\"param\">\t<span class=\"n\">library_mz_enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.show_alert_on_qc_parameter_save", "modulename": "ms_autoqc.DashWebApp", "qualname": "show_alert_on_qc_parameter_save", "kind": "function", "doc": "<p>UI feedback for saving changes to QC parameters</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parameters_saved</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.show_alert_on_qc_parameter_reset", "modulename": "ms_autoqc.DashWebApp", "qualname": "show_alert_on_qc_parameter_reset", "kind": "function", "doc": "<p>UI feedback for resetting QC parameters in a configuration</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parameters_reset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.get_biological_standards", "modulename": "ms_autoqc.DashWebApp", "qualname": "get_biological_standards", "kind": "function", "doc": "<p>Populates dropdown and table of biological standards</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">on_page_load</span>,</span><span class=\"param\">\t<span class=\"n\">on_standard_added</span>,</span><span class=\"param\">\t<span class=\"n\">on_standard_removed</span>,</span><span class=\"param\">\t<span class=\"n\">on_method_added</span>,</span><span class=\"param\">\t<span class=\"n\">on_method_removed</span>,</span><span class=\"param\">\t<span class=\"n\">on_msp_added</span>,</span><span class=\"param\">\t<span class=\"n\">on_bio_standard_msdial_config_added</span>,</span><span class=\"param\">\t<span class=\"n\">sync_update</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.add_biological_standard", "modulename": "ms_autoqc.DashWebApp", "qualname": "add_biological_standard", "kind": "function", "doc": "<p>Adds biological standard to database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">identifier</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.remove_biological_standard", "modulename": "ms_autoqc.DashWebApp", "qualname": "remove_biological_standard", "kind": "function", "doc": "<p>Removes biological standard (and all corresponding MSPs) in the database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">biological_standard_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.bio_standard_msp_text_field_ui_callback", "modulename": "ms_autoqc.DashWebApp", "qualname": "bio_standard_msp_text_field_ui_callback", "kind": "function", "doc": "<p>UI feedback for selecting an MSP to save for a biological standard</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.capture_uploaded_bio_msp", "modulename": "ms_autoqc.DashWebApp", "qualname": "capture_uploaded_bio_msp", "kind": "function", "doc": "<p>In Settings &gt; Biological Standards, captures contents of uploaded MSP file and calls add_msp_to_database().</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">button_click</span>,</span><span class=\"param\">\t<span class=\"n\">contents</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span>,</span><span class=\"param\">\t<span class=\"n\">chromatography</span>,</span><span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">bio_standard</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.show_alert_on_bio_standard_addition", "modulename": "ms_autoqc.DashWebApp", "qualname": "show_alert_on_bio_standard_addition", "kind": "function", "doc": "<p>UI feedback for adding a biological standard</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bio_standard_added</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.show_alert_on_bio_standard_removal", "modulename": "ms_autoqc.DashWebApp", "qualname": "show_alert_on_bio_standard_removal", "kind": "function", "doc": "<p>UI feedback for removing a biological standard</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bio_standard_removed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_feedback_for_adding_msp_to_bio_standard", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_feedback_for_adding_msp_to_bio_standard", "kind": "function", "doc": "<p>UI feedback for adding an MSP to a biological standard</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bio_standard_msp_added</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.add_msp_to_bio_standard_button_feedback", "modulename": "ms_autoqc.DashWebApp", "qualname": "add_msp_to_bio_standard_button_feedback", "kind": "function", "doc": "<p>\"Save changes\" button UI feedback for Settings &gt; Biological Standards</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">polarity</span>, </span><span class=\"param\"><span class=\"n\">bio_standard</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.populate_msdial_configs_for_biological_standard", "modulename": "ms_autoqc.DashWebApp", "qualname": "populate_msdial_configs_for_biological_standard", "kind": "function", "doc": "<p>In Settings &gt; Biological Standards, populates the MS-DIAL configurations dropdown</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msdial_config_added</span>, </span><span class=\"param\"><span class=\"n\">msdial_config_removed</span>, </span><span class=\"param\"><span class=\"n\">sync_update</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.add_msdial_config_for_bio_standard", "modulename": "ms_autoqc.DashWebApp", "qualname": "add_msdial_config_for_bio_standard", "kind": "function", "doc": "<p>In Settings &gt; Biological Standards, sets the MS-DIAL configuration to be used for chromatography</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">biological_standard</span>, </span><span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">config_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_feedback_for_setting_msdial_config_for_bio_standard", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_feedback_for_setting_msdial_config_for_bio_standard", "kind": "function", "doc": "<p>In Settings &gt; Biological Standards, provides an alert when MS-DIAL config is successfully set for biological standard</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_added</span>, </span><span class=\"param\"><span class=\"n\">bio_standard</span>, </span><span class=\"param\"><span class=\"n\">chromatography</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.add_msdial_config_for_chromatography", "modulename": "ms_autoqc.DashWebApp", "qualname": "add_msdial_config_for_chromatography", "kind": "function", "doc": "<p>In Settings &gt; Internal Standards, sets the MS-DIAL configuration to be used for processing samples</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span>, </span><span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">config_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.ui_feedback_for_setting_msdial_config_for_chromatography", "modulename": "ms_autoqc.DashWebApp", "qualname": "ui_feedback_for_setting_msdial_config_for_chromatography", "kind": "function", "doc": "<p>In Settings &gt; Internal Standards, provides an alert when MS-DIAL config is successfully set for a chromatography</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_added</span>, </span><span class=\"param\"><span class=\"n\">chromatography</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.toggle_new_run_modal", "modulename": "ms_autoqc.DashWebApp", "qualname": "toggle_new_run_modal", "kind": "function", "doc": "<p>Toggles modal for setting up AutoQC monitoring for a new instrument run</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">button_clicks</span>,</span><span class=\"param\">\t<span class=\"n\">success</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_name</span>,</span><span class=\"param\">\t<span class=\"n\">browse_folder_button</span>,</span><span class=\"param\">\t<span class=\"n\">file_explorer_button</span>,</span><span class=\"param\">\t<span class=\"n\">settings_modal_is_open</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.populate_options_for_new_run", "modulename": "ms_autoqc.DashWebApp", "qualname": "populate_options_for_new_run", "kind": "function", "doc": "<p>Populates dropdowns and checklists for Setup New MS-AutoQC Job page</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_click</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.capture_uploaded_sequence", "modulename": "ms_autoqc.DashWebApp", "qualname": "capture_uploaded_sequence", "kind": "function", "doc": "<p>Converts sequence CSV file to JSON string and stores in dcc.Store object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">contents</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.capture_uploaded_metadata", "modulename": "ms_autoqc.DashWebApp", "qualname": "capture_uploaded_metadata", "kind": "function", "doc": "<p>Converts metadata CSV file to JSON string and stores in dcc.Store object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">contents</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.update_new_job_button_text", "modulename": "ms_autoqc.DashWebApp", "qualname": "update_new_job_button_text", "kind": "function", "doc": "<p>Updates New MS-AutoQC Job form submit button based on job type</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">job_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.validation_feedback_for_new_run_setup_form", "modulename": "ms_autoqc.DashWebApp", "qualname": "validation_feedback_for_new_run_setup_form", "kind": "function", "doc": "<p>Extensive form validation and feedback for setting up a new MS-AutoQC job</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">chromatography</span>,</span><span class=\"param\">\t<span class=\"n\">bio_standards</span>,</span><span class=\"param\">\t<span class=\"n\">qc_config</span>,</span><span class=\"param\">\t<span class=\"n\">sequence_contents</span>,</span><span class=\"param\">\t<span class=\"n\">sequence_filename</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_contents</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_filename</span>,</span><span class=\"param\">\t<span class=\"n\">data_acquisition_path</span>,</span><span class=\"param\">\t<span class=\"n\">run_id_valid</span>,</span><span class=\"param\">\t<span class=\"n\">run_id_invalid</span>,</span><span class=\"param\">\t<span class=\"n\">chromatography_valid</span>,</span><span class=\"param\">\t<span class=\"n\">chromatography_invalid</span>,</span><span class=\"param\">\t<span class=\"n\">qc_config_valid</span>,</span><span class=\"param\">\t<span class=\"n\">qc_config_invalid</span>,</span><span class=\"param\">\t<span class=\"n\">sequence_valid</span>,</span><span class=\"param\">\t<span class=\"n\">sequence_invalid</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_valid</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_invalid</span>,</span><span class=\"param\">\t<span class=\"n\">path_valid</span>,</span><span class=\"param\">\t<span class=\"n\">path_invalid</span>,</span><span class=\"param\">\t<span class=\"n\">instrument</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.enable_new_autoqc_job_button", "modulename": "ms_autoqc.DashWebApp", "qualname": "enable_new_autoqc_job_button", "kind": "function", "doc": "<p>Enables \"submit\" button for New MS-AutoQC Job form</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_id_valid</span>,</span><span class=\"param\">\t<span class=\"n\">chromatography_valid</span>,</span><span class=\"param\">\t<span class=\"n\">qc_config_valid</span>,</span><span class=\"param\">\t<span class=\"n\">sequence_valid</span>,</span><span class=\"param\">\t<span class=\"n\">path_valid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.new_autoqc_job_setup", "modulename": "ms_autoqc.DashWebApp", "qualname": "new_autoqc_job_setup", "kind": "function", "doc": "<p>This callback initiates the following:</p>\n\n<ol>\n<li>Writing a new instrument run to the database</li>\n<li>Generate parameters files for MS-DIAL processing\n3a. Initializing run monitoring at the given directory for an active run, or\n3b. Iterating through and processing data files for a completed run</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">button_clicks</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_id</span>,</span><span class=\"param\">\t<span class=\"n\">chromatography</span>,</span><span class=\"param\">\t<span class=\"n\">bio_standards</span>,</span><span class=\"param\">\t<span class=\"n\">sequence</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span>,</span><span class=\"param\">\t<span class=\"n\">acquisition_path</span>,</span><span class=\"param\">\t<span class=\"n\">qc_config_id</span>,</span><span class=\"param\">\t<span class=\"n\">job_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.open_file_explorer", "modulename": "ms_autoqc.DashWebApp", "qualname": "open_file_explorer", "kind": "function", "doc": "<p>Opens custom file explorer modal</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">new_job_browse_folder_button</span>,</span><span class=\"param\">\t<span class=\"n\">select_folder_button</span>,</span><span class=\"param\">\t<span class=\"n\">new_run_modal_is_open</span>,</span><span class=\"param\">\t<span class=\"n\">msdial_select_folder_button</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.list_directories_in_file_explorer", "modulename": "ms_autoqc.DashWebApp", "qualname": "list_directories_in_file_explorer", "kind": "function", "doc": "<p>Lists directories for a user to select in the file explorer modal</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_explorer_is_open</span>,</span><span class=\"param\">\t<span class=\"n\">selected_data_folder</span>,</span><span class=\"param\">\t<span class=\"n\">selected_msdial_folder</span>,</span><span class=\"param\">\t<span class=\"n\">settings_is_open</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.the_most_inefficient_callback_in_history", "modulename": "ms_autoqc.DashWebApp", "qualname": "the_most_inefficient_callback_in_history", "kind": "function", "doc": "<p>Handles user selection of folder in the file explorer modal (I'm sorry)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">com_1</span>,</span><span class=\"param\">\t<span class=\"n\">com_2</span>,</span><span class=\"param\">\t<span class=\"n\">com_3</span>,</span><span class=\"param\">\t<span class=\"n\">com_4</span>,</span><span class=\"param\">\t<span class=\"n\">com_5</span>,</span><span class=\"param\">\t<span class=\"n\">com_6</span>,</span><span class=\"param\">\t<span class=\"n\">com_7</span>,</span><span class=\"param\">\t<span class=\"n\">com_8</span>,</span><span class=\"param\">\t<span class=\"n\">com_9</span>,</span><span class=\"param\">\t<span class=\"n\">com_10</span>,</span><span class=\"param\">\t<span class=\"n\">com_11</span>,</span><span class=\"param\">\t<span class=\"n\">com_12</span>,</span><span class=\"param\">\t<span class=\"n\">com_13</span>,</span><span class=\"param\">\t<span class=\"n\">com_14</span>,</span><span class=\"param\">\t<span class=\"n\">com_15</span>,</span><span class=\"param\">\t<span class=\"n\">com_16</span>,</span><span class=\"param\">\t<span class=\"n\">com_17</span>,</span><span class=\"param\">\t<span class=\"n\">com_18</span>,</span><span class=\"param\">\t<span class=\"n\">com_19</span>,</span><span class=\"param\">\t<span class=\"n\">com_20</span>,</span><span class=\"param\">\t<span class=\"n\">com_21</span>,</span><span class=\"param\">\t<span class=\"n\">com_22</span>,</span><span class=\"param\">\t<span class=\"n\">com_23</span>,</span><span class=\"param\">\t<span class=\"n\">com_24</span>,</span><span class=\"param\">\t<span class=\"n\">com_25</span>,</span><span class=\"param\">\t<span class=\"n\">com_26</span>,</span><span class=\"param\">\t<span class=\"n\">com_27</span>,</span><span class=\"param\">\t<span class=\"n\">com_28</span>,</span><span class=\"param\">\t<span class=\"n\">com_29</span>,</span><span class=\"param\">\t<span class=\"n\">com_30</span>,</span><span class=\"param\">\t<span class=\"n\">dir_1</span>,</span><span class=\"param\">\t<span class=\"n\">dir_2</span>,</span><span class=\"param\">\t<span class=\"n\">dir_3</span>,</span><span class=\"param\">\t<span class=\"n\">dir_4</span>,</span><span class=\"param\">\t<span class=\"n\">dir_5</span>,</span><span class=\"param\">\t<span class=\"n\">dir_6</span>,</span><span class=\"param\">\t<span class=\"n\">dir_7</span>,</span><span class=\"param\">\t<span class=\"n\">dir_8</span>,</span><span class=\"param\">\t<span class=\"n\">dir_9</span>,</span><span class=\"param\">\t<span class=\"n\">dir_10</span>,</span><span class=\"param\">\t<span class=\"n\">dir_11</span>,</span><span class=\"param\">\t<span class=\"n\">dir_12</span>,</span><span class=\"param\">\t<span class=\"n\">dir_13</span>,</span><span class=\"param\">\t<span class=\"n\">dir_14</span>,</span><span class=\"param\">\t<span class=\"n\">dir_15</span>,</span><span class=\"param\">\t<span class=\"n\">dir_16</span>,</span><span class=\"param\">\t<span class=\"n\">dir_17</span>,</span><span class=\"param\">\t<span class=\"n\">dir_18</span>,</span><span class=\"param\">\t<span class=\"n\">dir_19</span>,</span><span class=\"param\">\t<span class=\"n\">dir_20</span>,</span><span class=\"param\">\t<span class=\"n\">dir_21</span>,</span><span class=\"param\">\t<span class=\"n\">dir_22</span>,</span><span class=\"param\">\t<span class=\"n\">dir_23</span>,</span><span class=\"param\">\t<span class=\"n\">dir_24</span>,</span><span class=\"param\">\t<span class=\"n\">dir_25</span>,</span><span class=\"param\">\t<span class=\"n\">dir_26</span>,</span><span class=\"param\">\t<span class=\"n\">dir_27</span>,</span><span class=\"param\">\t<span class=\"n\">dir_28</span>,</span><span class=\"param\">\t<span class=\"n\">dir_29</span>,</span><span class=\"param\">\t<span class=\"n\">dir_30</span>,</span><span class=\"param\">\t<span class=\"n\">selected_data_folder</span>,</span><span class=\"param\">\t<span class=\"n\">selected_msdial_folder</span>,</span><span class=\"param\">\t<span class=\"n\">back_button</span>,</span><span class=\"param\">\t<span class=\"n\">settings_is_open</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.update_file_explorer_title", "modulename": "ms_autoqc.DashWebApp", "qualname": "update_file_explorer_title", "kind": "function", "doc": "<p>Populates data acquisition path text field with user selection</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">selected_data_folder</span>, </span><span class=\"param\"><span class=\"n\">selected_msdial_folder</span>, </span><span class=\"param\"><span class=\"n\">settings_is_open</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.update_folder_path_text_field", "modulename": "ms_autoqc.DashWebApp", "qualname": "update_folder_path_text_field", "kind": "function", "doc": "<p>Populates data acquisition path text field with user selection</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">select_folder_button</span>, </span><span class=\"param\"><span class=\"n\">selected_folder</span>, </span><span class=\"param\"><span class=\"n\">settings_is_open</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.update_progress_bar_during_active_instrument_run", "modulename": "ms_autoqc.DashWebApp", "qualname": "update_progress_bar_during_active_instrument_run", "kind": "function", "doc": "<p>Displays and updates progress bar if an active instrument run was selected from the table</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">active_cell</span>, </span><span class=\"param\"><span class=\"n\">table_data</span>, </span><span class=\"param\"><span class=\"n\">refresh</span>, </span><span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">new_job_started</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.hide_elements_for_non_instrument_devices", "modulename": "ms_autoqc.DashWebApp", "qualname": "hide_elements_for_non_instrument_devices", "kind": "function", "doc": "<p>Hides job setup button for shared users</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.confirm_action_on_job", "modulename": "ms_autoqc.DashWebApp", "qualname": "confirm_action_on_job", "kind": "function", "doc": "<p>Shows an alert confirming that the user wants to perform an action on the selected MS-AutoQC job</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mark_job_as_completed</span>,</span><span class=\"param\">\t<span class=\"n\">job_completed</span>,</span><span class=\"param\">\t<span class=\"n\">restart_job</span>,</span><span class=\"param\">\t<span class=\"n\">job_restarted</span>,</span><span class=\"param\">\t<span class=\"n\">delete_job</span>,</span><span class=\"param\">\t<span class=\"n\">job_deleted</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DashWebApp.perform_action_on_job", "modulename": "ms_autoqc.DashWebApp", "qualname": "perform_action_on_job", "kind": "function", "doc": "<p>Performs the selected action on the selected MS-AutoQC job</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">confirm_button</span>, </span><span class=\"param\"><span class=\"n\">modal_title</span>, </span><span class=\"param\"><span class=\"n\">resources</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions", "modulename": "ms_autoqc.DatabaseFunctions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "ms_autoqc.DatabaseFunctions.auth_container", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "auth_container", "kind": "variable", "doc": "<p>The functions defined below operate on two database types:</p>\n\n<ul>\n<li>One storing instrument run metadata, sample QC results, and biological standard QC results</li>\n<li>The other storing instrument metadata, workspace settings for workspace access, chromatography methods, \nbiological standards, QC configurations, and MS-DIAL configurations</li>\n</ul>\n\n<p>In addition, this file also contains methods for syncing data and settings with Google Drive.\nTo get an overview of all functions, please visit the documentation on <a href=\"https://czbiohub.github.io/MS-AutoQC\">https://czbiohub.github.io/MS-AutoQC</a>.</p>\n", "default_value": " = [&lt;pydrive2.auth.GoogleAuth object&gt;]"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_database_file", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_database_file", "kind": "function", "doc": "<p>Returns database file for a given instrument ID.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID that specifies which database file to retrieve</li>\n<li><strong>sqlite_conn (bool, default False):</strong>  Whether to receive the path for establishing a SQLite connection</li>\n<li><strong>zip (bool, default False):</strong>  Whether to receive the path of the database file in the local app directory</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Path for the database file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">sqlite_conn</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"nb\">zip</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.connect_to_database", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "connect_to_database", "kind": "function", "doc": "<p>Establishes a connection to a SQLite database of choice</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name of the database, either \"Settings\" or an instrument ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sqlalchemy.MetaData:\n      A container object that consists of different features of a database being described\n  sqlalchemy.Connection:\n      An object that represents a single DBAPI connection, and always emits SQL statements within\n      the context of a transaction block</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.create_databases", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "create_databases", "kind": "function", "doc": "<p>Initializes SQLite databases for 1) instrument data and 2) workspace settings.</p>\n\n<p>Creates the following tables in the instrument database: \"runs\", \"bio_qc_results\", \"sample_qc_results\".</p>\n\n<p>Creates the following tables in the settings database: \"biological_standards\", \"chromatography_methods\",\n\"email_notifications\", \"instruments\", \"gdrive_users\", \"internal_standards\", \"msdial_parameters\", \"qc_parameters\",\n\"targeted_features\", \"workspace\".</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID to name the new database (\"Thermo QE 1\" becomes \"Thermo_QE_1.db\")</li>\n<li><strong>new_instrument (bool, default False):</strong>  Whether a new instrument database is being added to a workspace, or whether a new\ninstrument database AND settings database are being created for the first time</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">new_instrument</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.execute_vacuum", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "execute_vacuum", "kind": "function", "doc": "<p>Executes VACUUM command on the database of choice.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>database (str):</strong>  name of the database, either \"Settings\" or Instrument ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">database</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_drive_instance", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_drive_instance", "kind": "function", "doc": "<p>Returns user-authenticated Google Drive instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.launch_google_drive_authentication", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "launch_google_drive_authentication", "kind": "function", "doc": "<p>Launches Google Drive authentication flow and sets authentication instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.save_google_drive_credentials", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "save_google_drive_credentials", "kind": "function", "doc": "<p>Saves Google credentials to a credentials.txt file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.initialize_google_drive", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "initialize_google_drive", "kind": "function", "doc": "<p>Initializes instance of Google Drive using credentials.txt and settings.yaml in /auth directory</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the Google client credentials file (in the \"auth\" directory) exists.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.is_valid", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "is_valid", "kind": "function", "doc": "<p>Checks that all required tables in all databases (or a single database of choice) are present.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str, default None):</strong>  Specified if validating a specific database</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.sync_is_enabled", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "sync_is_enabled", "kind": "function", "doc": "<p>Checks whether Google Drive sync is enabled simply by querying whether Google Drive ID's exist in the database.</p>\n\n<p>Typically used for separating sync-specific functionality.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether Google Drive sync is enabled or not</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.email_notifications_are_enabled", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "email_notifications_are_enabled", "kind": "function", "doc": "<p>Checks whether email notifications are enabled.</p>\n\n<p>Returns True if databases are valid, Google Drive sync is enabled, and if email addresses were\nregistered by user in Settings &gt; General. Returns False if any condition is not met.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if email notifications are enabled, False if not</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.slack_notifications_are_enabled", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "slack_notifications_are_enabled", "kind": "function", "doc": "<p>Checks whether Slack notifications are enabled.</p>\n\n<p>Returns True if user enabled Slack notifications in Settings &gt; General, and False if not.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if Slack notifications are enabled, False if not</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.is_instrument_computer", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "is_instrument_computer", "kind": "function", "doc": "<p>Checks whether user's device is the instrument computer.</p>\n\n<p>This is specified during setup. If the user created a new instrument, or signed in as an instrument device, then\nthis will return True. If the user signed in to their workspace from a non-instrument device, this will return False.</p>\n\n<p>Typically used to organize / hide UI functions for instrument and non-instrument devices\nthat MS-AutoQC is installed on.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if device is instrument computer, False if not</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_md5_for_settings_db", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_md5_for_settings_db", "kind": "function", "doc": "<p>Calculates and returns MD5 checksum for the settings database file.</p>\n\n<p>Typically used for checking whether the user changed settings and prompting a Google Drive sync (if sync is enabled).</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>An MD5 checksum of /data/methods/Settings.db</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.settings_were_modified", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "settings_were_modified", "kind": "function", "doc": "<p>Checks whether settings database file has been modified.</p>\n\n<p>This is done by comparing the checksum computed when Settings were opened (given as a parameter)\nwith the checksum computed when Settings were closed (in this function call).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>md5_checksum (str):</strong>  An MD5 checksum of /data/methods/Settings.db that was computed when the user opened Settings in the app</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if checksums don't match, False if checksums match.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">md5_checksum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.zip_database", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "zip_database", "kind": "function", "doc": "<p>Compresses instrument database file into a ZIP archive in /data directory.</p>\n\n<p>Used for fast downloads / uploads over network connections to Google Drive (if Google Drive sync is enabled).</p>\n\n<p>The zip archive is accessible by filename and path in the /data directory. For example, zipping\nthe database for \"Thermo QE 1\" will generate a zip file with path \"../data/Thermo_QE_1.zip\".</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str, default None):</strong>  If specified, selects a database to zip by instrument ID (ex: \"Thermo QE 1\")</li>\n<li><strong>filename (str, default None):</strong>  If specified, selects a database to zip by filename (ex: \"Thermo_QE_1.zip\")</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.unzip_database", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "unzip_database", "kind": "function", "doc": "<p>Unzips ZIP archive containing instrument database file and deletes the archive when complete.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str, default None):</strong>  If specified, selects a database to zip by instrument ID (ex: \"Thermo QE 1\")</li>\n<li><strong>filename (str, default None):</strong>  If specified, selects a database to zip by filename (ex: \"Thermo_QE_1.zip\")</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.zip_methods", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "zip_methods", "kind": "function", "doc": "<p>Compresses methods directory into a ZIP archive in /data directory.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Path for zip archive of methods directory (ex: \"../data/methods.zip\")</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.unzip_methods", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "unzip_methods", "kind": "function", "doc": "<p>Unzips ZIP archive containing methods directory and deletes the archive when complete.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.zip_csv_files", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "zip_csv_files", "kind": "function", "doc": "<p>Compresses CSV files into a ZIP archive in /data directory.</p>\n\n<p>Used for fast upload of instrument run data to Google Drive during an active instrument run (if Google Drive sync is enabled).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>input_directory (str):</strong>  The temporary directory for files pertaining to an instrument run, denoted as \"Instrument_ID_Run_ID\".\nFor example, a job with ID \"BRDE001\" created under instrument with ID \"Thermo QE 1\" would have its files\nstored in \"/data/Thermo_QE_1_BRDE001\".</li>\n<li><strong>output_directory_and_name (str):</strong>  Essentially, the file path for the ZIP archive (ex: \"/data/Instrument_ID_Run_ID\").</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Path for zip archive of CSV files with instrument run data (ex: \"../data/Instrument_ID_Run_ID.zip\")</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_directory</span>, </span><span class=\"param\"><span class=\"n\">output_directory_and_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.unzip_csv_files", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "unzip_csv_files", "kind": "function", "doc": "<p>Unzips ZIP archive of CSV files and deletes the archive upon completion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_zip</span>, </span><span class=\"param\"><span class=\"n\">output_directory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_table", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_table", "kind": "function", "doc": "<p>Retrieves table from database as a pandas DataFrame object.</p>\n\n<p>TODO: Improve this function to accept column and record queries</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>database_name (str):</strong>  The database to query, using instrument ID or \"Settings\"</li>\n<li><strong>table_name (str):</strong>  The table to retrieve</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame of table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">database_name</span>, </span><span class=\"param\"><span class=\"n\">table_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.generate_client_settings_yaml", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "generate_client_settings_yaml", "kind": "function", "doc": "<p>Generates a settings.yaml file for Google authentication in the /auth directory.</p>\n\n<p>Client ID and client secret are generated and provided by the user in the Google Cloud Console.</p>\n\n<p>See: <a href=\"https://docs.iterative.ai/PyDrive2/oauth/#automatic-and-custom-authentication-with-settings-yaml\">https://docs.iterative.ai/PyDrive2/oauth/#automatic-and-custom-authentication-with-settings-yaml</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>client_id (str):</strong>  The Client ID of the MS-AutoQC application, generated and provided by the user</li>\n<li><strong>client_secret (str):</strong>  The Client Secret of the MS-AutoQC application, generated and provided by the user</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">client_id</span>, </span><span class=\"param\"><span class=\"n\">client_secret</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.insert_google_drive_ids", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "insert_google_drive_ids", "kind": "function", "doc": "<p>Inserts Google Drive ID's into corresponding tables to enable Google Drive sync.</p>\n\n<p>This function is called when a user creates a new instrument in their workspace.</p>\n\n<p>The ID's for the following files / folders in Google Drive are stored in the database:</p>\n\n<ol>\n<li>MS-AutoQC folder</li>\n<li>Instrument database zip file</li>\n<li>Methods directory zip file</li>\n</ol>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>gdrive_folder_id (str):</strong>  Google Drive ID for the MS-AutoQC folder (found in the user's root directory in Drive)</li>\n<li><strong>instrument_db_file_id (str):</strong>  Google Drive ID for the instrument database ZIP file</li>\n<li><strong>methods_zip_file_id (str):</strong>  Google Drive ID for the methods directory ZIP file</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">instrument_id</span>,</span><span class=\"param\">\t<span class=\"n\">gdrive_folder_id</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_db_file_id</span>,</span><span class=\"param\">\t<span class=\"n\">methods_zip_file_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.insert_new_instrument", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "insert_new_instrument", "kind": "function", "doc": "<p>Inserts a new instrument into the \"instruments\" table in the Settings database.</p>\n\n<p>The name is the instrument ID, and the vendor is one of 5 options: Thermo Fisher, Agilent, Bruker, Sciex, and Waters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Instrument ID</li>\n<li><strong>vendor (str):</strong>  Instrument vendor</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">vendor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_instruments_list", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_instruments_list", "kind": "function", "doc": "<p>Returns list of instruments in database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_instrument", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_instrument", "kind": "function", "doc": "<p>Returns record from \"instruments\" table as a DataFrame for a given instrument</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame containing the name, vendor, and drive_id for the given instrument</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_filenames_from_sequence", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_filenames_from_sequence", "kind": "function", "doc": "<p>Filters preblanks, washes, and shutdown injections from sequence file, and simultaneously assigns\npolariy to each sample based on presence of \"Pos\" or \"Neg\" in Instrument Method column.</p>\n\n<p>This function is called upon starting a new QC job.</p>\n\n<p>TODO: Adapt this function for other instrument vendors.\nTODO: Check the method filename, not entire file path, for \"Pos\" and \"Neg\".\n    A folder containing \"Pos\" or \"Neg\" will give incorrect polarity assignments.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sequence (str):</strong>  The acquisition sequence file, encoded as a JSON string in \"split\" format</li>\n<li><strong>vendor (str):</strong>  The instrument vendor (see to-do statements)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame of acquisition sequence, with preblanks / washes / shutdowns filtered out and polarities assigned</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sequence</span>, </span><span class=\"param\"><span class=\"n\">vendor</span><span class=\"o\">=</span><span class=\"s1\">&#39;Thermo Fisher&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_polarity_for_sample", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_polarity_for_sample", "kind": "function", "doc": "<p>Returns polarity for a given sample.</p>\n\n<p>TODO: Loading hundreds of rows of data before querying for one sample is massively inefficient.\n    This function was written in haste and can be easily implemented in a much better way.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n<li><strong>sample_id (str):</strong>  Sample ID</li>\n<li><strong>status (str):</strong>  Job status</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Polarity for the given sample, as either \"Pos\" or \"Neg\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">sample_id</span>, </span><span class=\"param\"><span class=\"n\">status</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.insert_new_run", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "insert_new_run", "kind": "function", "doc": "<p>Initializes sample records in database for a new QC job.</p>\n\n<h6 id=\"performs-the-following-functions\">Performs the following functions:</h6>\n\n<blockquote>\n  <ol>\n  <li>Inserts a record for the new instrument run into the \"runs\" table</li>\n  <li>Inserts sample rows into the \"sample_qc_results\" table</li>\n  <li>Inserts biological standard sample rows into the \"bio_qc_results\" table</li>\n  </ol>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>chromatography (str):</strong>  Chromatography method</li>\n<li><strong>bio_standards (str):</strong>  Biological standards</li>\n<li><strong>path (str):</strong>  Data acquisition path</li>\n<li><strong>sequence (str):</strong>  Acquisition sequence table, as JSON string in \"records\" format</li>\n<li><strong>metadata (str):</strong>  Sample metadata table, as JSON string in \"records\" format</li>\n<li><strong>qc_config_id (str):</strong>  Name of QC configuration</li>\n<li><strong>job_type (str):</strong>  Either \"completed\" or \"active\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_id</span>,</span><span class=\"param\">\t<span class=\"n\">chromatography</span>,</span><span class=\"param\">\t<span class=\"n\">bio_standards</span>,</span><span class=\"param\">\t<span class=\"n\">path</span>,</span><span class=\"param\">\t<span class=\"n\">sequence</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span>,</span><span class=\"param\">\t<span class=\"n\">qc_config_id</span>,</span><span class=\"param\">\t<span class=\"n\">job_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_instrument_run", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_instrument_run", "kind": "function", "doc": "<p>Returns DataFrame of given instrument run from \"runs\" table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Run ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame containing record for instrument run</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_instrument_run_from_csv", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_instrument_run_from_csv", "kind": "function", "doc": "<p>Returns DataFrame of selected instrument run from CSV files during active instrument runs.</p>\n\n<p>This function is called when a user views an active instrument run from an external device\n(to prevent downloading / uploading the database file with each sample acquisition).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Run ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame containing record for instrument run</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_instrument_runs", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_instrument_runs", "kind": "function", "doc": "<p>Returns DataFrame of all runs on a given instrument from \"runs\" table</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>as_list (str, default False):</strong>  If True, returns only a list of names of instrument runs (jobs)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame containing records for instrument runs (QC jobs) for the given instrument</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">as_list</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.delete_instrument_run", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "delete_instrument_run", "kind": "function", "doc": "<p>Deletes all records for an instrument run (QC job) from the database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Run ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_acquisition_path", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_acquisition_path", "kind": "function", "doc": "<p>Retrieves acquisition path for a given instrument run.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Run ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Acquisition path for the given instrument run</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_md5", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_md5", "kind": "function", "doc": "<p>Returns MD5 checksum for a data file in \"sample_qc_results\" table.</p>\n\n<p>Used for comparing MD5 checksums during active instrument runs.</p>\n\n<p>TODO: This function will return incorrect results if two different instrument runs\n    have samples with the same sample ID. It needs to include \"run_id\" in the SQL query.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>sample_id (str):</strong>  Sample ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>MD5 checksum stored for the data file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">sample_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.update_md5_checksum", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "update_md5_checksum", "kind": "function", "doc": "<p>Updates MD5 checksum for a data file during sample acquisition.</p>\n\n<p>TODO: This function will return incorrect results if two different instrument runs\n    have samples with the same sample ID. It needs to include \"run_id\" in the SQL query.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>sample_id (str):</strong>  Sample ID (filename) of data file</li>\n<li><strong>md5_checksum (str):</strong>  MD5 checksum for the sample data file</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">sample_id</span>, </span><span class=\"param\"><span class=\"n\">md5_checksum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.write_qc_results", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "write_qc_results", "kind": "function", "doc": "<p>Writes QC results (as dictionary records) to sample record upon MS-DIAL processing completion.</p>\n\n<p>QC results consist of m/z, RT, and intensity data for internal standards (or targeted metabolites in biological standards),\nas well as a DataFrame containing delta m/z, delta RT, in-run delta RT, warnings, and fails (qc_dataframe) and overall QC result\n(which will be \"Pass\" or \"Fail\").</p>\n\n<p>The data is encoded as dictionary in \"records\" format: [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}].\nThis dictionary is cast to a string before being passed to this function.</p>\n\n<p>TODO: Update names of arguments from json_x to record_x, as the data is no longer encoded as JSON strings.\n    The data is now encoded in \"records\" format as a string.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sample_id (str):</strong>  Sample ID</li>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (Job ID)</li>\n<li><strong>json_mz (str):</strong>  String dict of internal standard m/z data in \"records\" format</li>\n<li><strong>json_rt (str):</strong>  String dict of internal standard RT data in \"records\" format</li>\n<li><strong>json_intensity (str):</strong>  String dict of internal standard intensity data in \"records\" format</li>\n<li><strong>qc_dataframe (str):</strong>  String dict of various QC data in \"records\" format</li>\n<li><strong>qc_result (str):</strong>  QC result for sample, either \"Pass\" or \"Fail\"</li>\n<li><strong>is_bio_standard (bool):</strong>  Whether the sample is a biological standard</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sample_id</span>,</span><span class=\"param\">\t<span class=\"n\">instrument_id</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">json_mz</span>,</span><span class=\"param\">\t<span class=\"n\">json_rt</span>,</span><span class=\"param\">\t<span class=\"n\">json_intensity</span>,</span><span class=\"param\">\t<span class=\"n\">qc_dataframe</span>,</span><span class=\"param\">\t<span class=\"n\">qc_result</span>,</span><span class=\"param\">\t<span class=\"n\">is_bio_standard</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_chromatography_methods", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_chromatography_methods", "kind": "function", "doc": "<p>Returns DataFrame of chromatography methods from the Settings database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_chromatography_methods_list", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_chromatography_methods_list", "kind": "function", "doc": "<p>Returns list of chromatography method ID's from the Settings database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.insert_chromatography_method", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "insert_chromatography_method", "kind": "function", "doc": "<p>Inserts new chromatography method in the \"chromatography_methods\" table of the Settings database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>method_id (str):</strong>  Name of the chromatography method</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">method_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.remove_chromatography_method", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "remove_chromatography_method", "kind": "function", "doc": "<p>Deletes chromatography method and all associated records from the Settings database.</p>\n\n<h6 id=\"details\">Details:</h6>\n\n<blockquote>\n  <ol>\n  <li>Removes chromatography method in \"chromatography_methods\" table</li>\n  <li>Removes method from \"biological_standards\" table</li>\n  <li>Removes associated internal standards from \"internal_standards\" table</li>\n  <li>Removes associated targeted features from \"targeted_features\" table</li>\n  <li>Deletes corresponding MSPs from folders</li>\n  <li>Deletes corresponding MSPs from Google Drive (if sync is enabled)</li>\n  </ol>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>method_id (str):</strong>  Name of the chromatography method</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">method_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.update_msdial_config_for_internal_standards", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "update_msdial_config_for_internal_standards", "kind": "function", "doc": "<p>Updates MS-DIAL configuration for a given chromatography method.</p>\n\n<p>This MS-DIAL configuration will be used to generate a parameters file\nfor processing samples run with this chromatography method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chromatography (str):</strong>  Chromatography method ID (name)</li>\n<li><strong>config_id (str):</strong>  MS-DIAL configuration ID (name)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">config_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.add_msp_to_database", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "add_msp_to_database", "kind": "function", "doc": "<p>Parses compounds from MSP into the Settings database.</p>\n\n<p>This function writes features from an MSP file into the \"internal_standards\" or \"targeted_features\" table,\nand inserts location of pos/neg MSP files into \"chromatography_methods\" table.</p>\n\n<p>TODO: The MSP/TXT libraries have standardized names; there is no need to store the filename in the database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>msp_file (io.StringIO):</strong>  In-memory text-stream file object</li>\n<li><strong>chromatography (str):</strong>  Chromatography method ID (name)</li>\n<li><strong>polarity (str):</strong>  Polarity for which MSP should be used for (\"Positive Mode\" or \"Negative Mode\")</li>\n<li><strong>bio_standard (str, default None):</strong>  Parses MSP and applies to biological standard within a chromatography-polarity combination</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msp_file</span>, </span><span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">polarity</span>, </span><span class=\"param\"><span class=\"n\">bio_standard</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.add_csv_to_database", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "add_csv_to_database", "kind": "function", "doc": "<p>Parses compounds from a CSV file into the Settings database.</p>\n\n<p>Parses compounds from a CSV into the \"internal_standards\" table, and stores\nthe location of the pos/neg TXT files in \"chromatography_methods\" table.</p>\n\n<p>TODO: The MSP/TXT libraries have standardized names; there is no need to store the filename in the database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>csv_file (io.StringIO):</strong>  In-memory text-stream file object</li>\n<li><strong>chromatography (str):</strong>  Chromatography method ID (name)</li>\n<li><strong>polarity (str):</strong>  Polarity for which MSP should be used for (\"Positive Mode\" or \"Negative Mode\")</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">csv_file</span>, </span><span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">polarity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_msdial_configurations", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_msdial_configurations", "kind": "function", "doc": "<p>Returns list of user configurations of MS-DIAL parameters from Settings database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.generate_msdial_parameters_file", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "generate_msdial_parameters_file", "kind": "function", "doc": "<p>Uses parameters from user-curated MS-DIAL configuration to create a parameters.txt file for MS-DIAL.</p>\n\n<p>TODO: Currently, this function is only called upon a new job setup. To allow changes during a QC job,\n    this function should be called every time the user makes a configuration save in Settings &gt; MS-DIAL Configurations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chromatography (str):</strong>  Chromatography method ID (name)</li>\n<li><strong>polarity (str):</strong>  Polarity (\"Positive\" or \"Negative\")</li>\n<li><strong>msp_file_path (str):</strong>  MSP library file path</li>\n<li><strong>bio_standard (str, default None):</strong>  Specifies that the parameters file is for a biological standard</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">polarity</span>, </span><span class=\"param\"><span class=\"n\">msp_file_path</span>, </span><span class=\"param\"><span class=\"n\">bio_standard</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.add_msdial_configuration", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "add_msdial_configuration", "kind": "function", "doc": "<p>Inserts new user configuration of MS-DIAL parameters into the \"msdial_parameters\" table in Settings database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>msdial_config_name (str):</strong>  MS-DIAL configuration ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msdial_config_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.remove_msdial_configuration", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "remove_msdial_configuration", "kind": "function", "doc": "<p>Deletes user configuration of MS-DIAL parameters from the \"msdial_parameters\" table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>msdial_config_name (str):</strong>  MS-DIAL configuration ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msdial_config_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_msdial_configuration_parameters", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_msdial_configuration_parameters", "kind": "function", "doc": "<p>Returns tuple of parameters defined for a selected MS-DIAL configuration.</p>\n\n<p>TODO: The MS-DIAL configuration is returned as a tuple for a concise implementation of get_msdial_parameters_for_config()\n    in the DashWebApp module. While convenient there, this function is not optimal for maintainability. Should return\n    the entire DataFrame record instead.</p>\n\n<p>See update_msdial_configuration() for details on parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>msdial_config_name (str):</strong>  MS-DIAL configuration ID</li>\n<li><strong>parameter (str, default None):</strong>  If specified, returns only the value for the given parameter</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple of parameters for the given MS-DIAL configuration, or single parameter value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msdial_config_name</span>, </span><span class=\"param\"><span class=\"n\">parameter</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.update_msdial_configuration", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "update_msdial_configuration", "kind": "function", "doc": "<p>Updates and saves changes of all parameters for a selected MS-DIAL configuration.</p>\n\n<p>For details on MS-DIAL parameters, see: <a href=\"https://mtbinfo-team.github.io/mtbinfo.github.io/MS-DIAL/tutorial#section-2-3\">https://mtbinfo-team.github.io/mtbinfo.github.io/MS-DIAL/tutorial#section-2-3</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config_name (str):</strong>  Name / ID of MS-DIAL configuration</li>\n<li><strong>rt_begin (int):</strong>  Minimum retention time in RT range for analysis range</li>\n<li><strong>rt_end (int):</strong>  Maximum retention time in RT range for analysis</li>\n<li><strong>mz_begin (float):</strong>  Minimum precursor mass in m/z range for analysis range</li>\n<li><strong>mz_end (float):</strong>  Maximum precursor mass in m/z range for analysis range</li>\n<li><strong>ms1_centroid_tolerance (float):</strong>  MS1 centroid tolerance</li>\n<li><strong>ms2_centroid_tolerance (float):</strong>  MS2 centroid tolerance</li>\n<li><strong>smoothing_method (str):</strong>  Peak smoothing method for peak detection</li>\n<li><strong>smoothing_level (int):</strong>  Peak smoothing level</li>\n<li><strong>mass_slice_width (float):</strong>  Mass slice width</li>\n<li><strong>min_peak_width (int):</strong>  Minimum peak width threshold</li>\n<li><strong>min_peak_height (int):</strong>  Minimum peak height threshold</li>\n<li><strong>post_id_rt_tolerance (float):</strong>  Post-identification retention time tolerance</li>\n<li><strong>post_id_mz_tolerance (float):</strong>  Post-identification precursor m/z tolerance</li>\n<li><strong>post_id_score_cutoff (int):</strong>  Similarity score cutoff after peak identification</li>\n<li><strong>alignment_rt_tolerance (float):</strong>  Post-alignment retention time tolerance</li>\n<li><strong>alignment_mz_tolerance (float):</strong>  Post-alignment precursor m/z tolerance</li>\n<li><strong>alignment_rt_factor (float):</strong>  Post-alignment retention time factor</li>\n<li><strong>alignment_mz_factor (float):</strong>  Post-alignment precursor m/z tolerance</li>\n<li><strong>peak_count_filter (int):</strong>  Peak count filter</li>\n<li><strong>qc_at_least_filter (str):</strong>  QC at least filter</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config_name</span>,</span><span class=\"param\">\t<span class=\"n\">rt_begin</span>,</span><span class=\"param\">\t<span class=\"n\">rt_end</span>,</span><span class=\"param\">\t<span class=\"n\">mz_begin</span>,</span><span class=\"param\">\t<span class=\"n\">mz_end</span>,</span><span class=\"param\">\t<span class=\"n\">ms1_centroid_tolerance</span>,</span><span class=\"param\">\t<span class=\"n\">ms2_centroid_tolerance</span>,</span><span class=\"param\">\t<span class=\"n\">smoothing_method</span>,</span><span class=\"param\">\t<span class=\"n\">smoothing_level</span>,</span><span class=\"param\">\t<span class=\"n\">mass_slice_width</span>,</span><span class=\"param\">\t<span class=\"n\">min_peak_width</span>,</span><span class=\"param\">\t<span class=\"n\">min_peak_height</span>,</span><span class=\"param\">\t<span class=\"n\">post_id_rt_tolerance</span>,</span><span class=\"param\">\t<span class=\"n\">post_id_mz_tolerance</span>,</span><span class=\"param\">\t<span class=\"n\">post_id_score_cutoff</span>,</span><span class=\"param\">\t<span class=\"n\">alignment_rt_tolerance</span>,</span><span class=\"param\">\t<span class=\"n\">alignment_mz_tolerance</span>,</span><span class=\"param\">\t<span class=\"n\">alignment_rt_factor</span>,</span><span class=\"param\">\t<span class=\"n\">alignment_mz_factor</span>,</span><span class=\"param\">\t<span class=\"n\">peak_count_filter</span>,</span><span class=\"param\">\t<span class=\"n\">qc_at_least_filter</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_msp_file_path", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_msp_file_path", "kind": "function", "doc": "<p>Returns file paths of MSPs for a selected chromatography / polarity (both stored\nin the methods folder upon user upload) for MS-DIAL parameter file generation.</p>\n\n<p>TODO: Once added to workspace, MSP / TXT library file names are standardized. No need to store / retrieve from database.\n    Get the file path using the filename e.g. return directory + chromatography + \"_\" + polarity + \".msp\".</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chromatography (str):</strong>  Chromatography method ID</li>\n<li><strong>polarity (str):</strong>  Polarity, either \"Positive\" or \"Negative\"</li>\n<li><strong>bio_standard (str, default None):</strong>  Name of biological standard</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>MSP / TXT library file path.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">polarity</span>, </span><span class=\"param\"><span class=\"n\">bio_standard</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_parameter_file_path", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_parameter_file_path", "kind": "function", "doc": "<p>Returns file path of parameters file stored in database.</p>\n\n<p>TODO: Once generated, MS-DIAL parameter filenames are standardized. No need to store / retrieve from database.\n    Get the file path using the filename e.g. return directory + chromatography + \"_\" + polarity + \"_Parameters.txt\".</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chromatography (str):</strong>  Chromatography method ID</li>\n<li><strong>polarity (str):</strong>  Polarity, either \"Positive\" or \"Negative\"</li>\n<li><strong>bio_standard (str, default None):</strong>  Name of biological standard</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>File path for MS-DIAL parameters.txt file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">polarity</span>, </span><span class=\"param\"><span class=\"n\">biological_standard</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_msdial_directory", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_msdial_directory", "kind": "function", "doc": "<p>Returns location of MS-DIAL directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_msconvert_directory", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_msconvert_directory", "kind": "function", "doc": "<p>Returns location of MSConvert directory.</p>\n\n<p>This function uses the MS-DIAL directory path to retrieve user ID, which it then uses to\nretrieve the path for MSConvert.exe in C:/Users/<username>/AppData/Local/Apps.</p>\n\n<p>TODO: There is probably a better way to implement this.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Location of MSConvert directory in C:/Users/<username>/AppData/Local/Apps/ProteoWizard.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.update_msdial_directory", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "update_msdial_directory", "kind": "function", "doc": "<p>Updates location of MS-DIAL directory, stored in \"workspace\" table of the Settings database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>msdial_directory (str):</strong>  New MS-DIAL directory location</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msdial_directory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_internal_standards_dict", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_internal_standards_dict", "kind": "function", "doc": "<p>Returns dictionary of internal standard keys mapped to either m/z or RT values.</p>\n\n<p>This function is used to establish a y-axis range for internal standard retention time plots.\nSee load_istd_rt_plot() in the PlotGeneration module.</p>\n\n<p>TODO: This function needs to filter for polarity!</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chromatography (str):</strong>  Chromatography method to retrieve internal standards for</li>\n<li><strong>value_type (str):</strong>  Data type (\"precursor_mz\", \"retention_time\", \"ms2_spectrum\")</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dictionary with key-value pairs of { internal_standard: value_type }</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">value_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_internal_standards", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_internal_standards", "kind": "function", "doc": "<p>Returns DataFrame of internal standards for a given chromatography method and polarity.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>chromatography (str):</strong>  Chromatography method ID</li>\n<li><strong>polarity (str):</strong>  Polarity (either \"Pos\" or \"Neg\")</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame of \"internal_standards\" table from Settings database, filtered by chromatography and polarity.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">polarity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_targeted_features", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_targeted_features", "kind": "function", "doc": "<p>Returns DataFrame of metabolite targets for a given biological standard, chromatography, and polarity.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>biological_standard (str):</strong>  Name of biological standard</li>\n<li><strong>chromatography (str):</strong>  Chromatography method ID (name)</li>\n<li><strong>polarity (str):</strong>  Polarity (either \"Pos\" or \"Neg\")</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame of \"targeted_features\" table from Settings database, filtered by chromatography and polarity.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">biological_standard</span>, </span><span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">polarity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_biological_standards", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_biological_standards", "kind": "function", "doc": "<p>Returns DataFrame of the \"biological_standards\" table from the Settings database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_biological_standards_list", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_biological_standards_list", "kind": "function", "doc": "<p>Returns list of biological standards from the Settings database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.add_biological_standard", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "add_biological_standard", "kind": "function", "doc": "<p>Creates new biological standard with name and identifier.</p>\n\n<p>The biological standard identifier is a text substring used to distinguish between sample and biological standard.\nMS-AutoQC checks filenames in the sequence for this identifier to process samples accordingly.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name of biological standard</li>\n<li><strong>identifier (str):</strong>  String identifier in filename for biological standard</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">identifier</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.remove_biological_standard", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "remove_biological_standard", "kind": "function", "doc": "<p>Deletes biological standard and corresponding MSPs from Settings database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name of the biological standard</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.update_msdial_config_for_bio_standard", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "update_msdial_config_for_bio_standard", "kind": "function", "doc": "<p>Updates MS-DIAL configuration for given biological standard and chromatography method combination.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>biological_standard (str):</strong>  Name of the biological standard</li>\n<li><strong>chromatography (str):</strong>  Chromatography method</li>\n<li><strong>config_id (str):</strong>  Name of MS-DIAL configuration to set for this biological standard - chromatography combination</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">biological_standard</span>, </span><span class=\"param\"><span class=\"n\">chromatography</span>, </span><span class=\"param\"><span class=\"n\">config_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_biological_standard_identifiers", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_biological_standard_identifiers", "kind": "function", "doc": "<p>Returns dictionary of identifiers for a given list of biological standards.</p>\n\n<p>If no list is provided, returns dict of identifiers for all biological standards.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>bio_standards (list, default None):</strong>  List of biological standards</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dictionary with key-value pairs of { identifier: biological_standard }</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bio_standards</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_qc_configurations", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_qc_configurations", "kind": "function", "doc": "<p>Returns DataFrame of \"qc_parameters\" table from Settings database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_qc_configurations_list", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_qc_configurations_list", "kind": "function", "doc": "<p>Returns list of names of QC configurations from Settings database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.add_qc_configuration", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "add_qc_configuration", "kind": "function", "doc": "<p>Adds a new QC configuration to the \"qc_parameters\" table in the Settings database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>qc_config_name (str):</strong>  Name of the QC configuration</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">qc_config_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.remove_qc_configuration", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "remove_qc_configuration", "kind": "function", "doc": "<p>Deletes QC configuration from the \"qc_parameters\" table in the Settings database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>qc_config_name (str):</strong>  Name of the QC configuration</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">qc_config_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_qc_configuration_parameters", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_qc_configuration_parameters", "kind": "function", "doc": "<p>Returns DataFrame of parameters for a selected QC configuration.</p>\n\n<p>The DataFrame has columns for each parameter, as well as for whether the parameter is enabled.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config_name (str, default None):</strong>  Name of QC configuration</li>\n<li><strong>instrument_id (str, default None):</strong>  Instrument ID (name)</li>\n<li><strong>run_id (str, default None):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame of parameters for QC configuration.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">instrument_id</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">run_id</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.update_qc_configuration", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "update_qc_configuration", "kind": "function", "doc": "<p>Updates parameters for the given QC configuration.</p>\n\n<p>Due to the database schema, booleans are stored as integers: 0 for False and 1 for True. They need to be\ncast back to booleans in get_qc_configuration_parameters(). A schema change would remove the bloat.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config_name (str):</strong>  Name of QC configuration</li>\n<li><strong>intensity_dropouts_cutoff (int):</strong>  Minimum number of internal standard intensity dropouts to constitute a QC fail</li>\n<li><strong>library_rt_shift_cutoff (float):</strong>  Maximum shift from library RT values to constitute a QC fail</li>\n<li><strong>in_run_rt_shift_cutoff (float):</strong>  Maximum shift from in-run RT values to constitute a QC fail</li>\n<li><strong>library_mz_shift_cutoff (float):</strong>  Maximum shift from library m/z values to constitute a QC fail</li>\n<li><strong>intensity_enabled (bool):</strong>  Enables / disables QC check for intensity dropout cutoffs</li>\n<li><strong>library_rt_enabled (bool):</strong>  Enables / disables QC check for library RT shifts</li>\n<li><strong>in_run_rt_enabled (bool):</strong>  Enables / disables QC check for in-run RT shifts</li>\n<li><strong>library_mz_enabled (bool):</strong>  Enables / disables QC check for library m/z shifts</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config_name</span>,</span><span class=\"param\">\t<span class=\"n\">intensity_dropouts_cutoff</span>,</span><span class=\"param\">\t<span class=\"n\">library_rt_shift_cutoff</span>,</span><span class=\"param\">\t<span class=\"n\">in_run_rt_shift_cutoff</span>,</span><span class=\"param\">\t<span class=\"n\">library_mz_shift_cutoff</span>,</span><span class=\"param\">\t<span class=\"n\">intensity_enabled</span>,</span><span class=\"param\">\t<span class=\"n\">library_rt_enabled</span>,</span><span class=\"param\">\t<span class=\"n\">in_run_rt_enabled</span>,</span><span class=\"param\">\t<span class=\"n\">library_mz_enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_samples_in_run", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_samples_in_run", "kind": "function", "doc": "<p>Returns DataFrame of samples for a given instrument run from instrument database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n<li><strong>sample_type (str):</strong>  Sample type, either \"Sample\" or \"Biological Standard\" or \"Both\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame of sample tables for a given instrument run.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">sample_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;Both&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_samples_from_csv", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_samples_from_csv", "kind": "function", "doc": "<p>Returns DataFrame of samples in a given run using CSV files from Google Drive.</p>\n\n<p>CSV files of the run metadata, samples, and biological standards tables are stored\nin the ../data/Instrument_ID_Run_ID/csv directory, and removed on job completion.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n<li><strong>sample_type (str):</strong>  Sample type, either \"Sample\" or \"Biological Standard\" or \"Both\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame of samples for a given instrument run.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">sample_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;Both&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_next_sample", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_next_sample", "kind": "function", "doc": "<p>Returns sample following the given sample, or None if last sample.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sample_id (str):</strong>  Sample ID</li>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The next sample in the instrument run after the given sample ID, or None if last sample.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sample_id</span>, </span><span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_remaining_samples", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_remaining_samples", "kind": "function", "doc": "<p>Returns list of samples remaining in a given instrument run (QC job).</p>\n\n<p>TODO: This function should just return the samples with null values in the \"qc_result\" column.\n    The \"latest_sample\" value in the \"runs\" table may be unreliable.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: List of samples remaining in a QC job.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_unprocessed_samples", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_unprocessed_samples", "kind": "function", "doc": "<p>For an active run, returns 1) a list of samples that were not processed due to error / runtime termination,\nand 2) the current sample being monitored / processed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: List of unprocessed samples for the given instrument run, and current sample being monitored / processed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_current_sample", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_current_sample", "kind": "function", "doc": "<p>Returns the current sample being monitored / processed.</p>\n\n<p>TODO: The \"latest_sample\" is the last sample to be processed. Nomenclature needs to be updated in many places.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Current sample being monitored / processed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.parse_internal_standard_data", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "parse_internal_standard_data", "kind": "function", "doc": "<p>Parses data from database into JSON-ified DataFrame for samples (as rows) vs. internal standards (as columns).</p>\n\n<p>Data is stored in a column (for example, \"retention_time\") as a single-record string dict with the following structure:</p>\n\n<p>| Sample     | iSTD 1 | iSTD 2 | ... |\n| ---------- | ------ | ------ | ... |\n| SAMPLE_001 | 1.207  | 1.934  | ... |</p>\n\n<p>These records are concatenated together with this function using pd.DataFrame(), which is 100x faster than pd.concat().</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n<li><strong>result_type (str):</strong>  Column in sample_qc_results table to parse (either \"retention_time\" or \"precursor_mz\" or \"intensity\")</li>\n<li><strong>polarity (str):</strong>  Polarity (\"Pos\" or \"Neg\")</li>\n<li><strong>load_from (str):</strong>  Specifies whether to load data from CSV file (during Google Drive sync of active run) or instrument database</li>\n<li><strong>as_json (bool, default True):</strong>  Whether to return table as JSON string or as DataFrame</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame of samples (rows) vs. internal standards (columns) as JSON string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">instrument_id</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">result_type</span>,</span><span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">load_from</span>,</span><span class=\"param\">\t<span class=\"n\">as_json</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.parse_biological_standard_data", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "parse_biological_standard_data", "kind": "function", "doc": "<p>Parses biological standard data into JSON-ified DataFrame of targeted features (as columns) vs. instrument runs (as rows).</p>\n\n<p>The bio_qc_results table in the instrument database is first filtered by biological standard, chromatography, and polarity.\nThen, the sample name is replaced with the instrument run it was associated with.</p>\n\n<p>Data is stored in a column (for example, \"intensity\") as a single-record string dict with the following structure:</p>\n\n<p>| Name                | Metabolite 1 | Metabolite 2 | ... |\n| ------------------- | ------------ | ------------ | ... |\n| INSTRUMENT_RUN_001  | 13597340     | 53024853     | ... |</p>\n\n<p>These records are concatenated together with this function using pd.DataFrame(), which is 100x faster than pd.concat().</p>\n\n<p>| Name                | Metabolite 1 | Metabolite 2 | ... |\n| ------------------- | ------------ | ------------ | ... |\n| INSTRUMENT_RUN_001  | 13597340     | 53024853     | ... |\n| INSTRUMENT_RUN_002  | 23543246     | 102030406    | ... |\n| ...                 | ...          | ...          | ... |</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n<li><strong>result_type (str):</strong>  Column in bio_qc_results table to parse (either \"retention_time\" or \"precursor_mz\" or \"intensity\")</li>\n<li><strong>polarity (str):</strong>  Polarity (\"Pos\" or \"Neg\")</li>\n<li><strong>biological_standard (str):</strong>  Name of biological standard</li>\n<li><strong>load_from (str):</strong>  Specifies whether to load data from CSV file (during Google Drive sync of active run) or instrument database</li>\n<li><strong>as_json (bool, default True):</strong>  Whether to return table as JSON string or as DataFrame</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>JSON-ified DataFrame of targeted features for a biological standard (columns) vs. instrument runs (rows).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">instrument_id</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">result_type</span>,</span><span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">biological_standard</span>,</span><span class=\"param\">\t<span class=\"n\">load_from</span>,</span><span class=\"param\">\t<span class=\"n\">as_json</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.parse_internal_standard_qc_data", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "parse_internal_standard_qc_data", "kind": "function", "doc": "<p>Parses QC data into JSON-ified DataFrame for samples (as rows) vs. internal standards (as columns).</p>\n\n<p>The QC DataFrame is stored in the \"qc_dataframe\" column as a single-record string dict with the following structure:</p>\n\n<table>\n<thead>\n<tr>\n  <th>Sample</th>\n  <th>Delta m/z</th>\n  <th>Delta RT</th>\n  <th>In-run delta RT</th>\n  <th>Warnings</th>\n  <th>Fails</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>SAMPLE_001</td>\n  <td>0.000001</td>\n  <td>0.001</td>\n  <td>0.00001</td>\n  <td>None</td>\n  <td>None</td>\n</tr>\n</tbody>\n</table>\n\n<p>These records are concatenated together with this function using pd.DataFrame(), which is 100x faster than pd.concat().</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n<li><strong>polarity (str):</strong>  Polarity (\"Pos\" or \"Neg\")</li>\n<li><strong>result_type (str):</strong>  Column in sample_qc_results table to parse (either \"retention_time\" or \"precursor_mz\" or \"intensity\")</li>\n<li><strong>load_from (str):</strong>  Specifies whether to load data from CSV file (during Google Drive sync of active run) or instrument database</li>\n<li><strong>as_json (bool, default True):</strong>  Whether to return table as JSON string or as DataFrame</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>JSON-ified DataFrame of QC data for samples (as rows) vs. internal standards (as columns).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">instrument_id</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">result_type</span>,</span><span class=\"param\">\t<span class=\"n\">load_from</span>,</span><span class=\"param\">\t<span class=\"n\">as_json</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_workspace_users_list", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_workspace_users_list", "kind": "function", "doc": "<p>Returns a list of users that have access to the MS-AutoQC workspace.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.add_user_to_workspace", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "add_user_to_workspace", "kind": "function", "doc": "<p>Gives user access to workspace in Google Drive and stores email address in database.</p>\n\n<p>Access is granted by sharing the MS-AutoQC folder in Google Drive with the user's Google account.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>email_address (str):</strong>  Email address for Google account to grant access to workspace.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">email_address</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.delete_user_from_workspace", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "delete_user_from_workspace", "kind": "function", "doc": "<p>Removes user access to workspace in Google Drive and deletes email from database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>email_address (str):</strong>  Email address for Google account whose access will to be revoked.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">email_address</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_qc_results", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_qc_results", "kind": "function", "doc": "<p>Returns DataFrame of QC results for a given sample list.</p>\n\n<p>TODO: This function will break if samples in different runs have the same sample ID. Add run ID filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>sample_list (list):</strong>  List of samples to query</li>\n<li><strong>is_bio_standard (bool, default False):</strong>  Whether the list is biological standards (True) or samples (False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DataFrame of QC results for a given sample list.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">sample_list</span>, </span><span class=\"param\"><span class=\"n\">is_bio_standard</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.create_workspace_metadata", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "create_workspace_metadata", "kind": "function", "doc": "<p>Creates record in \"workspace\" table to store various metadata.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_device_identity", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_device_identity", "kind": "function", "doc": "<p>Returns device identity (either an Instrument ID or \"Shared user\").</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.set_device_identity", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "set_device_identity", "kind": "function", "doc": "<p>Indicates whether the user's device is the instrument PC or not.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>is_instrument_computer (bool):</strong>  Whether the device is an instrument computer or not</li>\n<li><strong>instrument_id (str):</strong>  Instrument ID (if None, set to \"Shared user\")</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">is_instrument_computer</span>, </span><span class=\"param\"><span class=\"n\">instrument_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.run_is_on_instrument_pc", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "run_is_on_instrument_pc", "kind": "function", "doc": "<p>Validates that the current device is the instrument PC on which the run was started.</p>\n\n<p>TODO: Use this function in PlotGeneration and DashWebApp module.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if instrument run was started on the current device, and False if not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.update_slack_bot_token", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "update_slack_bot_token", "kind": "function", "doc": "<p>Updates Slack bot user OAuth 2.0 token in \"workspace\" table of Settings database.</p>\n\n<p>For details on the Slack API, see: <a href=\"https://slack.dev/python-slack-sdk/\">https://slack.dev/python-slack-sdk/</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slack_bot_token (str):</strong>  Slack bot user OAuth token</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slack_bot_token</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_slack_bot_token", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_slack_bot_token", "kind": "function", "doc": "<p>Returns Slack bot token stored in \"workspace\" table of Settings database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.update_slack_channel", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "update_slack_channel", "kind": "function", "doc": "<p>Updates Slack channel registered for notifications in \"workspace\" table of Settings database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slack_channel (str):</strong>  Slack channel to post messages to</li>\n<li><strong>notifications_enabled (bool):</strong>  Whether to send Slack notifications for QC warnings and fails</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slack_channel</span>, </span><span class=\"param\"><span class=\"n\">notifications_enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_slack_channel", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_slack_channel", "kind": "function", "doc": "<p>Returns Slack channel registered for notifications.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_slack_notifications_toggled", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_slack_notifications_toggled", "kind": "function", "doc": "<p>Returns Slack notification toggle setting.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_email_notifications_list", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_email_notifications_list", "kind": "function", "doc": "<p>Returns list of emails registered for email notifications for QC warnings and fails.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>as_string (bool, default False):</strong>  Whether to return the list as a string (for Gmail API) or as list object (for display in Settings page)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of emails registered for QC warning/fail notifications.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">as_string</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.register_email_for_notifications", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "register_email_for_notifications", "kind": "function", "doc": "<p>Inserts email address into \"email_notifications\" table in Settings database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>email_address (str):</strong>  Email address to register for notifications.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">email_address</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.delete_email_from_notifications", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "delete_email_from_notifications", "kind": "function", "doc": "<p>Deletes email address from \"email_notifications\" table in Settings database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>email_address (str):</strong>  Email address to unsubscribe from notifications.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">email_address</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_completed_samples_count", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_completed_samples_count", "kind": "function", "doc": "<p>Returns tuple containing count for completed samples and total samples in a given instrument run.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n<li><strong>status (str):</strong>  Instrument run (QC job) status, either \"Active\" or \"Complete\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple with number of completed samples and total samples for a given instrument run.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">status</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_run_progress", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_run_progress", "kind": "function", "doc": "<p>Returns progress of instrument run as a percentage of samples completed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n<li><strong>status (str):</strong>  Instrument run (QC job) status, either \"Active\" or \"Complete\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: Percent of samples processed for the given instrument run.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">status</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.update_sample_counters_for_run", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "update_sample_counters_for_run", "kind": "function", "doc": "<p>Increments \"completed\" count, as well as \"pass\" and \"fail\" counts accordingly.</p>\n\n<p>TODO: The \"latest_sample\" is the last sample to be processed / completed.\n    Nomenclature should be updated for clarity.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n<li><strong>latest_sample (str):</strong>  Last sample to be processed</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">latest_sample</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.mark_run_as_completed", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "mark_run_as_completed", "kind": "function", "doc": "<p>Marks instrument run status as completed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.skip_sample", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "skip_sample", "kind": "function", "doc": "<p>Skips sample by setting \"latest_sample\" value for instrument run to the next sample.</p>\n\n<p>This function was used after restarting the acquisition listener when MS-DIAL got stuck processing a corrupted file.\nNow that MS-DIAL runs in the background, it is deprecated and should be removed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.store_pid", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "store_pid", "kind": "function", "doc": "<p>Stores acquisition listener subprocess ID to allow for checkup and termination.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n<li><strong>pid (str):</strong>  Process ID for acquisition listener subprocess</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">pid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_pid", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_pid", "kind": "function", "doc": "<p>Retrieves acquisition listener process ID from \"runs\" table in Settings database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.upload_to_google_drive", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "upload_to_google_drive", "kind": "function", "doc": "<p>Uploads files to MS-AutoQC folder in Google Drive.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_dict (dict):</strong>  Dictionary with key-value structure { filename : file path }</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: Dictionary with key-value structure { filename : Google Drive ID }</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.upload_qc_results", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "upload_qc_results", "kind": "function", "doc": "<p>Uploads QC results for a given instrument run to Google Drive as CSV files.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.download_qc_results", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "download_qc_results", "kind": "function", "doc": "<p>Downloads CSV files of QC results from Google Drive and stores in /data directory.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: Paths of run.csv, samples.csv, and bio_standards.csv, respectively.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_drive_folder_id", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_drive_folder_id", "kind": "function", "doc": "<p>Returns Google Drive ID for the MS-AutoQC folder (found in user's root Drive directory).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_database_drive_id", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_database_drive_id", "kind": "function", "doc": "<p>Returns Google Drive ID for a given instrument's database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Google Drive ID for the instrument database ZIP archive.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.upload_database", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "upload_database", "kind": "function", "doc": "<p>Uploads database file and methods directory to Google Drive as ZIP archives.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID for the instrument database to upload</li>\n<li><strong>sync_settings (bool, default False):</strong>  Whether to upload methods directory as well</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Timestamp upon upload completion.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">sync_settings</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.download_database", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "download_database", "kind": "function", "doc": "<p>Downloads instrument database ZIP file from Google Drive.</p>\n\n<p>This function is called when accessing an instrument database from a device other than the given instrument.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID for the instrument database to download</li>\n<li><strong>sync_settings (bool, default False):</strong>  Whether to download methods directory as well</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Timestamp upon download completion.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">sync_settings</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.upload_methods", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "upload_methods", "kind": "function", "doc": "<p>Uploads methods directory ZIP archive to Google Drive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.download_methods", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "download_methods", "kind": "function", "doc": "<p>Downloads methods directory ZIP archive from Google Drive.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>skip_check (bool, default False):</strong>  If True, skips checking whether database was modified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">skip_check</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.remember_last_modified", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "remember_last_modified", "kind": "function", "doc": "<p>Stores last modified time of database file in Google Drive.</p>\n\n<p>This function is called after file upload, and used for comparison before download.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>database (str):</strong>  Name of database (either Instrument ID or \"Settings\")</li>\n<li><strong>modified_date (str):</strong>  Modified date of file uploaded to Google Drive</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">database</span>, </span><span class=\"param\"><span class=\"n\">modified_date</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.database_was_modified", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "database_was_modified", "kind": "function", "doc": "<p>Returns True if workspace file was modified by another instrument PC in Google Drive, and False if not.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>database_name (str):</strong>  Name of database</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Returns True if workspace file was modified by another instrument PC in Google Drive, and False if not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">database_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.send_sync_signal", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "send_sync_signal", "kind": "function", "doc": "<p>Uploads empty file to signal that an instrument PC is syncing to Google Drive.</p>\n\n<p>TODO: This method is deprecated. Please remove if no plans for usage.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>folder_id (str):</strong>  Google Drive folder ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if sync signal was sent, False if not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.safe_to_upload", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "safe_to_upload", "kind": "function", "doc": "<p>Returns False if another device is currently uploading to Google Drive, else True.</p>\n\n<p>TODO: This method is deprecated. Please remove if no plans for usage.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>folder_id (str):</strong>  Google Drive folder ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: False if another device is currently uploading to Google Drive, True if not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.remove_sync_signal", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "remove_sync_signal", "kind": "function", "doc": "<p>Removes empty signal file to signal that an instrument PC has completed syncing to Google Drive.</p>\n\n<p>TODO: This method is deprecated. Please remove if no plans for usage.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>folder_id (str):</strong>  Google Drive folder ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if sync signal was removed, False if not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.delete_active_run_csv_files", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "delete_active_run_csv_files", "kind": "function", "doc": "<p>Checks for and deletes CSV files from Google Drive at the end of an active instrument run.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.sync_on_run_completion", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "sync_on_run_completion", "kind": "function", "doc": "<p>Syncs database with Google Drive at the end of an active instrument run.</p>\n\n<h6 id=\"performs-the-following-actions\">Performs the following actions:</h6>\n\n<blockquote>\n  <ol>\n  <li>Upload database to Google Drive</li>\n  <li>Delete active run CSV files</li>\n  </ol>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.get_data_file_type", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "get_data_file_type", "kind": "function", "doc": "<p>Returns expected data file extension based on instrument vendor type.</p>\n\n<p>TODO: Modify this function as needed when adding support for other instrument vendors.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Data file extension for instrument vendor.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.is_completed_run", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "is_completed_run", "kind": "function", "doc": "<p>Returns True if the given QC job is for a completed run, and False if for an active run.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the job is for a completed run, and False if job is for an active run.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.delete_temp_directory", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "delete_temp_directory", "kind": "function", "doc": "<p>Deletes temporary data file directory in local app directory.</p>\n\n<p>This function is called at the end of an instrument run (QC job).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.pipeline_valid", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "pipeline_valid", "kind": "function", "doc": "<p>Validates that MSConvert and MS-DIAL dependencies are installed.</p>\n\n<p>This function is called during job setup validation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>module (str, default None):</strong>  If specified, only validates given module.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether MSConvert.exe and MsdialConsoleApp.exe exist.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">module</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.DatabaseFunctions.send_email", "modulename": "ms_autoqc.DatabaseFunctions", "qualname": "send_email", "kind": "function", "doc": "<p>Sends email using Google authenticated credentials.</p>\n\n<h6 id=\"this-function-is-called-for-qc-warnings-and-fails-if\">This function is called for QC warnings and fails if:</h6>\n\n<blockquote>\n  <ol>\n  <li>Google Drive sync is enabled</li>\n  <li>Email addresses are registered for notifications</li>\n  </ol>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>subject (str):</strong>  Subject of email</li>\n<li><strong>message_body (str):</strong>  Body of email</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>On success, an email.message.EmailMessage object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">subject</span>, </span><span class=\"param\"><span class=\"n\">message_body</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.PlotGeneration", "modulename": "ms_autoqc.PlotGeneration", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "ms_autoqc.PlotGeneration.get_qc_results", "modulename": "ms_autoqc.PlotGeneration", "qualname": "get_qc_results", "kind": "function", "doc": "<p>Loads and parses QC results (for samples and biological standards) into Plotly graphs.</p>\n\n<p>This function will return whatever tables it can in a tuple, and fill None for the tables that throw errors in parsing.\nThis is so that an error in retrieving one table will not prevent retrieving other tables.</p>\n\n<p>Depending on whether Google Drive sync is enabled, this function will load data from either CSV files\n(for active instrument runs) or the local instrument database (for completed runs).</p>\n\n<p>Regardless of whether Google Drive sync is enabled, the instrument computer (on which the run was started) will\nalways load data from its local SQLite database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (Job ID)</li>\n<li><strong>status (str):</strong>  QC job status, either \"Active\" or \"Complete\"</li>\n<li><strong>biological_standard (str, default None):</strong>  If specified, returns QC results for given biological standard associated with job</li>\n<li><strong>biological_standards_only (bool, default False):</strong>  If specified, returns QC results for biological standards only</li>\n<li><strong>for_benchmark_plot (bool, default False):</strong>  If specified, returns QC results specifically for biological standard benchmark plot</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: Tuple containing tables of various sample data in JSON \"records\" format. Order is as follows:\n      1. df_rt_pos: Retention times for internal standards in positive mode\n      2. df_rt_neg: Retention times for internal standards in negative mode\n      3. df_intensity_pos: Intensities for internal standards in positive mode\n      4. df_intensity_neg: Intensities for internal standards in negative mode\n      5. df_mz_pos: Precursor masses for internal standards in positive mode\n      6. df_mz_neg: Precursor masses for internal standards in negative mode\n      7. df_sequence: Acquisition sequence table\n      8. df_metadata: Sample metadata table\n      9. df_bio_rt_pos: Retention times for targeted features in biological standard sample in positive mode\n      10. df_bio_rt_neg: Retention times for targeted features in biological standard sample in negative mode\n      11. df_bio_intensity_pos: Intensities for targeted features in biological standard sample in positive mode\n      12. df_bio_intensity_neg: Intensities for targeted features in biological standard sample in negative mode\n      13. df_bio_mz_pos: Precursor masses for targeted features in biological standard sample in positive mode\n      14. df_bio_mz_neg: Precursor masses for targeted features in biological standard sample in negative mode\n      15. resources: Metadata for instrument run\n      16. df_samples: Table containing sample names, polarities, autosampler positions, and QC results\n      17. pos_internal_standards: List of positive mode internal standards\n      18. neg_internal_standards: List of negative mode internal standards\n      19. df_delta_rt_pos: Delta RT's for internal standards in positive mode\n      20. df_delta_rt_neg: Delta RT's for internal standards in negative mode\n      21. df_in_run_delta_rt_pos: In-run delta RT's for internal standards in positive mode\n      22. df_in_run_delta_rt_neg: In-run delta RT's for internal standards in negative mode\n      23. df_delta_mz_pos: Delta m/z's for internal standards in positive mode\n      24. df_delta_mz_neg: Delta m/z's for internal standards in negative mode\n      25. df_warnings_pos: QC warnings for internal standards in positive mode\n      26. df_warnings_neg: QC warnings for internal standards in negative mode\n      27. df_fails_pos: QC fails for internal standards in positive mode\n      28. df_fails_neg: QC fails for internal standards in negative mode</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">instrument_id</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span>,</span><span class=\"param\">\t<span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s1\">&#39;Complete&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">biological_standard</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">biological_standards_only</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">for_benchmark_plot</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.PlotGeneration.generate_sample_metadata_dataframe", "modulename": "ms_autoqc.PlotGeneration", "qualname": "generate_sample_metadata_dataframe", "kind": "function", "doc": "<p>Aggregates tables of relevant data from the acquisition sequence, metadata file, and QC results for a selected sample.</p>\n\n<h6 id=\"returns-two-dataframes-by-aggregating-the-following-information\">Returns two DataFrames by aggregating the following information:</h6>\n\n<blockquote>\n  <ol>\n  <li>Acquisition sequence and sample metadata information</li>\n  <li>Internal standard m/z, RT, intensity, delta m/z, delta RT, in-run delta RT, warnings, and fails</li>\n  </ol>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sample (str):</strong>  Sample ID</li>\n<li><strong>df_rt (DataFrame):</strong>  Retention times for internal standards (columns) across samples (rows)</li>\n<li><strong>df_mz (DataFrame):</strong>  Precursor masses for internal standards (columns) across samples (rows)</li>\n<li><strong>df_intensity (DataFrame):</strong>  Intensities for internal standards (columns) across samples (rows)</li>\n<li><strong>df_delta_rt (DataFrame):</strong>  Delta RT's from library values for internal standards (columns) across samples (rows)</li>\n<li><strong>df_in_run_delta_rt (DataFrame):</strong>  Delta RT's from in-run values for internal standards (columns) across samples (rows)</li>\n<li><strong>df_delta_mz (DataFrame):</strong>  Delta m/z's from library values for internal standards (columns) across samples (rows)</li>\n<li><strong>df_warnings (DataFrame):</strong>  QC warnings for internal standards (columns) across samples (rows)</li>\n<li><strong>df_fails (DataFrame):</strong>  QC fails for internal standards (columns) across samples (rows)</li>\n<li><strong>df_sequence (DataFrame):</strong>  Acquisition sequence table</li>\n<li><strong>df_metadata (DataFrame):</strong>  Sample metadata table</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple containing two DataFrames, the first storing internal standard data and the second storing sample metadata.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sample</span>,</span><span class=\"param\">\t<span class=\"n\">df_rt</span>,</span><span class=\"param\">\t<span class=\"n\">df_mz</span>,</span><span class=\"param\">\t<span class=\"n\">df_intensity</span>,</span><span class=\"param\">\t<span class=\"n\">df_delta_rt</span>,</span><span class=\"param\">\t<span class=\"n\">df_in_run_delta_rt</span>,</span><span class=\"param\">\t<span class=\"n\">df_delta_mz</span>,</span><span class=\"param\">\t<span class=\"n\">df_warnings</span>,</span><span class=\"param\">\t<span class=\"n\">df_fails</span>,</span><span class=\"param\">\t<span class=\"n\">df_sequence</span>,</span><span class=\"param\">\t<span class=\"n\">df_metadata</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.PlotGeneration.generate_bio_standard_dataframe", "modulename": "ms_autoqc.PlotGeneration", "qualname": "generate_bio_standard_dataframe", "kind": "function", "doc": "<p>Aggregates data for a selected biological standard.</p>\n\n<p>TODO: More metrics could be added to sample information cards for biological standards here.</p>\n\n<p>Aggregates and returns 2 DataFrames for a selected sample:\n    1. QC result and causes\n    2. Targeted metabolite m/z, RT, intensity, delta RT, and percent change</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>clicked_sample (str):</strong>  Sample ID</li>\n<li><strong>instrument_id (str):</strong>  Instrument ID</li>\n<li><strong>run_id (str):</strong>  Instrument run ID (job ID)</li>\n<li><strong>df_rt (DataFrame):</strong>  Retention times of targeted metabolites in the biological standard</li>\n<li><strong>df_mz (DataFrame):</strong>  Precursor masses of targeted metabolites in the biological standard</li>\n<li><strong>df_intensity:</strong>  Intensities of targeted metabolites in the biological standard</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple containing two DataFrames, the first storing targeted metabolites data and the second storing sample metadata.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">clicked_sample</span>, </span><span class=\"param\"><span class=\"n\">instrument_id</span>, </span><span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">df_rt</span>, </span><span class=\"param\"><span class=\"n\">df_mz</span>, </span><span class=\"param\"><span class=\"n\">df_intensity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.PlotGeneration.load_istd_rt_plot", "modulename": "ms_autoqc.PlotGeneration", "qualname": "load_istd_rt_plot", "kind": "function", "doc": "<p>Returns line plot figure of retention times (for a selected internal standard) across samples.</p>\n\n<p>Documentation on Plotly line plots: <a href=\"https://plotly.com/python-api-reference/generated/plotly.express.line.html\">https://plotly.com/python-api-reference/generated/plotly.express.line.html</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataframe (DataFrame):</strong>  Table of retention times for internal standards (columns) across samples (rows)</li>\n<li><strong>samples (list):</strong>  Samples to query from the DataFrame</li>\n<li><strong>internal_standard (str):</strong>  The selected internal standard</li>\n<li><strong>retention_times (dict):</strong>  Dictionary with key-value pairs of type { internal_standard: retention_time }</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>plotly.express.line object: Plotly line plot of retention times (for the selected internal standard) across samples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataframe</span>, </span><span class=\"param\"><span class=\"n\">samples</span>, </span><span class=\"param\"><span class=\"n\">internal_standard</span>, </span><span class=\"param\"><span class=\"n\">retention_times</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.PlotGeneration.load_istd_intensity_plot", "modulename": "ms_autoqc.PlotGeneration", "qualname": "load_istd_intensity_plot", "kind": "function", "doc": "<p>Returns bar plot figure of peak intensities (for a selected internal standard) across samples.</p>\n\n<p>Documentation on Plotly bar plots: <a href=\"https://plotly.com/python-api-reference/generated/plotly.express.bar.html\">https://plotly.com/python-api-reference/generated/plotly.express.bar.html</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataframe (DataFrame):</strong>  Table of intensities for internal standards (columns) across samples (rows)</li>\n<li><strong>samples (list):</strong>  Samples to query from the DataFrame</li>\n<li><strong>internal_standard (str):</strong>  The selected internal standard</li>\n<li><strong>treatments (DataFrame):</strong>  DataFrame with sample treatments (from the metadata file) mapped to sample ID's</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>plotly.express.bar object: Plotly bar plot of intensities (for the selected internal standard) across samples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataframe</span>, </span><span class=\"param\"><span class=\"n\">samples</span>, </span><span class=\"param\"><span class=\"n\">internal_standard</span>, </span><span class=\"param\"><span class=\"n\">treatments</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.PlotGeneration.load_istd_delta_mz_plot", "modulename": "ms_autoqc.PlotGeneration", "qualname": "load_istd_delta_mz_plot", "kind": "function", "doc": "<p>Returns line plot figure of delta m/z (for a selected internal standard) across samples.</p>\n\n<p>Documentation on Plotly line plots: <a href=\"https://plotly.com/python-api-reference/generated/plotly.express.line.html\">https://plotly.com/python-api-reference/generated/plotly.express.line.html</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataframe (DataFrame):</strong>  Table of delta m/z's for internal standards (columns) across samples (rows)</li>\n<li><strong>samples (list):</strong>  Samples to query from the DataFrame</li>\n<li><strong>internal_standard (str):</strong>  The selected internal standard</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>plotly.express.line object: Plotly line plot of delta m/z (for the selected internal standard) across samples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataframe</span>, </span><span class=\"param\"><span class=\"n\">samples</span>, </span><span class=\"param\"><span class=\"n\">internal_standard</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.PlotGeneration.load_bio_feature_plot", "modulename": "ms_autoqc.PlotGeneration", "qualname": "load_bio_feature_plot", "kind": "function", "doc": "<p>Returns scatter plot figure of precursor m/z vs. retention time for targeted features in the biological standard.</p>\n\n<h6 id=\"to-further-clarify\">To further clarify:</h6>\n\n<blockquote>\n  <p>x-axis: retention times\n  y-axis: precursor masses\n  colorscale: percent change in intensity for each feature compared to the average intensity across all runs</p>\n</blockquote>\n\n<p>Documentation on Plotly scatter plots: <a href=\"https://plotly.com/python-api-reference/generated/plotly.express.scatter.html\">https://plotly.com/python-api-reference/generated/plotly.express.scatter.html</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>run_id (str):</strong>  Run ID to query the biological standard from</li>\n<li><strong>df_rt (DataFrame):</strong>  Table of retention times for targeted features (columns) across instrument runs (rows)</li>\n<li><strong>df_mz (DataFrame):</strong>  Table of precursor masses for targeted features (columns) across instrument runs (rows)</li>\n<li><strong>df_intensity (DataFrame):</strong>  Table of intensities for targeted features (columns) across instrument runs (rows)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>plotly.express.scatter object: m/z - RT scatter plot for targeted metabolites in the biological standard</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_id</span>, </span><span class=\"param\"><span class=\"n\">df_rt</span>, </span><span class=\"param\"><span class=\"n\">df_mz</span>, </span><span class=\"param\"><span class=\"n\">df_intensity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.PlotGeneration.load_bio_benchmark_plot", "modulename": "ms_autoqc.PlotGeneration", "qualname": "load_bio_benchmark_plot", "kind": "function", "doc": "<p>Returns bar plot figure of intensities for a targeted metabolite in a biological standard across instrument runs.</p>\n\n<p>Documentation on Plotly bar plots: <a href=\"https://plotly.com/python-api-reference/generated/plotly.express.bar.html\">https://plotly.com/python-api-reference/generated/plotly.express.bar.html</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataframe (DataFrame):</strong>  Table of intensities for targeted metabolites (columns) across instrument runs (rows)</li>\n<li><strong>metabolite_name (str):</strong>  The targeted metabolite to query from the DataFrame</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>plotly.express.bar object: Plotly bar plot of intensities (for the selected targeted metabolite) across instrument runs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataframe</span>, </span><span class=\"param\"><span class=\"n\">metabolite_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.PlotGeneration.get_internal_standard_index", "modulename": "ms_autoqc.PlotGeneration", "qualname": "get_internal_standard_index", "kind": "function", "doc": "<p>Button functionality for seeking through internal standards.</p>\n\n<p>Uses n_clicks from the previous and next buttons to generate an index, which is used to index a list of internal\nstandards in the populate_istd_rt_plot(), populate_istd_intensity_plot(), and populate_istd_mz_plot() callback\nfunctions of the DashWebApp module.</p>\n\n<p>This function relies on the previous button's n_clicks to be reset to None on every click.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>previous (int):</strong>  n_clicks for the \"previous\" button (None, unless previous button is clicked)</li>\n<li><strong>next (int):</strong>  n_clicks for the \"next\" button</li>\n<li><strong>max (int):</strong>  Number of internal standards (maximum index for list of internal standards)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Integer index for a list of internal standards.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">previous</span>, </span><span class=\"param\"><span class=\"nb\">next</span>, </span><span class=\"param\"><span class=\"nb\">max</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ms_autoqc.SlackNotifications", "modulename": "ms_autoqc.SlackNotifications", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "ms_autoqc.SlackNotifications.send_message", "modulename": "ms_autoqc.SlackNotifications", "qualname": "send_message", "kind": "function", "doc": "<p>Posts a message to the Slack channel registered for notifications in Settings &gt; General.</p>\n\n<p>For details on the Slack API, see: <a href=\"https://slack.dev/python-slack-sdk/\">https://slack.dev/python-slack-sdk/</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message (str):</strong>  Message to send to the Slack channel</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Response object on success, or Error object on failure</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();