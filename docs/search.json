[
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "Overview",
    "section": "",
    "text": "Many different things can go wrong during an LC-MS instrument run, leading to unusable data. That’s why it is crucial to stop a run and troubleshoot if something is wrong.\nMany metabolomics labs have various quality control measures in place for every sample preparation protocol, such as internal standards or biological “benchmark” standards. However, analyzing the data from these QC markers can be tedious and time-consuming.\nThis section describes the various features of MS-AutoQC, and how they can help inform on the quality of your untargeted metabolomics data in a time-efficient manner."
  },
  {
    "objectID": "overview.html#retention-time-across-samples",
    "href": "overview.html#retention-time-across-samples",
    "title": "Overview",
    "section": "Retention time across samples",
    "text": "Retention time across samples\nPlotting retention time values for a given internal standard gives insight into retention time shifts, which can indicate any of the following:\n\nIncorrect mobile phase concentration\nChanges in flow rate\nChanges in column temperature\nFaulty / damaged column\n\nThe retention time vs. sample plot provides an at-a-glance view at trends or issues with chromatography. The user can hover over each marker (point) to display relevant metadata for a sample, zoom or pan over the graph, and even grab a screenshot for easy sharing with teammates.\nTry it out yourself below!\n\n\n\n                                                \n\n\nAdditionally, the user can select an internal standard using the dropdown, or seek through them using the previous / next buttons. MS-AutoQC provides global filters for polarity and sample type in the sidebar as well."
  },
  {
    "objectID": "overview.html#intensity-across-samples",
    "href": "overview.html#intensity-across-samples",
    "title": "Overview",
    "section": "Intensity across samples",
    "text": "Intensity across samples\nPlotting intensity (peak height) values can give insight into sample preparation and ionization variability. Low internal standard intensities could indicate:\n\nBad injection\nError in sample preparation\nInstrument performance (sample not ionizing correctly)\n\nMS-AutoQC allows you to filter the intensity vs. sample plot by samples, pools, or blanks using the plot filter in the sidebar. You can also scroll through the plot using the plot scroll bar at the bottom."
  },
  {
    "objectID": "overview.html#delta-mz-across-samples",
    "href": "overview.html#delta-mz-across-samples",
    "title": "Overview",
    "section": "Delta m/z across samples",
    "text": "Delta m/z across samples\nThe mass accuracy of a mass spectrometer can be evaluated by plotting delta m/z values, which can also provide insight into the instrument’s overall performance.\nWhile it may not always be immediately apparent if there are problems with the mass accuracy, the delta m/z vs. samples plot ensures the reliability of an experiment’s results."
  },
  {
    "objectID": "overview.html#sample-information-card",
    "href": "overview.html#sample-information-card",
    "title": "Overview",
    "section": "Sample information card",
    "text": "Sample information card\nTo investigate a sample more closely, you can select one from the sample table (or click a marker on the plot!) and the sample information card will open.\nThis card conveniently aggregates sample information from the sequence, metadata, processed data, and QC results into one place."
  },
  {
    "objectID": "overview.html#new-job-setup",
    "href": "overview.html#new-job-setup",
    "title": "Overview",
    "section": "New job setup",
    "text": "New job setup\nSetting up a new MS-AutoQC job is designed to be as fast and easy as possible. To get the AutoQC algorithm running, the user just needs to enter:\n\nRun ID\nChromatography\nBiological standards (optional)\nAcquisition sequence file\nSample metadata file\nData file directory\n\nThe form then validates resources and gives the user intelligent feedback. Once the user has chosen whether the job is for an active or completed instrument run, the new job can be executed."
  },
  {
    "objectID": "overview.html#google-drive-and-slack",
    "href": "overview.html#google-drive-and-slack",
    "title": "Overview",
    "section": "Google Drive and Slack",
    "text": "Google Drive and Slack\nIn Settings > General, the user is able to:\n\nEnable Google Drive cloud sync\nManage workspace access among users\nRegister a Slack bot for Slack notifications\nRegister addresses for email notifications"
  },
  {
    "objectID": "overview.html#chromatography-methods",
    "href": "overview.html#chromatography-methods",
    "title": "Overview",
    "section": "Chromatography methods",
    "text": "Chromatography methods\nIn Settings > Chromatography Methods, the user is able to:\n\nAdd / delete chromatography methods\nAdd internal standard libraries for each chromatography–polarity combination\nSet a custom processing configuration for each chromatography method"
  },
  {
    "objectID": "overview.html#biological-standards",
    "href": "overview.html#biological-standards",
    "title": "Overview",
    "section": "Biological standards",
    "text": "Biological standards\nIn Settings > Biological Standards, the user is able to:\n\nAdd / delete biological standards with sequence identifiers\nAdd metabolite libraries for each biological standard–chromatography–polarity combination\nSet custom processing configuration for each biological standard–chromatography combination"
  },
  {
    "objectID": "overview.html#autoqc-configurations",
    "href": "overview.html#autoqc-configurations",
    "title": "Overview",
    "section": "AutoQC configurations",
    "text": "AutoQC configurations\nIn Settings > AutoQC Configurations, the user is able to:\n\nAdd / delete AutoQC configurations\nSet cutoff for intensity dropouts\nSet cutoff for RT shift from library value\nSet cutoff for RT shift from in-run average\nSet cutoff for m/z drift from library value"
  },
  {
    "objectID": "overview.html#ms-dial-configurations",
    "href": "overview.html#ms-dial-configurations",
    "title": "Overview",
    "section": "MS-DIAL configurations",
    "text": "MS-DIAL configurations\nIn Settings > MS-DIAL Configurations, the user is able to:\n\nAdd / delete MS-DIAL configurations\nSet data collection parameters\nSet centroid parameters\nSet peak detection parameters\nSet identification parameters\nSet alignment parameters"
  },
  {
    "objectID": "documentation.html",
    "href": "documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "AcquisitionListener\nDefines classes and functions for monitoring data acquisition paths and processing data files.\n\n\nAutoQCProcessing\nModular pipeline for processing data files, performing quality control, and writing QC results to the database.\n\n\nDashWebApp\nConstructs the web app using Dash components for layout and Dash callbacks for event handling.\n\n\nDatabaseFunctions\nProvides highly-abstracted API for reading from and writing to instrument and settings databases.\n\n\nPlotGeneration\nParses QC results from the database into the browser cache to generate fast and responsive Plotly graphs.\n\n\nSlackNotifications\nDefines functions for sending messages to Slack channels using a Slack bot."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MS-AutoQC",
    "section": "",
    "text": "MS-AutoQC is an all-in-one solution for automated quality control of liquid chromatography-mass spectrometry (LC-MS) instrument runs, both during and after data acquisition.\nIt offers a fast, straightforward approach to ensure collection of high-quality data, allowing for less time investigating raw data and more time conducting experiments.\n \nDeveloped at the Mass Spectrometry Platform of CZ Biohub San Francisco, MS-AutoQC provides a host of key features to streamline untargeted metabolomics research, such as:\n\nAutomated and user-defined quality control checks during instrument runs\nRealtime updates on QC fails in the form of Slack or email notifications\nInteractive data visualization of internal standard retention time, m/z, and intensity across samples\nGoogle Drive cloud sync and secure, Google-authenticated access to QC results from any device\n\n\nRequirements\nMS-AutoQC was designed to run on Windows platforms because of its dependency on MSConvert for vendor format data conversion and MS-DIAL for data processing and identification. However, MacOS users can still use MS-AutoQC to monitor / view their instrument run data.\nIn addition, MS-AutoQC requires Python 3.8+ and various Python packages, including:\n\nPandas\nSQLAlchemy\nPlotly Dash\nBootstrap\nWatchdog\nGoogle API\nSlack API\n\nThese are installed automatically during setup.\nNote: Installation of Python and various Python packages on MS instrument computers comes at no risk. For extra security and peace of mind, you can opt to install MS-AutoQC in a virtual environment. To learn more, please read the installation guide.\n\n\nInstallation and usage\nInstalling MS-AutoQC is easy. Simply open your Terminal or Command Prompt and enter:\npy -m pip install ms-autoqc\nTo start MS-AutoQC, simply enter:\nms_autoqc\nIf necessary, you can also download MS-AutoQC v1.0.0 from GitHub and install it manually – although we strongly recommend using pip!\nPython dependencies are installed automatically, but dependencies such as MSConvert and MS-DIAL will need to be installed manually. Check out the installation guide for more details.\n\n\nSupported instrument vendors\nMS-AutoQC was designed to be a universal, open-source solution for data quality control. Because MSConvert converts raw acquired data into open mzML format before routing it to the data processing pipeline, the package will work seamlessly with data of all vendor formats.\nHowever, MS-AutoQC has only been tested extensively on Thermo Fisher mass spectrometers, Thermo acquisition sequences, and Thermo RAW files. As such, it is expected that there may be bugs and issues with processing data of other vendor formats.\nIf you encounter a bug, please report it by opening an issue on GitHub.\nWe are open to collaboration! If you would like to help us develop support for Agilent, Bruker, Sciex, or Waters acquisition sequences and data files, please send an email to brian.defelice@czbiohub.org."
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Quickstart",
    "section": "",
    "text": "In this section, you can learn how to set up and configure MS-AutoQC for your mass spectrometry instrument."
  },
  {
    "objectID": "getting-started.html#navigation",
    "href": "getting-started.html#navigation",
    "title": "Quickstart",
    "section": "Navigation",
    "text": "Navigation\n\nStart MS-AutoQC\nCreate a new workspace\nConfigure internal standards\nConfigure AutoQC parameters\nSpecify MS-DIAL location\nSetup a new run"
  },
  {
    "objectID": "getting-started.html#start-ms-autoqc",
    "href": "getting-started.html#start-ms-autoqc",
    "title": "Quickstart",
    "section": "1. Start MS-AutoQC",
    "text": "1. Start MS-AutoQC\nTo launch MS-AutoQC, open a Terminal or Command Prompt window and type:\nms_autoqc"
  },
  {
    "objectID": "getting-started.html#create-a-new-workspace",
    "href": "getting-started.html#create-a-new-workspace",
    "title": "Quickstart",
    "section": "2. Create a new workspace",
    "text": "2. Create a new workspace\nIf you followed the steps in the installation guide correctly, you will be greeted by the following welcome screen:\n\n\n\nWelcome screen\n\n\nPlease select I’m setting up MS-AutoQC on a new instrument. Then, you will be prompted to give your instrument a unique name and select your instrument’s vendor.\n\n\n\nI’m setting up MS-AutoQC on a new instrument\n\n\n\nOptional: Sync with Google Drive\nTBD\nOnce you’re done, click Complete setup to create your workspace. After your workspace loads, it should look something like this:\n\n\n\nBlank workspace"
  },
  {
    "objectID": "getting-started.html#configure-internal-standards",
    "href": "getting-started.html#configure-internal-standards",
    "title": "Quickstart",
    "section": "3. Configure internal standards",
    "text": "3. Configure internal standards\nNow that the workspace has been created, you’re ready to start configuring your chromatography methods and corresponding internal standards. The workflow for adding internal standards is simple:\n\nAdd a chromatography method\nSelect the chromatography and polarity to modify\nAdd an internal standard library\nOptional: Set a different MS-DIAL processing configuration\n\n\n3a. Add a chromatography method\nNavigate to Settings (in the top right corner) > Internal Standards. Once you’re there, it should look something like this:\n\nIn the Manage chromatography methods section at the top, add a new chromatography method by giving it a name and clicking Add method.\n\nIf successful, you should see your new method in the Chromatography methods table.\n\n\n3b. Select the chromatography and polarity to modify\nInternal standards must be configured for both positive and negative mode for each chromatography method.\nLet’s start by selecting the chromatography method you created, and then selecting Positive Mode for the polarity.\n\n\n\n3c. Add an internal standard library\nNow, we can specify our internal standard library. MS-AutoQC accepts identification libraries in either MSP or CSV format.\nIt is important to note that MS-DIAL can only perform MS2 spectral matching using MSP libraries. If you use a CSV library, identification will be performed via m/z and RT matches.\nHere is an example internal standard library in CSV format:\n\n\n\nCommon Name\nMS1 m/z\nRT (min)\n\n\n\n\n1_Methionine_d8\n158.1085398\n7.479\n\n\n1_1_Methylnicotinamide_d3\n141.0975946\n6.217\n\n\n1_Creatinine_d3\n117.0850186\n4.908\n\n\n…\n…\n…\n\n\n1_Lysine d8\n155.1630181\n9.578\n\n\n1_Phenylalanine d8\n174.136469\n6.92\n\n\n1_Hippuric acid d5\n185.0969033\n3.011\n\n\n\nAnd here is one internal standard from a library in MSP format:\nNAME: 1_HippuricAcid_d5\nSCANNUMBER: 1229\nRETENTIONTIME: 3.011485\nPRECURSORMZ: 185.0967\nPRECURSORTYPE: [M+H]+\nIONMODE: Positive\nINTENSITY: 2.157809E+07\nISOTOPE: M + 0\nINCHIKEY:\nSMILES:\nFORMULA:\nNum Peaks: 33\n51.02318    5550\n56.94302    2599\n57.93503    32786\n...\n171.3111    3202\n181.08981   2837\n185.09656   4996\nClick the Browse Files button to browse for your MSP or CSV file, then click the Add MSP to  Positive Mode button.\n\nThat’s it! Now, you can select Negative Mode from the polarity dropdown and add your negative mode internal standards. Once you’re done, your screen should look something like this:"
  },
  {
    "objectID": "getting-started.html#configure-qc-parameters",
    "href": "getting-started.html#configure-qc-parameters",
    "title": "Quickstart",
    "section": "4. Configure QC parameters",
    "text": "4. Configure QC parameters\nOnce you have configured your chromatography methods, you can then navigate to Settings > QC Configurations to define your QC criteria.\n\nMS-AutoQC stores individual parameters in configurations, so that you can configure a specific configuration to fit each chromatography method.\n\nYou can specify these parameters however you’d like, and enable / disable them as needed. To revert a configuration back to the default recommended settings, simply click the Reset default settings button.\nOnce you’re done, don’t forget to click Save changes!"
  },
  {
    "objectID": "getting-started.html#specify-ms-dial-location",
    "href": "getting-started.html#specify-ms-dial-location",
    "title": "Quickstart",
    "section": "5. Specify MS-DIAL location",
    "text": "5. Specify MS-DIAL location\nThe last thing to do is to specify the location of your MS-DIAL v4 download.\nTo do this, navigate to Settings > MS-DIAL Configurations and browse (or enter) the folder path into the MS-DIAL download location field.\nFor example, if the downloaded MS-DIAL files are located in C:\\Users\\eliaslab\\Documents\\MSDIAL, then enter this into the text field and click Save Changes."
  },
  {
    "objectID": "getting-started.html#setup-a-new-qc-job",
    "href": "getting-started.html#setup-a-new-qc-job",
    "title": "Quickstart",
    "section": "6. Setup a new QC job",
    "text": "6. Setup a new QC job\nSetting up a new QC job was designed to be as fast and easy as possible. To get MS-AutoQC monitoring an active instrument run (or QC’ing a completed batch), the user simply needs to enter a few fields of information:\n\nRun ID\nChromatography method\nOptional: Biological standard(s)\nAcquisition sequence file\nOptional: sample metadata\nData acquisition path\n\n\nMS-AutoQC will intelligently validate that everything is in place for it to start working. It does this by:\n\nEnsuring that the run ID is unique so that data is not corrupted\nVerifying that your chromatography method has valid internal standard libraries\nEnsuring that your acquisition sequence contains the required columns\nVerifying that the data acquisition path exists\nValidating biological standard libraries and sample metadata columns\n\nOnce it has validated these fields, the blue button will become enabled and you’re all set to begin."
  },
  {
    "objectID": "getting-started.html#optional-configure-biological-standards",
    "href": "getting-started.html#optional-configure-biological-standards",
    "title": "Quickstart",
    "section": "7. Optional: Configure biological standards",
    "text": "7. Optional: Configure biological standards"
  },
  {
    "objectID": "getting-started.html#optional-configure-ms-dial-processing-parameters",
    "href": "getting-started.html#optional-configure-ms-dial-processing-parameters",
    "title": "Quickstart",
    "section": "8. Optional: Configure MS-DIAL processing parameters",
    "text": "8. Optional: Configure MS-DIAL processing parameters"
  },
  {
    "objectID": "getting-started.html#optional-configure-google-drive-sync",
    "href": "getting-started.html#optional-configure-google-drive-sync",
    "title": "Quickstart",
    "section": "9. Optional: Configure Google Drive sync",
    "text": "9. Optional: Configure Google Drive sync"
  },
  {
    "objectID": "getting-started.html#optional-configure-slackemail-notifications",
    "href": "getting-started.html#optional-configure-slackemail-notifications",
    "title": "Quickstart",
    "section": "10. Optional: Configure Slack/email notifications",
    "text": "10. Optional: Configure Slack/email notifications"
  },
  {
    "objectID": "user-guide.html",
    "href": "user-guide.html",
    "title": "User Guide",
    "section": "",
    "text": "This page offers brief tutorials for usage and configuration of various MS-AutoQC features. Be sure to use the navigation guide on the right (or Ctrl+F) to find what you’re looking for."
  },
  {
    "objectID": "user-guide.html#setting-up-google-drive-sync",
    "href": "user-guide.html#setting-up-google-drive-sync",
    "title": "User Guide",
    "section": "Setting up Google Drive sync",
    "text": "Setting up Google Drive sync\nTo allow access to your workspace from any device, you must first create a project in the Google Cloud Console and generate an OAuth Client ID for your installation of MS-AutoQC.\nThese actions only need to be performed once. Upon completion, any shared user will be able to use the Client ID and Client Secret to sign in to your workspace.\n\n1. Create a project in the Google Cloud Console\nNavigate to the Google Cloud Console. The landing page should look something like this:\n\nChoose Create or select a project, then click New Project.\nName the project MS-AutoQC and click Create.\n\n\n\n2. Configure the OAuth consent screen\nFrom the sidebar, navigate to APIs & Services > OAuth consent screen.\nFor user type, choose Internal and click Create. Fill in the following:\n\nApp name: MS-AutoQC\nUser support email: [email]\nDeveloper contact information: [email]\n\nOnce you’re done, click Save and Continue.\nOn the next screen, select Add or Remove Scopes. Scroll down to the Manually add scopes section and paste in the following:\nhttps://www.googleapis.com/auth/drive\nhttps://www.googleapis.com/auth/gmail.send\nhttps://www.googleapis.com/auth/userinfo.email\n\nClick Add to Table. Then click Update. Then click Save and Continue.\n\n\n3. Generate the OAuth Client ID\nFrom the sidebar, navigate to APIs & Services > Credentials.\nClick the Create Credentials button and select OAuth client ID.\n\nFor application type, choose Desktop application. Name the application MS-AutoQC.\nOnce you’re done, click Create. A dialog window will appear, providing your client ID and client secret.\n\nThat’s it – you’re all set! Copy these and save them somewhere accessible. If you’re here from the Quickstart guide, click here to head back and use these credentials to set up or sign in to your workspace."
  },
  {
    "objectID": "user-guide.html#setting-up-slack-notifications",
    "href": "user-guide.html#setting-up-slack-notifications",
    "title": "User Guide",
    "section": "Setting up Slack notifications",
    "text": "Setting up Slack notifications\nTo set up Slack notifications, you must create your own Slack bot, generate an OAuth token for it, and give that token to MS-AutoQC in Settings > General.\nYou only need to do this once! After that, MS-AutoQC will use your token to alert you about QC warnings and QC fails.\n\n1. Create your Slack bot\nNavigate to the Slack API console and click the Create New App button.\nChoose to create your app From Scratch. Fill in the App Name and your Slack workspace, then click Create App.\n\n\n\n2. Generate an OAuth token\nFrom the sidebar, navigate to Features > OAuth & Permissions.\nScroll down to the Scopes section. For Bot Token Scopes, add the following OAuth scopes:\nchat:write\nchat:write.public\nincoming-webhook\n\nNow, scroll back up to the OAuth Tokens for Your Workspace section and click Install to Workspace. Once that’s done, you will have generated your Bot User OAuth Token!\n\n\n3. Give token to MS-AutoQC\nIn MS-AutoQC, navigate to Settings > General and paste the token you generated in the Slack API client credentials field. Click Save bot token.\nNow, enter the name of the channel you’d like MS-AutoQC to post messages to. Once you’re done, toggle Enable notifications and you’re all set."
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "FAQ",
    "section": "",
    "text": "This section provides a list of frequently asked questions concerning usage, installation, and development of MS-AutoQC.\nIf you don’t find an answer to your question, please feel free to contact us or submit an issue on GitHub."
  },
  {
    "objectID": "faq.html#what-is-the-recommended-way-to-install-ms-autoqc",
    "href": "faq.html#what-is-the-recommended-way-to-install-ms-autoqc",
    "title": "FAQ",
    "section": "What is the recommended way to install MS-AutoQC?",
    "text": "What is the recommended way to install MS-AutoQC?\nUsing pip, Python’s built-in package installer. Check out the installation guide to see how."
  },
  {
    "objectID": "faq.html#how-can-i-install-ms-autoqc-manually",
    "href": "faq.html#how-can-i-install-ms-autoqc-manually",
    "title": "FAQ",
    "section": "How can I install MS-AutoQC manually?",
    "text": "How can I install MS-AutoQC manually?\nWhile it is recommended that you use pip, here is a short guide on how to install MS-AutoQC manually.\n\nDownload MS-AutoQC v1.0.0 from GitHub.\nExtract the ZIP file to a folder of your choice.\nOpen a terminal window and enter:\n\ncd <path-to-folder>\npy -m pip install .\nOnce that’s done, you should be able to launch MS-AutoQC by simply entering ms_autoqc in your terminal."
  },
  {
    "objectID": "faq.html#how-can-i-uninstall-ms-autoqc",
    "href": "faq.html#how-can-i-uninstall-ms-autoqc",
    "title": "FAQ",
    "section": "How can I uninstall MS-AutoQC?",
    "text": "How can I uninstall MS-AutoQC?\nTo uninstall MS-AutoQC, simply open a terminal window and type:\npy -m pip uninstall ms-autoqc\nYou will be prompted to confirm by entering Y, and then the package will be uninstalled."
  },
  {
    "objectID": "faq.html#is-my-workspace-deleted-if-i-uninstall-or-re-install-ms-autoqc",
    "href": "faq.html#is-my-workspace-deleted-if-i-uninstall-or-re-install-ms-autoqc",
    "title": "FAQ",
    "section": "Is my workspace deleted if I uninstall or re-install MS-AutoQC?",
    "text": "Is my workspace deleted if I uninstall or re-install MS-AutoQC?\nUninstalling MS-AutoQC does NOT delete workspace data such as QC results and settings for your instrument. These must be removed manually.\nTo delete all workspace data, you can type:\nrmdir /s C:\\Users\\<YOUR-USERNAME-HERE>\\AppData\\Local\\Programs\\python\\<PYTHON-VERSION>\\lib\\site-packages\\ms_autoqc\nNote: The <PYTHON-VERSION> will be denoted as python39 if you have Python 3.9, or python310 if you have Python 3.10, for example.\nIf you installed MS-AutoQC in a virtual environment, then the relevant command is:\nrmdir /s <path-to-venv-folder>\\lib\\site-packages\\ms_autoqc\nOr, if you feel safer to navigate to the folder and delete it yourself, simply paste the above directory into your File Explorer and delete the folders."
  },
  {
    "objectID": "faq.html#why-isnt-msconvert-being-detected-by-ms-autoqc",
    "href": "faq.html#why-isnt-msconvert-being-detected-by-ms-autoqc",
    "title": "FAQ",
    "section": "Why isn’t MSConvert being detected by MS-AutoQC?",
    "text": "Why isn’t MSConvert being detected by MS-AutoQC?\nIf MSConvert is not being detected, try each of the following and see if it solves the problem:\n\nRefresh the page in the browser\nRestart the computer\nReinstall MSConvert\nReinstall .NET Framework"
  },
  {
    "objectID": "faq.html#why-isnt-ms-dial-being-detected-by-ms-autoqc",
    "href": "faq.html#why-isnt-ms-dial-being-detected-by-ms-autoqc",
    "title": "FAQ",
    "section": "Why isn’t MS-DIAL being detected by MS-AutoQC?",
    "text": "Why isn’t MS-DIAL being detected by MS-AutoQC?\nIf MS-DIAL isn’t being located, you might have provided MS-AutoQC the wrong folder.\n\nCheck to make sure that the directory you have provided in Settings > MS-DIAL Configurations isn’t a folder containing the MS-DIAL folder.\nOnce you have saved a new MS-DIAL directory, refresh the page in your browser and try again.\n\nIf this doesn’t solve the problem, check to make sure MSDialConsoleApp.exe exists in your MS-DIAL folder.\n\nIf it doesn’t, you may have a newer version of MS-DIAL. Go to the MS-DIAL website and download any one of the v4 releases.\n\nIf all else fails, try to rename your folder to something with no spaces such as MS-DIAL."
  },
  {
    "objectID": "faq.html#something-went-wrong.-how-do-i-reset-the-app",
    "href": "faq.html#something-went-wrong.-how-do-i-reset-the-app",
    "title": "FAQ",
    "section": "Something went wrong. How do I “reset” the app?",
    "text": "Something went wrong. How do I “reset” the app?\nAs a general rule of thumb, if the UI freezes or produces a bug, try refreshing the page in your browser.\nIf that doesn’t work, try restarting the app by 1) closing the Command Prompt window and 2) launching a new instance using py -m start_autoqc."
  },
  {
    "objectID": "faq.html#what-happens-if-i-refresh-close-the-app-during-an-active-instrument-run",
    "href": "faq.html#what-happens-if-i-refresh-close-the-app-during-an-active-instrument-run",
    "title": "FAQ",
    "section": "What happens if I refresh / close the app during an active instrument run?",
    "text": "What happens if I refresh / close the app during an active instrument run?\nNothing! The acquisition listener process runs in the background, so it will not be interrupted."
  },
  {
    "objectID": "faq.html#what-happens-if-i-restart-ms_autoqc-from-the-command-prompt-during-an-active-instrument-run",
    "href": "faq.html#what-happens-if-i-restart-ms_autoqc-from-the-command-prompt-during-an-active-instrument-run",
    "title": "FAQ",
    "section": "What happens if I restart ms_autoqc from the Command Prompt during an active instrument run?",
    "text": "What happens if I restart ms_autoqc from the Command Prompt during an active instrument run?\nIf the MS-AutoQC process was interrupted during an instrument run, perform the following steps:\n\n1. Restart MS-AutoQC\nDo this by entering ms_autoqc in a Command Prompt window.\n\n\n2. Select the instrument run from the table\nMS-AutoQC will check to see if the run is active. If the run is active, then it will check to see if the listener process is still running, and restart it as needed."
  },
  {
    "objectID": "faq.html#how-can-i-delete-a-job-and-start-over",
    "href": "faq.html#how-can-i-delete-a-job-and-start-over",
    "title": "FAQ",
    "section": "How can I delete a job and start over?",
    "text": "How can I delete a job and start over?\nFollow the steps below:\n\nSelect the instrument run from the table\nClick the “Delete Job” button\nConfirm and wait for the alert to disappear\nRefresh the page\n\nWhen you refresh the page, the instrument run should no longer appear on the dashboard.py"
  },
  {
    "objectID": "index/DashWebApp.html",
    "href": "index/DashWebApp.html",
    "title": "MS-AutoQC",
    "section": "",
    "text": "ms_autoqc.DashWebApp¶\nModule Attributes\n\n\n\nlocal_stylesheet\nDash app layout\n\n\n\nFunctions\n\n\n\n\n\n\n\nadd_biological_standard(button_click, name, ...)\nAdds biological standard to database\n\n\nadd_chromatography_method{.xref .py .py-obj .docutils .literal .notran slate}(on_page_load, ...)\nAdd chromatography method to database\n\n\nadd_msdi al_config_for_bio_standard(...)\nIn Settings > Biological Standards, sets the MS-DIAL configuration to be used for chromatography\n\n\nadd_msdial _config_for_chromatography(...)\nIn Settings > Internal Standards, sets the MS-DIAL configuration to be used for processing samples\n\n\nadd_msdial_configuration{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nAdds new MS-DIAL configuration to the database\n\n\nadd_msp_to_bi o_standard_button_feedback(...)\n\"Save changes\" button UI feedback for Settings > Biological Standards\n\n\nadd_msp_to_chro matography_button_feedback(...)\n\"Save changes\" button UI feedback for Settings > Internal Standards\n\n\nadd_qc_configuration(button_click, qc_config_id)\nAdds new QC configuration to the database\n\n\nadd_user_to_workspace{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nGrants user permission to MS-AutoQC workspace in Google Drive\n\n\nap ply_sample_filter_to_plots{.xref .py .py-obj .docutils .literal . notranslate}(filter, ...)\nApply sample filter to internal standard plots, options are: 1.\n\n\nauth enticate_with_google_drive{.xref .py .py-obj .docutils .literal . notranslate}(on_page_load)\nAuthenticates with Google Drive if the credentials file is found\n\n\nbio_standa rd_msp_text_field_feedback(filename)\nUI feedback for selecting an MSP to save for a chromatography method\n\n\nbio_standard_ msp_text_field_ui_callback(filename)\nUI feedback for selecting an MSP to save for a biological standard\n\n\ncapture_uploaded_bio_msp{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nIn Settings > Biological Standards, captures contents of uploaded MSP file and calls add_msp_to_database().\n\n\ncapture_uploaded_istd_msp{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nIn Settings > Internal Standards, captures contents of uploaded MSP file and calls add_msp_to_database()\n\n\ncapture_uploaded_metadata{.xref .py .py-obj .docutils .literal .notran slate}(contents, filename)\nConverts metadata CSV file to JSON string and stores in dcc.Store object\n\n\ncapture_uploaded_sequence{.xref .py .py-obj .docutils .literal .notran slate}(contents, filename)\nConverts sequence CSV file to JSON string and stores in dcc.Store object\n\n\ncheck_first_time_g oogle_drive_authentication(...)\nUI feedback for Google Drive authentication in Welcome > Setup New Instrument page\n\n\ncheck_workspace_login_g oogle_drive_authentication(...)\nUI feedback for Google Drive authentication in Welcome > Sign In To Workspace page\n\n\nclose_sync_modal{.xref .py .py-obj .docutils .literal .n otranslate}(sync_finished)\n\n\n\ncomplete_first_time_setup{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nUpon \"Complete setup\" button click, this callback completes the following: 1.\n\n\n[confirm_action_on_job]{. pre}(mark_job_as_completed, ...)\nShows an alert confirming that the user wants to perform an action on the selected MS-AutoQC job\n\n\ndelet e_email_from_notifications(...)\nUnsubscribes email address from MS-AutoQC notifications\n\n\nd elete_msdial_configuration{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nRemoves dropdown-selected MS-DIAL configuration from database\n\n\ndelete_qc_configuration{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nRemoves dropdown-selected QC configuration from database\n\n\ndelete_user_from_workspace{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nRevokes user permission to MS-AutoQC workspace in Google Drive\n\n\ndismiss_setup_window(...)\nChecks for a valid database on every start and dismisses setup window if found\n\n\nen able_complete_setup_button(...)\nEnables \"Complete setup\" button upon form completion in Welcome > Setup New Instrument page\n\n\nenab le_instrument_id_selection(...)\nIn Welcome > Sign In To Workspace page, enables instrument dropdown selection if user is signing in to instrument\n\n\nen able_new_autoqc_job_button{.xref .py .py-obj .docutils .literal .notran slate}(run_id_valid, ...)\nEnables \"submit\" button for New MS-AutoQC Job form\n\n\nena ble_workspace_login_button{.xref .py .py-obj .docutils .literal .notra nslate}(button_text, ...)\nEnables \"Sign in to workspace\" button upon form completion in Welcome > Sign In To Workspace page\n\n\nget_biological_standards{.xref .py .py-obj .docutils .literal .notran slate}(on_page_load, ...)\nPopulates dropdown and table of biological standards\n\n\nget_emails_re gistered_for_notifications(...)\nReturns table of emails that are registered for email notifications\n\n\nget_instrument_tabs{.xref .py .py-obj .docutils .literal .notra nslate}(instruments, ...)\nRetrieves all instruments on a user installation of MS-AutoQC\n\n\nget_m sdial_configs_for_dropdown(...)\nRetrieves list of user-created configurations of MS-DIAL parameters from database\n\n\nget_msdial_directory(select_folder_button, ...)\nReturns (previously inputted by user) location of MS-DIAL directory\n\n\nget_ms dial_parameters_for_config(...)\nIn Settings > MS-DIAL parameters, fills text fields with placeholders of current parameter values stored in the database.\n\n\ng et_qc_configs_for_dropdown{.xref .py .py-obj .docutils .literal .notran slate}(on_page_load, ...)\nRetrieves list of user-created configurations of QC parameters from database\n\n\nge t_qc_parameters_for_config{.xref .py .py-obj .docutils .literal .notransl ate}(qc_config_name, ...)\nIn Settings > QC Configurations, fills text fields with placeholders of current parameter values stored in the database.\n\n\nget_slack_bot_token(token_save_result, ...)\nGet Slack bot token saved in database\n\n\nget_slack_channel{.xref .py .py-obj .docutils .literal .notrans late}(result, sync_update)\nGets Slack channel and notification toggle setting from database\n\n\nget_u sers_with_workspace_access(...)\nReturns table of users that have access to the MS-AutoQC workspace\n\n\nhide_elements_ for_non_instrument_devices(...)\nHides job setup button for shared users\n\n\nlaunch_g oogle_drive_authentication(...)\nLaunches Google Drive authentication window from first-time setup\n\n\nlist_di rectories_in_file_explorer(...)\nLists directories for a user to select in the file explorer modal\n\n\nload_data(refres h, active_cell, table_data, ...)\nUpdates and stores QC results in dcc.Store objects (user's browser session)\n\n\n[new_autoqc_job_setup]{. pre}(button_clicks, run_id, ...)\nThis callback initiates the following: 1.\n\n\nopen_file_explorer(...)\nOpens custom file explorer modal\n\n\n[open_loading_modal]{.pr e}(active_cell, table_data, ...)\nShows loading modal on selection of an instrument run\n\n\nperform_action_on_job{.xref .py .py-obj .docutils .literal .notransl ate}(confirm_button, ...)\nPerforms the selected action on the selected MS-AutoQC job\n\n\npopulate_b io_standard_benchmark_plot(...)\nPopulates biological standard benchmark plot\n\n\npopula te_bio_standard_mz_rt_plot{.xref .py .py-obj .docutils .literal .no translate}(polarity, ...)\nPopulates biological standard m/z vs.\n\n\npopulate_bio logical_standards_dropdown(resources)\nRetrieves list of biological standards included in run\n\n\npopu late_instrument_runs_table(...)\nDash callback for populating tables with list of past/active instrument runs\n\n\npo pulate_istd_intensity_plot{.xref .py .py-obj .docutils .literal .no translate}(polarity, ...)\nPopulates internal standard intensity vs.\n\n\npopulate_istd_mz_plot{.xref .py .py-obj .docutils .literal .no translate}(polarity, ...)\nPopulates internal standard delta m/z vs.\n\n\npopulate_istd_rt_plot{.xref .py .py-obj .docutils .literal .no translate}(polarity, ...)\nPopulates internal standard retention time vs.\n\n\npopulate_msdial_confi gs_for_biological_standard(...)\nIn Settings > Biological Standards, populates the MS-DIAL configurations dropdown\n\n\npo pulate_options_for_new_run{.xref .py .py-obj .docutils .literal . notranslate}(button_click)\nPopulates dropdowns and checklists for Setup New MS-AutoQC Job page\n\n\npopulate_sample_tables(samples)\nPopulates table with list of samples for selected run from instrument runs table\n\n\nreg enerate_settings_yaml_file{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nRegenerates settings.yaml file with new credentials\n\n\nregist er_email_for_notifications(...)\nRegisters email address for MS-AutoQC notifications\n\n\nremove_biological_standard{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nRemoves biological standard (and all corresponding MSPs) in the database\n\n\nre move_chromatography_method{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nRemove chromatography method from database\n\n\nreset_instrument_table(instrument, job_deleted)\nRemoves selected cell highlight upon tab switch to different instrument (A case study in insane side missions during frontend development)\n\n\nreset_ms dial_parameters_to_default(...)\nResets parameters for selected QC configuration to default settings\n\n\nsave_slack_bot_token{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nSaves Slack bot user OAuth token in database\n\n\n[save_slack_channel]{. pre}(notifications_enabled, ...)\n\nRegisters Slack channel for MS-AutoQC notifications\n\n\n\nserve_layout()\n\n\n\nshow_aler t_on_bio_standard_addition(...)\nUI feedback for adding a biological standard\n\n\nshow_ale rt_on_bio_standard_removal(...)\nUI feedback for removing a biological standard\n\n\nshow_alert_ on_chromatography_addition(...)\nUI feedback for removing a chromatography method\n\n\nshow_alert _on_msdial_config_addition(...)\nUI feedback on MS-DIAL configuration addition\n\n\nshow_aler t_on_msdial_config_removal(...)\nUI feedback on MS-DIAL configuration removal\n\n\nsho w_alert_on_parameter_reset{.xref .py .py-obj .docutils .literal .notr anslate}(parameters_reset)\nUI feedback for resetting MS-DIAL parameters in a configuration\n\n\nsh ow_alert_on_parameter_save{.xref .py .py-obj .docutils .literal .notr anslate}(parameters_saved)\nUI feedback for saving changes to MS-DIAL parameters\n\n\nshow_a lert_on_qc_config_addition{.xref .py .py-obj .docutils .literal . notranslate}(config_added)\nUI feedback on QC configuration addition\n\n\nshow_ alert_on_qc_config_removal(...)\nUI feedback on QC configuration removal\n\n\nshow_a lert_on_qc_parameter_reset(...)\nUI feedback for resetting QC parameters in a configuration\n\n\nshow_ alert_on_qc_parameter_save{.xref .py .py-obj .docutils .literal .notr anslate}(parameters_saved)\nUI feedback for saving changes to QC parameters\n\n\nshow_sync_modal{.xref .py .py-obj .docutils .literal .notranslat e}(settings_is_open, ...)\nLaunches progress modal, which syncs database and methods directory to Google Drive\n\n\nsignal_load_finished{.xref .py .py-obj .docutils .literal .n otranslate}(load_finished)\n\n\n\nsyn c_settings_to_google_drive(...)\nSyncs settings and methods files to Google Drive\n\n\nsync_with_google_drive{.xref .py .py-obj .docutils .literal .n otranslate}(instrument_id)\nFor users signed in to MS-AutoQC from an external device, this will download the selected instrument database\n\n\nthe_most_ineff icient_callback_in_history(...)\nHandles user selection of folder in the file explorer modal (I'm sorry)\n\n\n[toggle_new_run_modal]{.p re}(button_clicks, success, ...)\nToggles modal for setting up AutoQC monitoring for a new instrument run\n\n\ntoggle_sample_card(is_open, active_cell, ...)\nOpens information modal when a sample is clicked from the sample table\n\n\ntoggle_settings_modal{.xref .py .py-obj .docutils .literal . notranslate}(button_click)\nToggles global settings modal\n\n\nui_alert _for_msdial_directory_save(...)\nDisplays alert on MS-DIAL directory update\n\n\nui_alert _on_gdrive_credential_save(...)\nDisplays UI alert on Google API credential save\n\n\nui_alert_on_ slack_notifications_toggle(result)\nUI alert on setting Slack channel and toggling Slack notifications\n\n\nui _alert_on_slack_token_save{.xref .py .py-obj .docutils .literal .notra nslate}(token_save_result)\nDisplays UI alert on Slack bot token save\n\n\nui_feedb ack_for_adding_gdrive_user(...)\nUI alert upon adding a new user to MS-AutoQC workspace\n\n\nui_feedback_for_ adding_msp_to_bio_standard(...)\nUI feedback for adding an MSP to a biological standard\n\n\nui_feedback_for_ad ding_msp_to_chromatography(...)\nUI feedback for adding an MSP to a chromatography method\n\n\nui_feedback _for_complete_setup_button(...)\nReturns loading feedback on complete setup button\n\n\nui_f eedback_for_deleting_email(...)\nUI alert upon deleting email from email notifications list\n\n\nui_feedbac k_for_deleting_gdrive_user(...)\nUI alert upon deleting a user from the MS-AutoQC workspace\n\n\nui _feedback_for_login_button{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nDismisses setup window and signs in to MS-AutoQC workspace\n\n\nui_feed back_for_registering_email(...)\nUI alert upon registering email for email notifications\n\n\nui_feedback_for_setting_msdi al_config_for_bio_standard(...)\nIn Settings > Biological Standards, provides an alert when MS-DIAL config is successfully set for biological standard\n\n\nui_feedback_for_setting_msdial _config_for_chromatography(...)\nIn Settings > Internal Standards, provides an alert when MS-DIAL config is successfully set for a chromatography\n\n\nui_feedback_ for_workspace_login_button(...)\nUI feedback for workspace sign in button in Setup > Login To Workspace\n\n\nupdate_dr opdowns_on_polarity_change(...)\nUpdates dropdown lists with correct items for user-selected polarity\n\n\nupdate_file_explorer_title(...)\nPopulates data acquisition path text field with user selection\n\n\nupd ate_folder_path_text_field(...)\nPopulates data acquisition path text field with user selection\n\n\nupdate_google_dri ve_sync_status_in_settings(...)\nUpdates Google Drive sync status in user settings on user authentication\n\n\nupdate_msdial_directory{.xref .py .py-obj .docutils .literal .notran slate}(button_click, ...)\nUpdates MS-DIAL directory\n\n\nupdate_new_job_button_text(job_type)\nUpdates New MS-AutoQC Job form submit button based on job type\n\n\nupdate_progress_bar_du ring_active_instrument_run(...)\nDisplays and updates progress bar if an active instrument run was selected from the table\n\n\nvalidation_feedb ack_for_new_run_setup_form(...)\nExtensive form validation and feedback for setting up a new MS-AutoQC job\n\n\nvendor_dropdown_handling(...)\nWhy didn't Dash Bootstrap Components implement this themselves? The world may never know...\n\n\nwrite_msd ial_parameters_to_database(...)\nSaves MS-DIAL parameters to respective configuration in database\n\n\nwrite _qc_parameters_to_database(...)\nSaves QC parameters to respective configuration in database\n\n\n\n\n\n\n\n\n\n\nMS-AutoQC\n\nNavigation\nContents:\n\nAPI Reference\n\nModules\n\n\n\n\nRelated Topics\n\nDocumentation overview\n\nAPI Reference\n\nms_autoqc\n\nPrevious: ms_autoqc.AutoQCProcessing\nNext: ms_autoqc.DatabaseFunctions\n\n\n\n\n\n\n\nQuick search\n\n\n\n\n\n\n\n\n\n\n\n\n©2023, Chan Zuckerberg Biohub. | Powered by Sphinx 5.3.0 & Alabaster 0.7.13 | Page source"
  },
  {
    "objectID": "index/PlotGeneration.html",
    "href": "index/PlotGeneration.html",
    "title": "MS-AutoQC",
    "section": "",
    "text": "ms_autoqc.PlotGeneration¶\nFunctions\n\n\n\ngenerate_bio_standard_dataframe(...)\nAggregates data for a selected biological standard.\n\n\ngenerate_sample_metadata_dataframe(sample, ...)\nAggregates tables of relevant data from the acquisition sequence, metadata file, and QC results for a selected sample.\n\n\nget_internal_standard_index(previous, next, max)\nButton functionality for seeking through internal standards.\n\n\nget_qc_results(instrument_id, run_id[, ...])\nLoads and parses QC results (for samples and biological standards) into Plotly graphs.\n\n\nload_bio_benchmark_plot(dataframe, ...)\nReturns bar plot figure of intensities for a targeted metabolite in a biological standard across instrument runs.\n\n\nload_bio_feature_plot(run_id, df_rt, df_mz, ...)\nReturns scatter plot figure of precursor m/z vs.\n\n\nload_istd_delta_mz_plot(dataframe, samples, ...)\nReturns line plot figure of delta m/z (for a selected internal standard) across samples.\n\n\nload_istd_intensity_plot(dataframe, samples, ...)\nReturns bar plot figure of peak intensities (for a selected internal standard) across samples.\n\n\nload_istd_rt_plot(dataframe, samples, ...)\nReturns line plot figure of retention times (for a selected internal standard) across samples.\n\n\n\n\n\n\n\n\n\n\nMS-AutoQC\n\nNavigation\nContents:\n\nAPI Reference\n\nModules\n\n\n\n\nRelated Topics\n\nDocumentation overview\n\nAPI Reference\n\nms_autoqc\n\nPrevious: ms_autoqc.DatabaseFunctions\nNext: ms_autoqc.SlackNotifications\n\n\n\n\n\n\n\nQuick search\n\n\n\n\n\n\n\n\n\n\n\n\n©2023, Chan Zuckerberg Biohub. | Powered by Sphinx 5.3.0 & Alabaster 0.7.13 | Page source"
  },
  {
    "objectID": "index/DatabaseFunctions.html",
    "href": "index/DatabaseFunctions.html",
    "title": "MS-AutoQC",
    "section": "",
    "text": "ms_autoqc.DatabaseFunctions¶\nModule Attributes\n\n\n\nauth_container\nThe functions defined below operate on two database types:\n\n\n\nFunctions\n\n\n\nadd_biological_standard(name, identifier)\nCreates new biological standard with name and identifier.\n\n\nadd_csv_to_database(csv_file, ...)\nParses compounds from a CSV file into the Settings database.\n\n\nadd_msdial_configuration(msdial_config_name)\nInserts new user configuration of MS-DIAL parameters into the \"msdial_parameters\" table in Settings database.\n\n\nadd_msp_to_database(msp_file, ...[, ...])\nParses compounds from MSP into the Settings database.\n\n\nadd_qc_configuration(qc_config_name)\nAdds a new QC configuration to the \"qc_parameters\" table in the Settings database.\n\n\nadd_user_to_workspace(email_address)\nGives user access to workspace in Google Drive and stores email address in database.\n\n\nconnect_to_database(name)\nEstablishes a connection to a SQLite database of choice\n\n\ncreate_databases(instrument_id[, new_instrument])\nInitializes SQLite databases for 1) instrument data and 2) workspace settings.\n\n\ncreate_workspace_metadata()\nCreates record in \"workspace\" table to store various metadata.\n\n\ndatabase_was_modified(database_name)\nReturns True if workspace file was modified by another instrument PC in Google Drive, and False if not.\n\n\ndelete_active_run_csv_files(instrument_id, ...)\nChecks for and deletes CSV files from Google Drive at the end of an active instrument run.\n\n\ndelete_email_from_notifications(email_address)\nDeletes email address from \"email_notifications\" table in Settings database.\n\n\ndelete_instrument_run(instrument_id, run_id)\nDeletes all records for an instrument run (QC job) from the database.\n\n\ndelete_temp_directory(instrument_id, run_id)\nDeletes temporary data file directory in local app directory.\n\n\ndelete_user_from_workspace(email_address)\nRemoves user access to workspace in Google Drive and deletes email from database.\n\n\ndownload_database(instrument_id[, sync_settings])\nDownloads instrument database ZIP file from Google Drive.\n\n\ndownload_methods([skip_check])\nDownloads methods directory ZIP archive from Google Drive.\n\n\ndownload_qc_results(instrument_id, run_id)\nDownloads CSV files of QC results from Google Drive and stores in /data directory.\n\n\nemail_notifications_are_enabled()\nChecks whether email notifications are enabled.\n\n\nexecute_vacuum(database)\nExecutes VACUUM command on the database of choice.\n\n\ngenerate_client_settings_yaml(client_id, ...)\nGenerates a settings.yaml file for Google authentication in the /auth directory.\n\n\ngenerate_msdial_parameters_file(...[, ...])\nUses parameters from user-curated MS-DIAL configuration to create a parameters.txt file for MS-DIAL.\n\n\nget_acquisition_path(instrument_id, run_id)\nRetrieves acquisition path for a given instrument run.\n\n\nget_biological_standard_identifiers([...])\nReturns dictionary of identifiers for a given list of biological standards.\n\n\nget_biological_standards()\nReturns DataFrame of the \"biological_standards\" table from the Settings database.\n\n\nget_biological_standards_list()\nReturns list of biological standards from the Settings database.\n\n\nget_chromatography_methods()\nReturns DataFrame of chromatography methods from the Settings database.\n\n\nget_chromatography_methods_list()\nReturns list of chromatography method ID's from the Settings database.\n\n\nget_completed_samples_count(instrument_id, ...)\nReturns tuple containing count for completed samples and total samples in a given instrument run.\n\n\nget_current_sample(instrument_id, run_id)\nReturns the current sample being monitored / processed.\n\n\nget_data_file_type(instrument_id)\nReturns expected data file extension based on instrument vendor type.\n\n\nget_database_drive_id(instrument_id)\nReturns Google Drive ID for a given instrument's database.\n\n\nget_database_file(instrument_id[, ...])\nReturns database file for a given instrument ID.\n\n\nget_device_identity()\nReturns device identity (either an Instrument ID or \"Shared user\").\n\n\nget_drive_folder_id()\nReturns Google Drive ID for the MS-AutoQC folder (found in user's root Drive directory).\n\n\nget_drive_instance()\nReturns user-authenticated Google Drive instance.\n\n\nget_email_notifications_list([as_string])\nReturns list of emails registered for email notifications for QC warnings and fails.\n\n\nget_filenames_from_sequence(sequence[, vendor])\nFilters preblanks, washes, and shutdown injections from sequence file, and simultaneously assigns polariy to each sample based on presence of \"Pos\" or \"Neg\" in Instrument Method column.\n\n\nget_instrument(instrument_id)\nReturns record from \"instruments\" table as a DataFrame for a given instrument\n\n\nget_instrument_run(instrument_id, run_id)\nReturns DataFrame of given instrument run from \"runs\" table.\n\n\nget_instrument_run_from_csv(instrument_id, ...)\nReturns DataFrame of selected instrument run from CSV files during active instrument runs.\n\n\nget_instrument_runs(instrument_id[, as_list])\nReturns DataFrame of all runs on a given instrument from \"runs\" table\n\n\nget_instruments_list()\nReturns list of instruments in database.\n\n\nget_internal_standards(chromatography, polarity)\nReturns DataFrame of internal standards for a given chromatography method and polarity.\n\n\nget_internal_standards_dict(chromatography, ...)\nReturns dictionary of internal standard keys mapped to either m/z or RT values.\n\n\nget_md5(instrument_id, sample_id)\nReturns MD5 checksum for a data file in \"sample_qc_results\" table.\n\n\nget_md5_for_settings_db()\nCalculates and returns MD5 checksum for the settings database file.\n\n\nget_msconvert_directory()\nReturns location of MSConvert directory.\n\n\nget_msdial_configuration_parameters(...[, ...])\nReturns tuple of parameters defined for a selected MS-DIAL configuration.\n\n\nget_msdial_configurations()\nReturns list of user configurations of MS-DIAL parameters from Settings database.\n\n\nget_msdial_directory()\nReturns location of MS-DIAL directory.\n\n\nget_msp_file_path(chromatography, polarity)\nReturns file paths of MSPs for a selected chromatography / polarity (both stored in the methods folder upon user upload) for MS-DIAL parameter file generation.\n\n\nget_next_sample(sample_id, instrument_id, run_id)\nReturns sample following the given sample, or None if last sample.\n\n\nget_parameter_file_path(chromatography, polarity)\nReturns file path of parameters file stored in database.\n\n\nget_pid(instrument_id, run_id)\nRetrieves acquisition listener process ID from \"runs\" table in Settings database.\n\n\nget_polarity_for_sample(instrument_id, ...)\nReturns polarity for a given sample.\n\n\nget_qc_configuration_parameters([...])\nReturns DataFrame of parameters for a selected QC configuration.\n\n\nget_qc_configurations()\nReturns DataFrame of \"qc_parameters\" table from Settings database.\n\n\nget_qc_configurations_list()\nReturns list of names of QC configurations from Settings database.\n\n\nget_qc_results(instrument_id, sample_list[, ...])\nReturns DataFrame of QC results for a given sample list.\n\n\nget_remaining_samples(instrument_id, run_id)\nReturns list of samples remaining in a given instrument run (QC job).\n\n\nget_run_progress(instrument_id, run_id, status)\nReturns progress of instrument run as a percentage of samples completed.\n\n\nget_samples_from_csv(instrument_id, run_id)\nReturns DataFrame of samples in a given run using CSV files from Google Drive.\n\n\nget_samples_in_run(instrument_id, run_id[, ...])\nReturns DataFrame of samples for a given instrument run from instrument database.\n\n\nget_slack_bot_token()\nReturns Slack bot token stored in \"workspace\" table of Settings database.\n\n\nget_slack_channel()\nReturns Slack channel registered for notifications.\n\n\nget_slack_notifications_toggled()\nReturns Slack notification toggle setting.\n\n\nget_table(database_name, table_name)\nRetrieves table from database as a pandas DataFrame object.\n\n\nget_targeted_features(biological_standard, ...)\nReturns DataFrame of metabolite targets for a given biological standard, chromatography, and polarity.\n\n\nget_unprocessed_samples(instrument_id, run_id)\nFor an active run, returns 1) a list of samples that were not processed due to error / runtime termination, and 2) the current sample being monitored / processed.\n\n\nget_workspace_users_list()\nReturns a list of users that have access to the MS-AutoQC workspace.\n\n\ninitialize_google_drive()\nInitializes instance of Google Drive using credentials.txt and settings.yaml in /auth directory\n\n\ninsert_chromatography_method(method_id)\nInserts new chromatography method in the \"chromatography_methods\" table of the Settings database.\n\n\ninsert_google_drive_ids(instrument_id, ...)\nInserts Google Drive ID's into corresponding tables to enable Google Drive sync.\n\n\ninsert_new_instrument(name, vendor)\nInserts a new instrument into the \"instruments\" table in the Settings database.\n\n\ninsert_new_run(run_id, instrument_id, ...)\nInitializes sample records in database for a new QC job.\n\n\nis_completed_run(instrument_id, run_id)\nReturns True if the given QC job is for a completed run, and False if for an active run.\n\n\nis_instrument_computer()\nChecks whether user's device is the instrument computer.\n\n\nis_valid([instrument_id])\nChecks that all required tables in all databases (or a single database of choice) are present.\n\n\nlaunch_google_drive_authentication()\nLaunches Google Drive authentication flow and sets authentication instance.\n\n\nmark_run_as_completed(instrument_id, run_id)\nMarks instrument run status as completed.\n\n\nparse_biological_standard_data(...[, as_json])\nParses biological standard data into JSON-ified DataFrame of targeted features (as columns) vs.\n\n\nparse_internal_standard_data(instrument_id, ...)\nParses data from database into JSON-ified DataFrame for samples (as rows) vs.\n\n\nparse_internal_standard_qc_data(...[, as_json])\nParses QC data into JSON-ified DataFrame for samples (as rows) vs.\n\n\npipeline_valid([module])\nValidates that MSConvert and MS-DIAL dependencies are installed.\n\n\nregister_email_for_notifications(email_address)\nInserts email address into \"email_notifications\" table in Settings database.\n\n\nremember_last_modified(database, modified_date)\nStores last modified time of database file in Google Drive.\n\n\nremove_biological_standard(name)\nDeletes biological standard and corresponding MSPs from Settings database.\n\n\nremove_chromatography_method(method_id)\nDeletes chromatography method and all associated records from the Settings database.\n\n\nremove_msdial_configuration(msdial_config_name)\nDeletes user configuration of MS-DIAL parameters from the \"msdial_parameters\" table.\n\n\nremove_qc_configuration(qc_config_name)\nDeletes QC configuration from the \"qc_parameters\" table in the Settings database.\n\n\nremove_sync_signal(folder_id)\nRemoves empty signal file to signal that an instrument PC has completed syncing to Google Drive.\n\n\nrun_is_on_instrument_pc(instrument_id, run_id)\nValidates that the current device is the instrument PC on which the run was started.\n\n\nsafe_to_upload(folder_id)\nReturns False if another device is currently uploading to Google Drive, else True.\n\n\nsave_google_drive_credentials()\nSaves Google credentials to a credentials.txt file.\n\n\nsend_email(subject, message_body)\nSends email using Google authenticated credentials.\n\n\nsend_sync_signal(folder_id)\nUploads empty file to signal that an instrument PC is syncing to Google Drive.\n\n\nset_device_identity(is_instrument_computer, ...)\nIndicates whether the user's device is the instrument PC or not.\n\n\nsettings_were_modified(md5_checksum)\nChecks whether settings database file has been modified.\n\n\nskip_sample(instrument_id, run_id)\nSkips sample by setting \"latest_sample\" value for instrument run to the next sample.\n\n\nslack_notifications_are_enabled()\nChecks whether Slack notifications are enabled.\n\n\nstore_pid(instrument_id, run_id, pid)\nStores acquisition listener subprocess ID to allow for checkup and termination.\n\n\nsync_is_enabled()\nChecks whether Google Drive sync is enabled simply by querying whether Google Drive ID's exist in the database.\n\n\nsync_on_run_completion(instrument_id, run_id)\nSyncs database with Google Drive at the end of an active instrument run.\n\n\nunzip_csv_files(input_zip, output_directory)\nUnzips ZIP archive of CSV files and deletes the archive upon completion.\n\n\nunzip_database([instrument_id, filename])\nUnzips ZIP archive containing instrument database file and deletes the archive when complete.\n\n\nunzip_methods()\nUnzips ZIP archive containing methods directory and deletes the archive when complete.\n\n\nupdate_md5_checksum(instrument_id, ...)\nUpdates MD5 checksum for a data file during sample acquisition.\n\n\nupdate_msdial_config_for_bio_standard(...)\nUpdates MS-DIAL configuration for given biological standard and chromatography method combination.\n\n\nupdate_msdial_config_for_internal_standards(...)\nUpdates MS-DIAL configuration for a given chromatography method.\n\n\nupdate_msdial_configuration(config_name, ...)\nUpdates and saves changes of all parameters for a selected MS-DIAL configuration.\n\n\nupdate_msdial_directory(msdial_directory)\nUpdates location of MS-DIAL directory, stored in \"workspace\" table of the Settings database.\n\n\nupdate_qc_configuration(config_name, ...)\nUpdates parameters for the given QC configuration.\n\n\nupdate_sample_counters_for_run(...)\nIncrements \"completed\" count, as well as \"pass\" and \"fail\" counts accordingly.\n\n\nupdate_slack_bot_token(slack_bot_token)\nUpdates Slack bot user OAuth 2.0 token in \"workspace\" table of Settings database.\n\n\nupdate_slack_channel(slack_channel, ...)\nUpdates Slack channel registered for notifications in \"workspace\" table of Settings database.\n\n\nupload_database(instrument_id[, sync_settings])\nUploads database file and methods directory to Google Drive as ZIP archives.\n\n\nupload_methods()\nUploads methods directory ZIP archive to Google Drive.\n\n\nupload_qc_results(instrument_id, run_id)\nUploads QC results for a given instrument run to Google Drive as CSV files.\n\n\nupload_to_google_drive(file_dict)\nUploads files to MS-AutoQC folder in Google Drive.\n\n\nwrite_qc_results(sample_id, instrument_id, ...)\nWrites QC results (as dictionary records) to sample record upon MS-DIAL processing completion.\n\n\nzip_csv_files(input_directory, ...)\nCompresses CSV files into a ZIP archive in /data directory.\n\n\nzip_database([instrument_id, filename])\nCompresses instrument database file into a ZIP archive in /data directory.\n\n\nzip_methods()\nCompresses methods directory into a ZIP archive in /data directory.\n\n\n\n\n\n\n\n\n\n\nMS-AutoQC\n\nNavigation\nContents:\n\nAPI Reference\n\nModules\n\n\n\n\nRelated Topics\n\nDocumentation overview\n\nAPI Reference\n\nms_autoqc\n\nPrevious: ms_autoqc.DashWebApp\nNext: ms_autoqc.PlotGeneration\n\n\n\n\n\n\n\nQuick search\n\n\n\n\n\n\n\n\n\n\n\n\n©2023, Chan Zuckerberg Biohub. | Powered by Sphinx 5.3.0 & Alabaster 0.7.13 | Page source"
  },
  {
    "objectID": "index/SlackNotifications.html",
    "href": "index/SlackNotifications.html",
    "title": "MS-AutoQC",
    "section": "",
    "text": "ms_autoqc.SlackNotifications¶\nFunctions\n\n\n\nsend_message(message)\nPosts a message to the Slack channel registered for notifications in Settings > General.\n\n\n\n\n\n\n\n\n\n\nMS-AutoQC\n\nNavigation\nContents:\n\nAPI Reference\n\nModules\n\n\n\n\nRelated Topics\n\nDocumentation overview\n\nAPI Reference\n\nms_autoqc\n\nPrevious: ms_autoqc.PlotGeneration\n\n\n\n\n\n\n\nQuick search\n\n\n\n\n\n\n\n\n\n\n\n\n©2023, Chan Zuckerberg Biohub. | Powered by Sphinx 5.3.0 & Alabaster 0.7.13 | Page source"
  },
  {
    "objectID": "index/AcquisitionListener.html",
    "href": "index/AcquisitionListener.html",
    "title": "MS-AutoQC",
    "section": "",
    "text": "ms_autoqc.AcquisitionListener¶\nFunctions\n\n\n\nget_md5(file_path)\nComputes MD5 checksum for a given file.\n\n\nstart_listener(path, instrument_id, run_id)\nInitializes acquisition listener process to process data files upon sample acquisition completion.\n\n\nterminate_job(instrument_id, run_id)\nWraps up QC job after the last data file has been routed to the pipeline.\n\n\n\nClasses\n\n\n\nDataAcquisitionEventHandler(observer, path, ...)\nEvent handler that alerts when the data file has completed sample acquisition.\n\n\n\n\n\n\n\n\n\n\nMS-AutoQC\n\nNavigation\nContents:\n\nAPI Reference\n\nModules\n\n\n\n\nRelated Topics\n\nDocumentation overview\n\nAPI Reference\n\nms_autoqc\n\nPrevious: ms_autoqc\nNext: ms_autoqc.AutoQCProcessing\n\n\n\n\n\n\n\nQuick search\n\n\n\n\n\n\n\n\n\n\n\n\n©2023, Chan Zuckerberg Biohub. | Powered by Sphinx 5.3.0 & Alabaster 0.7.13 | Page source"
  },
  {
    "objectID": "index/AutoQCProcessing.html",
    "href": "index/AutoQCProcessing.html",
    "title": "MS-AutoQC",
    "section": "",
    "text": "ms_autoqc.AutoQCProcessing¶\nFunctions\n\n\n\nbiological_standards_valid(chromatography, ...)\nValidates that the given list of biological standards have MSP files.\n\n\nchromatography_valid(chromatography)\nValidates that MSP / TXT files for the given chromatography method exist.\n\n\nconvert_metadata_to_json(metadata_contents)\nConverts sequence and metadata files to JSON strings for database storage.\n\n\nconvert_sequence_to_json(sequence_contents)\nConverts sequence table to JSON string for database storage.\n\n\nconvert_to_dict(sample_id, df_peak_list, ...)\nConverts DataFrames to dictionary records, with features as columns and samples as rows, which are then cast to string format for database storage.\n\n\nkill_subprocess(pid)\nKills subprocess.\n\n\nmetadata_is_valid(filename, contents)\nValidates that sample metadata file contains the required columns.\n\n\npeak_list_to_dataframe(sample_peak_list, ...)\nFilters duplicates and poor annotations from MS-DIAL peak table and creates DataFrame storing m/z, RT, and intensity data for each internal standard (or targeted metabolite) in the sample.\n\n\nprocess_data_file(path, filename, extension, ...)\nProcesses data file upon sample acquisition completion.\n\n\nqc_sample(instrument_id, run_id, polarity, ...)\nPerforms quality control on sample data based on user-defined criteria in Settings > QC Configurations.\n\n\nrun_msconvert(path, filename, extension, ...)\nMakes a copy of data file and converts it from instrument vendor format to open mzML format.\n\n\nrun_msdial_processing(filename, msdial_path, ...)\nProcesses data file (in mzML format) using the MS-DIAL console app.\n\n\nsequence_is_valid(filename, contents[, vendor])\nValidates that instrument sequence file contains the correct columns.\n\n\nsubprocess_is_running(pid)\nReturns True if subprocess is still running, and False if not.\n\n\n\n\n\n\n\n\n\n\nMS-AutoQC\n\nNavigation\nContents:\n\nAPI Reference\n\nModules\n\n\n\n\nRelated Topics\n\nDocumentation overview\n\nAPI Reference\n\nms_autoqc\n\nPrevious: ms_autoqc.AcquisitionListener\nNext: ms_autoqc.DashWebApp\n\n\n\n\n\n\n\nQuick search\n\n\n\n\n\n\n\n\n\n\n\n\n©2023, Chan Zuckerberg Biohub. | Powered by Sphinx 5.3.0 & Alabaster 0.7.13 | Page source"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation",
    "section": "",
    "text": "Installing MS-AutoQC is relatively easy and straightforward. You’ll need to:\nIf you run into trouble or have any questions, please feel free to open a new issue on GitHub. You can also visit the Frequently Asked Questions to see if your issue has been documented already."
  },
  {
    "objectID": "installation.html#option-1-install-with-pip-recommended",
    "href": "installation.html#option-1-install-with-pip-recommended",
    "title": "Installation",
    "section": "Option 1: Install with pip (recommended)",
    "text": "Option 1: Install with pip (recommended)\nTo install MS-AutoQC using pip, simply enter the following command in your terminal:\npy -m pip install ms-autoqc\nMS-AutoQC and all required dependencies will be installed automatically. This may take a minute or two. (If you’re curious, you can find a list of these dependencies here.)"
  },
  {
    "objectID": "installation.html#option-2-install-manually",
    "href": "installation.html#option-2-install-manually",
    "title": "Installation",
    "section": "Option 2: Install manually",
    "text": "Option 2: Install manually\nIf you prefer not to use pip – or, if your LC-MS instrument computer does not have an internet connection – you can manually download and install MS-AutoQC by following the steps below.\n\nDownload MS-AutoQC v1.0.0 from GitHub.\nExtract the ZIP file to a folder of your choice.\nOpen a terminal window and enter:\n\ncd <path-to-folder>\npy -m pip install .\nThat’s it! MS-AutoQC and its dependencies will be installed automatically."
  },
  {
    "objectID": "installation.html#option-3-install-in-a-virtual-environment",
    "href": "installation.html#option-3-install-in-a-virtual-environment",
    "title": "Installation",
    "section": "Option 3: Install in a virtual environment",
    "text": "Option 3: Install in a virtual environment\nIf you would like to protect the integrity of other Python packages or versions installed on your instrument computer, you can opt to install MS-AutoQC in a virtual environment.\nClick here to learn how virtual environments work.\nChoose a folder that you would like to store the virtual environment in – denoted by <path-to-venv-folder below – and then enter the following commands in a terminal window:\npy -m venv <path-to-venv-folder>\npy -m pip install ms-autoqc\nThat’s it! MS-AutoQC and its dependencies will be installed in your virtual environment.\nNote: Every time you launch MS-AutoQC, you will need to activate your virtual environment first. To do this, just type:\n<path-to-venv-folder>\\Scripts\\activate"
  },
  {
    "objectID": "installation.html#start-ms-autoqc",
    "href": "installation.html#start-ms-autoqc",
    "title": "Installation",
    "section": "Start MS-AutoQC",
    "text": "Start MS-AutoQC\nTo launch MS-AutoQC, simply open a terminal window and type:\nms_autoqc\nIf you see the screen below, then MS-AutoQC was installed properly!\n\nIf you run into any problems with installing or opening the app, please visit the FAQ on installing MS-AutoQC."
  },
  {
    "objectID": "installation.html#important-note-1",
    "href": "installation.html#important-note-1",
    "title": "Installation",
    "section": "Important note",
    "text": "Important note\nAt this point, if you are installing MS-AutoQC only to sign in to your workspace and view the QC dashboard, you can move on to the Quickstart guide to learn how to get started using MS-AutoQC.\nIf you are installing MS-AutoQC on an instrument computer for the first time, continue with installation of MS-DIAL and MSConvert below."
  },
  {
    "objectID": "design.html",
    "href": "design.html",
    "title": "System Design",
    "section": "",
    "text": "This section details the backend data infrastructure and data processing pipeline packaged into MS-AutoQC, as well as some of the structure and logic of the Dash callbacks that serve the frontend app interface.\nIf you have any questions, concerns, or suggestions about the design of MS-AutoQC, please don’t hesitate to contact us!\n\nDesign pattern\nMS-AutoQC was designed with flexibility and scalability in mind. The project follows the MVC (Model-View-Controller) design pattern. The separation of concerns allows multiple developers to manage and make changes to the frontend and backend easily.\n\n\nFrontend\nThe frontend consists of a Dash app, which launches on startup and can be used from the browser. Dash is a powerful, open-source Python framework (built atop React, Plotly, and Flask) for building web applications.\nIn summary, components make up a user interface, and callbacks map inputs from one component to outputs of another. There is very little boilerplate code required to get started, and the library is extremely well-documented by the developers and community.\n\n\nBackend\nThe backend is organized into five different files:\n\nAcquisitionListener defines classes and functions for monitoring data acquisition paths and processing data files.\nDatabaseFunctions provides highly-abstracted API for reading from and writing to databases.\nAutoQCProcessing is a modular pipeline for processing data files, performing QC checks, and writing QC results to the database.\nSlackNotifications defines functions for controlling the Slack bot.\nPlotGeneration parses QC results from the database into the browser cache to generate Plotly graphs.\n\nThe complete project structure is as follows:\nMS-AutoQC/\n│\n├── src/\n│   └── ms_autoqc/\n│       ├── __main__.py\n│       ├── AcquisitionListener.py\n│       ├── DatabaseFunctions.py\n│       ├── AutoQCProcessing.py\n│       ├── PlotGeneration.py\n│       └── SlackNotifications.py\n│\n├── data/\n│   └── methods/\n│       ├── Settings.db\n│       ├── Example_Library_Pos.msp\n│       └── Example_Library_Neg.msp\n│   └── Example_Instrument.db\n|\n├── auth/\n│   ├── credentials.txt\n│   └── settings.yaml\n|\n├── assets/\n│   ├── favicon.ico\n│   └── styles.css\n|\n├── .gitignore\n├── README.md\n├── requirements.txt\n└── pyproject.toml\n\n\n\nDatabase schema\nData stays in persistence in two types of SQLite databases:\n\nThe instrument database(s)\nThe settings database\n\nAn MS-AutoQC workspace is comprised of the instrument databases and methods directory (which stores MSP/TXT libraries, MS-DIAL parameter files, and the settings database).\nA diagram of the each database’s schema is shown below.\n\nInstrument database\n\n\n\nSettings database\n\n\n\n\nProcessing workflow\nThe diagram below gives a broad overview of how MS-AutoQC listens to instrument runs and processes your data safely and securely. To summarize:\n\nThe user prepares their run sequence and starts an instrument run\nThe user gives MS-AutoQC the sequence file and the data acquisition path\n\nAt this point, the user’s work is done. They can start monitoring their instrument run from the MS-AutoQC dashboard. Now, the MS-AutoQC workflow is initialized.\n\nMS-AutoQC starts “listening” to the data acquisition path\nWhen the instrument starts collecting sample data, MS-AutoQC starts comparing checksums\nOnce the sample data has been acquired, the processing pipeline is launched\nMSConvert converts a copy of the raw data file from closed vendor format to open mzML format\nMS-DIAL processes the mzML file and quantifies internal standards\nMS-AutoQC performs quality control checks (based on user-defined criteria)\nIf there are any QC fails or warnings, the user is notified (if user opted in for notifications)\nQC results are written to the local database and trigger an update to the MS-AutoQC dashboard\n\n\nThe following sections discuss the MS-AutoQC workflow in detail.\n\n1. MS-AutoQC starts listening to the data acquisition path\nTo initialize the workflow, several functions are executed:\n\nThe instrument run is written to the database\nMSP library files are retrieved from the database\nMS-DIAL parameter files are generated for chromatography methods and biological standards\nFilenames are parsed out from the acquisition sequence file\n\nOnce this is done, the acquisition path, filenames, and run ID are passed to the acquisition listener, which is started in the background as a subprocess.\nnew_autoqc_job_setup() function in DashWebApp.py:\n\n\nDashWebApp.py\n\n@app.callback(...)\ndef new_autoqc_job_setup(button_clicks, run_id, instrument_id, chromatography, bio_standards, sequence, metadata, acquisition_path, qc_config_id, job_type):\n\n    \"\"\"\n    This callback initiates the following:\n    1. Writing a new instrument run to the database\n    2. Generate parameters files for MS-DIAL processing\n    3a. Initializing run monitoring at the given directory for an active run, or\n    3b. Iterating through and processing data files for a completed run\n    \"\"\"\n\n    # Write a new instrument run to the database\n    db.insert_new_run(run_id, instrument_id, chromatography, bio_standards, sequence, metadata, qc_config_id)\n\n    # Get MSPs and generate parameters files for MS-DIAL processing\n    for polarity in [\"Positive\", \"Negative\"]:\n\n        # Generate parameters files for processing samples\n        msp_file_path = db.get_msp_file_path(chromatography, polarity)\n        db.generate_msdial_parameters_file(chromatography, polarity, msp_file_path)\n\n        # Generate parameters files for processing each biological standard\n        if bio_standards is not None:\n            for bio_standard in bio_standards:\n                msp_file_path = db.get_msp_file_path(chromatography, polarity, bio_standard)\n                db.generate_msdial_parameters_file(chromatography, polarity, msp_file_path, bio_standard)\n\n    # Get filenames from sequence and filter out preblanks, wash, shutdown, etc.\n    filenames = db.get_filenames_from_sequence(sequence)[\"File Name\"].astype(str).tolist()\n\n    # If this is for an active run, initialize run monitoring at the given directory\n    if job_type == \"active\":\n        listener = subprocess.Popen([\"py\", \"AcquisitionListener.py\", acquisition_path, str(filenames), run_id])\n        return True, False, False, \"\"\n\n    # If this is for a completed run, begin iterating through the files and process them\n    elif job_type == \"completed\":\n        return False, True, False, json.dumps(filenames)\n\n    # Handle form validation errors\n    else:\n        return False, False, True, \"\"\n\nJump to relevant functions:\n\nnew_autoqc_job_setup()\ndb.get_msp_file_path()\ndb.generate_msdial_parameters_file()\ndb.get_filenames_from_sequence()\n\n\n\n2. MS-AutoQC compares checksums\nOnce the acquisition listener has been called, it waits for a file to be created in the data acquisition path.\nUpon file creation, watch_file() is called. It writes an initial MD5 checksum1 of the file to the database, and then initializes an indefinite loop.\nDataAcquisitionEventHandler class in AcquisitionListener.py:\n\n\nAcquisitionListener.py\n\ndef watch_file(self, path, filename, extension, check_interval=180):\n\n    \"\"\"\n    Returns True if MD5 checksum on file matches the MD5 checksum written to the database 3 minutes ago.\n    Effectively determines whether sample acquisition has been completed.\n    \"\"\"\n\n    # Write initial MD5 checksum to database\n    md5_checksum = get_md5(path + filename + \".\" + extension)\n    db.update_md5_checksum(filename, md5_checksum)\n\n    # Watch file indefinitely\n    while os.path.exists(path):\n\n        # Wait 3 minutes\n        time.sleep(check_interval)\n\n        new_md5 = get_md5(path + filename + \".\" + extension)\n        old_md5 = db.get_md5(filename)\n\n        # If the MD5 checksum after 3 mins is the same as before, file is done acquiring\n        if new_md5 == old_md5:\n            break\n        else:\n            db.update_md5_checksum(filename, new_md5)\n    \n    return True\n\nThe loop waits 3 minutes, then computes the file’s MD5 checksum again. If the checksums match, the loop breaks and qc.process_data_file() is called. If not, the loop repeats.\nDataAcquisitionEventHandler class in AcquisitionListener.py:\n\n\nAcquisitionListener.py\n\ndef on_created(self, event):\n\n    \"\"\"\n    Listen for data file creation\n    \"\"\"\n\n    # Remove directory path and file extension from filename\n    ...\n\n    # Check if file created is in the sequence\n    if not event.is_directory and filename in self.filenames:\n\n        # Start watching file until sample acquisition is complete\n        sample_acquired = self.watch_file(path, filename, extension)\n\n        # Execute QC processing\n        if sample_acquired:\n            qc.process_data_file(event.src_path, filename, extension, self.run_id)\n\n        # Terminate listener when the last data file is acquired\n        if filename == self.filenames[-1]:\n            self.observer.stop()\n\nJump to relevant functions:\n\non_created()\nwatch_file()\nget_md5()\ndb.get_md5()\ndb.update_md5_checksum()\nqc.process_data_file()\n\n1An MD5 checksum is a 32-character serialized string that represents the contents of a file. If two files have the same MD5 checksum, it is highly likely that they are identical files. Computing this checksum is unlikely to corrupt raw data files, or files of any kind for that matter.\n\n\n3. The processing pipeline is launched\nThe processing pipeline is a wrapper function called qc.process_data_file(), which gets executed when the instrument has finished writing to the data file. It is be described in detail in the upcoming steps.\nIn preparation, this function retrieves the following information from the database:\n\nInstrument run ID\nChromatography method\nList of samples in run\nList of biological standards in run\nMS-DIAL parameters file path\nList of internal standards for chromatography\nList of targeted features for chromatography and biological standard\nMS-DIAL software folder path\n\nIt’s worth noting that this pipeline was intended to be modular2.\nSimply put, the input for whatever data processing software is used is expected to be an mzML file.\nThe output of that data processing software should be then be a peak table, so that calculations and transformations can be made in the succeeding modules.\nFor the purpose of untargeted metabolomics, data is currently processed by calling the MS-DIAL via the command line.\nJump to relevant functions:\n\ndb.get_instrument_run()\ndb.get_samples_in_run()\ndb.get_parameter_file_path()\ndb.get_targeted_features()\ndb.get_internal_standards()\ndb.get_msdial_directory()\nrun_msconvert()\nrun_msdial_processing()\npeak_list_to_dataframe()\nqc_sample()\ndb.write_qc_results()\n\n2As development continues, implementation of other data processing software tools is as straightforward as making a function call to that tool (and storing user parameters, of course).\n\n\n4. MSConvert converts the raw data to mzML format\nTo ensure that the raw data remains untouched (and therefore uncorrupted) by MS-AutoQC, it is copied3 to a local app directory, MS-AutoQC/data.\nMSConvert is then called via the command line. After a few seconds, the mzML file will be saved to MS-AutoQC/data.\nTo prevent unnecessary storage, the copy of the original raw data file is deleted.\n\n\nAutoQCProcessing.py\n\ndef run_msconvert(path, filename, extension, output_folder):\n\n    \"\"\"\n    Converts data files in closed vendor format to open mzML format\n    \"\"\"\n\n    # Remove files in output folder (if any)\n    try:\n        for file in os.listdir(output_folder):\n            os.remove(file)\n    finally:\n        # Copy original data file to output folder\n        shutil.copy2(path + filename + \".\" + extension, output_folder)\n\n    # Get MSConvert.exe\n    try:\n        msconvert_folder = db.get_msconvert_directory()\n        msconvert_exe = '\"' + msconvert_folder + '/msconvert.exe\" '\n    except:\n        print(\"Failed to locate MSConvert.exe!\")\n        traceback.print_exc()\n        return None\n\n    # Run MSConvert in a subprocess\n    command = msconvert_exe + output_folder + filename + \".\" + extension + \" -o \" + output_folder\n    process = psutil.Popen(command)\n    pid = process.pid\n\n    # Check every second for 30 seconds if mzML file was created; if process hangs, terminate and return None\n    for index in range(31):\n        if not subprocess_is_running(pid):\n            break\n        else:\n            if index != 30:\n                time.sleep(1)\n            else:\n                kill_subprocess(pid)\n                return None\n\n    # Delete copy of original data file\n    data_file_copy = output_folder + filename + \".\" + extension\n    os.remove(data_file_copy)\n\n    # Return mzML file path to indicate success\n    return output_folder + filename + \".mzml\"\n\nJump to relevant functions: - run_msconvert()\n3Copying is performed using the native Python function shutil.copy2(), and is unlikely to corrupt the raw data file, or files of any kind.\n\n\n5. MS-DIAL processes the mzML file\nThe run_msdial_processing() function is straightforward: the filename, file directory, and MS-DIAL parameter file are passed to MS-DIAL via a command-line call.\nMS-DIAL takes about 15-30 seconds to process the file (depending on file size) before outputting an .msdial file, which is just a peak table in tab-delimited form.\n\n\nAutoQCProcessing.py\n\ndef run_msdial_processing(filename, msdial_path, parameter_file, input_folder, output_folder):\n\n    \"\"\"\n    Processes data files using MS-DIAL command line tools\n    \"\"\"\n\n    # Navigate to directory containing MS-DIAL\n    home = os.getcwd()\n    os.chdir(msdial_path)\n\n    # Run MS-DIAL\n    command = \"MsdialConsoleApp.exe lcmsdda -i \" + input_folder \\\n              + \" -o \" + output_folder \\\n              + \" -m \" + parameter_file + \" -p\"\n    os.system(command)\n\n    # Clear data file directory for next sample\n    for file in os.listdir(input_folder):\n        filepath = os.path.join(input_folder, file)\n        try:\n            shutil.rmtree(filepath)\n        except OSError:\n            os.remove(filepath)\n\n    # Return to original working directory\n    os.chdir(home)\n\n    # Return .msdial file path\n    return output_folder + \"/\" + filename.split(\".\")[0] + \".msdial\"\n\n\n\n6. MS-AutoQC performs quality control checks\nThe .msdial file is then routed to the peak_list_to_dataframe() function, which searches for internal standards (or targeted features for a biological standard sample) before returning the peak list as a pandas DataFrame for further processing.\n\n\nAutoQCProcessing.py\n\ndef peak_list_to_dataframe(sample_peak_list, internal_standards=None, targeted_features=None):\n\n    \"\"\"\n    Returns DataFrame with m/z, RT, and intensity info for each internal standard in a given sample\n    \"\"\"\n\n    # Convert .msdial file into a DataFrame\n    df_peak_list = pd.read_csv(sample_peak_list, sep=\"\\t\", engine=\"python\", skip_blank_lines=True)\n    df_peak_list.rename(columns={\"Title\": \"Name\"}, inplace=True)\n\n    # Get only the m/z, RT, and intensity columns\n    df_peak_list = df_peak_list[[\"Name\", \"Precursor m/z\", \"RT (min)\", \"Height\"]]\n\n    # Query only internal standards (or targeted features for biological standard)\n    if internal_standards is not None:\n        df_peak_list = df_peak_list.loc[df_peak_list[\"Name\"].isin(internal_standards)]\n    elif targeted_features is not None:\n        df_peak_list = df_peak_list.loc[df_peak_list[\"Name\"].isin(targeted_features)]\n\n    # DataFrame readiness\n    df_peak_list.reset_index(drop=True, inplace=True)\n\n    # Return DataFrame\n    return df_peak_list\n\nThis DataFrame is passed to the qc_sample() function, which performs user-enabled QC checks based on user-defined criteria in Settings > QC Configurations. For MS-AutoQC v1.0, there are four checks performed:\n\nIntensity dropouts cutoff: how many internal standards are missing in the sample?\nRT shift from library value cutoff: how many retention times are shifted from the expected value for the chromatography method?\nRT shift from in-run average cutoff: how many retention times are shifted from their average RT during the run?\nm/z shift from library value cutoff: how many precursor masses are shifted from the expected value for the internal standard?\n\nThe qc_sample() function returns two objects: the QC result (pass, warning, or fail), and a DataFrame containing QC results, or the results of the four checks detailed above.\nNote: This function is long, comprehensive, and subject to change. If you’re interested in the implementation, you can check it out in AutoQCProcessing.py on GitHub.\nFinally, the peak list DataFrame and QC result DataFrame are converted to JSON string format, and written to the relevant table (sample_qc_results or bio_qc_results) in the relevant instrument database using db.write_qc_results():\n\n\nDatabaseFunctions.py\n\ndef write_qc_results(sample_id, run_id, json_mz, json_rt, json_intensity, qc_dataframe, qc_result, is_bio_standard):\n\n    \"\"\"\n    Updates m/z, RT, and intensity info (as dictionary records) in appropriate table upon MS-DIAL processing completion\n    \"\"\"\n\n    # Connect to database\n    db_metadata, connection = connect_to_database(instrument_id)\n\n    # Get \"sample_qc_results\" or \"bio_qc_results\" table\n    if not is_bio_standard:\n        qc_results_table = sa.Table(\"sample_qc_results\", db_metadata, autoload=True)\n    else:\n        qc_results_table = sa.Table(\"bio_qc_results\", db_metadata, autoload=True)\n\n    # Prepare update (insert) of QC results to correct sample row\n    update_qc_results = (\n        sa.update(qc_results_table)\n            .where((qc_results_table.c.sample_id == sample_id)\n                   & (qc_results_table.c.run_id == run_id))\n            .values(precursor_mz=json_mz,\n                    retention_time=json_rt,\n                    intensity=json_intensity,\n                    qc_dataframe=qc_dataframe,\n                    qc_result=qc_result)\n    )\n\n    # Execute UPDATE into database, then close the connection\n    connection.execute(update_qc_results)\n    connection.close()\n\nJump to relevant functions:\n\npeak_list_to_dataframe()\nqc_sample()\ndb.write_qc_results()\n\n\n\n7. The user is notified of QC fails and warnings\nIf quality control checks result in a “Fail” or “Warning” result, an alert will be sent via Slack and/or email (if the user opts in for notifications).\n\n\nAutoQCProcessing.py\n\n# Send Slack notification (if they are enabled)\ntry:\n    if db.slack_notifications_are_enabled():\n        if qc_result != \"Pass\":\n            alert = \"QC \" + qc_result + \": \" + filename\n            slack_bot.send_message(alert)\nexcept:\n    print(\"Failed to send Slack notification.\")\n    traceback.print_exc()\n\nCurrently, this is the simplest component of the pipeline, but posesses a large potential to transform analytical workflows. Future updates will bring more intelligent and informative messages, detailing what went wrong and which component of the LC-MS system may be causing the issue.\nJump to relevant functions:\n\ndb.slack_notifications_are_enabled()\nslack_bot.send_message()\n\n\n\n8. The dashboard is refreshed with QC results\nAfter QC results are written to the database, metadata for the instrument run is updated to trigger a dashboard refresh. The number of samples processed, including the number of passes and fails, is updated using update_sample_counters_for_run().\n\n\nDatabaseFunctions.py\n\ndef update_sample_counters_for_run(instrument_id, run_id, qc_result, latest_sample):\n\n    \"\"\"\n    Increments \"completed\" count, as well as \"pass\" and \"fail\" counts accordingly\n    \"\"\"\n\n    df_instrument_run = get_instrument_run(instrument_id, run_id)\n    completed = df_instrument_run[\"completed\"].astype(int).tolist()[0] + 1\n    passes = df_instrument_run[\"passes\"].astype(int).tolist()[0]\n    fails = df_instrument_run[\"fails\"].astype(int).tolist()[0]\n\n    if qc_result == \"Pass\" or qc_result == \"Warning\":\n        passes = passes + 1\n    elif qc_result == \"Fail\":\n        fails = fails + 1\n\n    db_metadata, connection = connect_to_database(main_database)\n    instrument_runs_table = sa.Table(\"runs\", db_metadata, autoload=True)\n\n    update_status = (\n        sa.update(instrument_runs_table)\n            .where(instrument_runs_table.c.run_id == run_id)\n            .values(\n                completed=completed,\n                passes=passes,\n                fails=fails,\n                latest_sample=latest_sample\n        )\n    )\n\n    connection.execute(update_status)\n    connection.close()\n\nMeanwhile, the web app (served by Dash) stores its copy of the instrument run metadata in the user’s cache. Using a Dash Interval component, a Dash callback is triggered every 15 seconds to compare the run metadata in cache to the run metadata in the database.\n\n\nDashWebApp.py\n\n@app.callback(..., prevent_initial_call=True, suppress_callback_exceptions=True)\ndef load_data(refresh, active_cell, table_data, resources, instrument_id):\n\n    \"\"\"\n    Updates and stores QC results in dcc.Store objects (user's browser session)\n    \"\"\"\n\n    trigger = ctx.triggered_id\n\n    if active_cell:\n        run_id = table_data[active_cell[\"row\"]][\"Run ID\"]\n        status = table_data[active_cell[\"row\"]][\"Status\"]\n\n        # Ensure that refresh does not trigger data parsing if no new samples processed\n        if trigger == \"refresh-interval\":\n            completed_count_in_cache = json.loads(resources)[\"samples_completed\"]\n            actual_completed_count, total = db.get_completed_samples_count(instrument_id, run_id, status)\n\n            if completed_count_in_cache == actual_completed_count:\n                raise PreventUpdate\n\n        # Otherwise, begin route: raw data -> parsed data -> user session cache -> plots\n        return get_qc_results(instrument_id, run_id, status) + (True,)\n\n    else:\n        raise PreventUpdate\n\nWhen a change in the database is detected (via comparing sample counters), all plots in the dashboard are re-populated. The callback continues to check for updates until the end of the instrument run, effectively updating itself in realtime.\nJump to relevant functions:\n\nupdate_sample_counters_for_run()\nget_completed_samples_count()\nload_data()\n\n\n\n\nGoogle Drive sync"
  },
  {
    "objectID": "quickstart.html",
    "href": "quickstart.html",
    "title": "Quickstart",
    "section": "",
    "text": "In this section, you can learn how to set up and configure MS-AutoQC for your mass spectrometry instrument."
  },
  {
    "objectID": "quickstart.html#navigation",
    "href": "quickstart.html#navigation",
    "title": "Quickstart",
    "section": "Navigation",
    "text": "Navigation\n\nStart MS-AutoQC\nCreate a new workspace\nConfigure internal standards\nConfigure AutoQC parameters\nSpecify MS-DIAL location\nSetup a new run"
  },
  {
    "objectID": "quickstart.html#start-ms-autoqc",
    "href": "quickstart.html#start-ms-autoqc",
    "title": "Quickstart",
    "section": "1. Start MS-AutoQC",
    "text": "1. Start MS-AutoQC\nTo launch MS-AutoQC, open a Terminal or Command Prompt window and type:\nms_autoqc"
  },
  {
    "objectID": "quickstart.html#create-a-new-workspace",
    "href": "quickstart.html#create-a-new-workspace",
    "title": "Quickstart",
    "section": "2. Create a new workspace",
    "text": "2. Create a new workspace\nIf you followed the steps in the installation guide correctly, you will be greeted by the following welcome screen:\n\n\n\nWelcome screen\n\n\nPlease select I’m setting up MS-AutoQC on a new instrument. Then, you will be prompted to give your instrument a unique name and select your instrument’s vendor.\n\n\n\nI’m setting up MS-AutoQC on a new instrument\n\n\n\nOptional: Sync with Google Drive\nTBD\nOnce you’re done, click Complete setup to create your workspace. After your workspace loads, it should look something like this:\n\n\n\nBlank workspace"
  },
  {
    "objectID": "quickstart.html#configure-internal-standards",
    "href": "quickstart.html#configure-internal-standards",
    "title": "Quickstart",
    "section": "3. Configure internal standards",
    "text": "3. Configure internal standards\nNow that the workspace has been created, you’re ready to start configuring your chromatography methods and corresponding internal standards. The workflow for adding internal standards is simple:\n\nAdd a chromatography method\nSelect the chromatography and polarity to modify\nAdd an internal standard library\nOptional: Set a different MS-DIAL processing configuration\n\n\n3a. Add a chromatography method\nNavigate to Settings (in the top right corner) > Internal Standards. Once you’re there, it should look something like this:\n\nIn the Manage chromatography methods section at the top, add a new chromatography method by giving it a name and clicking Add method.\n\nIf successful, you should see your new method in the Chromatography methods table.\n\n\n3b. Select the chromatography and polarity to modify\nInternal standards must be configured for both positive and negative mode for each chromatography method.\nLet’s start by selecting the chromatography method you created, and then selecting Positive Mode for the polarity.\n\n\n\n3c. Add an internal standard library\nNow, we can specify our internal standard library. MS-AutoQC accepts identification libraries in either MSP or CSV format.\nIt is important to note that MS-DIAL can only perform MS2 spectral matching using MSP libraries. If you use a CSV library, identification will be performed via m/z and RT matches.\nHere is an example internal standard library in CSV format:\n\n\n\nCommon Name\nMS1 m/z\nRT (min)\n\n\n\n\n1_Methionine_d8\n158.1085398\n7.479\n\n\n1_1_Methylnicotinamide_d3\n141.0975946\n6.217\n\n\n1_Creatinine_d3\n117.0850186\n4.908\n\n\n…\n…\n…\n\n\n1_Lysine d8\n155.1630181\n9.578\n\n\n1_Phenylalanine d8\n174.136469\n6.92\n\n\n1_Hippuric acid d5\n185.0969033\n3.011\n\n\n\nAnd here is one internal standard from a library in MSP format:\nNAME: 1_HippuricAcid_d5\nSCANNUMBER: 1229\nRETENTIONTIME: 3.011485\nPRECURSORMZ: 185.0967\nPRECURSORTYPE: [M+H]+\nIONMODE: Positive\nINTENSITY: 2.157809E+07\nISOTOPE: M + 0\nINCHIKEY:\nSMILES:\nFORMULA:\nNum Peaks: 33\n51.02318    5550\n56.94302    2599\n57.93503    32786\n...\n171.3111    3202\n181.08981   2837\n185.09656   4996\nClick the Browse Files button to browse for your MSP or CSV file, then click the Add MSP to  Positive Mode button.\n\nThat’s it! Now, you can select Negative Mode from the polarity dropdown and add your negative mode internal standards. Once you’re done, your screen should look something like this:"
  },
  {
    "objectID": "quickstart.html#configure-qc-parameters",
    "href": "quickstart.html#configure-qc-parameters",
    "title": "Quickstart",
    "section": "4. Configure QC parameters",
    "text": "4. Configure QC parameters\nOnce you have configured your chromatography methods, you can then navigate to Settings > QC Configurations to define your QC criteria.\n\nMS-AutoQC stores individual parameters in configurations, so that you can configure a specific configuration to fit each chromatography method.\n\nYou can specify these parameters however you’d like, and enable / disable them as needed. To revert a configuration back to the default recommended settings, simply click the Reset default settings button.\nOnce you’re done, don’t forget to click Save changes!"
  },
  {
    "objectID": "quickstart.html#specify-ms-dial-location",
    "href": "quickstart.html#specify-ms-dial-location",
    "title": "Quickstart",
    "section": "5. Specify MS-DIAL location",
    "text": "5. Specify MS-DIAL location\nThe last thing to do is to specify the location of your MS-DIAL v4 download.\nTo do this, navigate to Settings > MS-DIAL Configurations and browse (or enter) the folder path into the MS-DIAL download location field.\nFor example, if the downloaded MS-DIAL files are located in C:\\Users\\eliaslab\\Documents\\MSDIAL, then enter this into the text field and click Save Changes."
  },
  {
    "objectID": "quickstart.html#setup-a-new-qc-job",
    "href": "quickstart.html#setup-a-new-qc-job",
    "title": "Quickstart",
    "section": "6. Setup a new QC job",
    "text": "6. Setup a new QC job\nSetting up a new QC job was designed to be as fast and easy as possible. To get MS-AutoQC monitoring an active instrument run (or QC’ing a completed batch), the user simply needs to enter a few fields of information:\n\nRun ID\nChromatography method\nOptional: Biological standard(s)\nAcquisition sequence file\nOptional: sample metadata\nData acquisition path\n\n\nMS-AutoQC will intelligently validate that everything is in place for it to start working. It does this by:\n\nEnsuring that the run ID is unique so that data is not corrupted\nVerifying that your chromatography method has valid internal standard libraries\nEnsuring that your acquisition sequence contains the required columns\nVerifying that the data acquisition path exists\nValidating biological standard libraries and sample metadata columns\n\nOnce it has validated these fields, the blue button will become enabled and you’re all set to begin."
  },
  {
    "objectID": "quickstart.html#optional-configure-biological-standards",
    "href": "quickstart.html#optional-configure-biological-standards",
    "title": "Quickstart",
    "section": "7. Optional: Configure biological standards",
    "text": "7. Optional: Configure biological standards"
  },
  {
    "objectID": "quickstart.html#optional-configure-ms-dial-processing-parameters",
    "href": "quickstart.html#optional-configure-ms-dial-processing-parameters",
    "title": "Quickstart",
    "section": "8. Optional: Configure MS-DIAL processing parameters",
    "text": "8. Optional: Configure MS-DIAL processing parameters"
  },
  {
    "objectID": "quickstart.html#optional-configure-google-drive-sync",
    "href": "quickstart.html#optional-configure-google-drive-sync",
    "title": "Quickstart",
    "section": "9. Optional: Configure Google Drive sync",
    "text": "9. Optional: Configure Google Drive sync"
  },
  {
    "objectID": "quickstart.html#optional-configure-slackemail-notifications",
    "href": "quickstart.html#optional-configure-slackemail-notifications",
    "title": "Quickstart",
    "section": "10. Optional: Configure Slack/email notifications",
    "text": "10. Optional: Configure Slack/email notifications"
  }
]