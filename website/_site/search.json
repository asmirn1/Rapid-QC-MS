[
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "Overview",
    "section": "",
    "text": "Many different things can go wrong during an LC-MS instrument run, leading to unusable data. That’s why it is crucial to stop a run and troubleshoot if something is wrong.\nMany metabolomics labs have various quality control measures in place for every sample preparation protocol, such as internal standards or biological “benchmark” standards. However, analyzing the data from these QC markers can be tedious and time-consuming.\nThis section describes the various features of MS-AutoQC, and how they can help inform on the quality of your untargeted metabolomics data in a time-efficient manner."
  },
  {
    "objectID": "get-started.html",
    "href": "get-started.html",
    "title": "Get Started",
    "section": "",
    "text": "In this section, you can learn how to set up and configure MS-AutoQC for your mass spectrometry instrument."
  },
  {
    "objectID": "documentation.html",
    "href": "documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "This section details the backend data infrastructure and data processing pipeline packaged into MS-AutoQC, as well as some of the structure and logic of the Dash callbacks that serve the frontend app interface.\nIf you have any questions, concerns, or suggestions about the design of MS-AutoQC, please don’t hesitate to contact us at wasim.sandhu@czbiohub.org or brian.defelice@czbiohub.org.\n\nGeneral workflow\nThe diagram below gives a broad overview of how MS-AutoQC listens to instrument runs and processes your data safely and securely. To summarize:\n\nThe user prepares their run sequence and starts an instrument run\nThe user gives MS-AutoQC the sequence file and the data acquisition path\n\nAt this point, the user’s work is done. They can start monitoring their instrument run from the MS-AutoQC dashboard. Now, the MS-AutoQC workflow is initialized.\n\nMS-AutoQC starts “listening” to the data acquisition path\nWhen the instrument starts collecting sample data, MS-AutoQC starts comparing checksums\nOnce the sample data has been acquired, the processing pipeline is launched\nMSConvert converts a copy of the raw data file from closed vendor format to open mzML format\nMS-DIAL processes the mzML file and quantifies internal standards\nMS-AutoQC performs quality control checks (based on user-defined criteria)\nQC results are written to the local database and trigger an update to the MS-AutoQC dashboard\nIf there are any QC fails or warnings, the user is notified (if user opted in for notifications)\n\n\n\n\nMS-AutoQC data processing pipeline\n\n\nThe following sections discuss the MS-AutoQC workflow in detail.\n\n1. MS-AutoQC starts listening to the data acquisition path\nTo initialize the workflow, several functions are executed:\n\nThe instrument run is written to the database\nMSP library files are retrieved from the database\nMS-DIAL parameter files are generated for chromatography methods and biological standards\nFilenames are parsed out from the acquisition sequence file\n\nOnce this is done, the acquisition path, filenames, and run ID are passed to the acquisition listener, which is started in the background as a subprocess.\nMS-AutoQC.py:\n@app.callback(...)\ndef new_autoqc_job_setup(button_clicks, run_id, instrument_id, chromatography, bio_standards, sequence, metadata, acquisition_path, qc_config_id, job_type):\n\n    \"\"\"\n    This callback initiates the following:\n    1. Writing a new instrument run to the database\n    2. Generate parameters files for MS-DIAL processing\n    3a. Initializing run monitoring at the given directory for an active run, or\n    3b. Iterating through and processing data files for a completed run\n    \"\"\"\n\n    # Write a new instrument run to the database\n    db.insert_new_run(run_id, instrument_id, chromatography, bio_standards, sequence, metadata, qc_config_id)\n\n    # Get MSPs and generate parameters files for MS-DIAL processing\n    for polarity in [\"Positive\", \"Negative\"]:\n\n        # Generate parameters files for processing samples\n        msp_file_path = db.get_msp_file_path(chromatography, polarity)\n        db.generate_msdial_parameters_file(chromatography, polarity, msp_file_path)\n\n        # Generate parameters files for processing each biological standard\n        if bio_standards is not None:\n            for bio_standard in bio_standards:\n                msp_file_path = db.get_msp_file_path(chromatography, polarity, bio_standard)\n                db.generate_msdial_parameters_file(chromatography, polarity, msp_file_path, bio_standard)\n\n    # Get filenames from sequence and filter out preblanks, wash, shutdown, etc.\n    filenames = db.get_filenames_from_sequence(sequence)[\"File Name\"].astype(str).tolist()\n\n    # If this is for an active run, initialize run monitoring at the given directory\n    if job_type == \"active\":\n        listener = subprocess.Popen([\"py\", \"AcquisitionListener.py\", acquisition_path, str(filenames), run_id])\n        return True, False, False, \"\"\n\n    # If this is for a completed run, begin iterating through the files and process them\n    elif job_type == \"completed\":\n        return False, True, False, json.dumps(filenames)\n\n    # Handle form validation errors\n    else:\n        return False, False, True, \"\"\nJump to relevant functions: - new_autoqc_job_setup() - db.get_msp_file_path() - db.generate_msdial_parameters_file() - db.get_filenames_from_sequence()\n\n\n2. MS-AutoQC compares checksums\nOnce the acquisition listener has been called, it waits for a file to be created in the data acquisition path.\nUpon file creation, watch_file() is called. It writes an initial MD5 checksum1 of the file to the database, and then initializes an indefinite loop.\nDataAcquisitionEventHandler class in AcquisitionListener.py:\ndef watch_file(self, path, filename, extension, check_interval=180):\n\n        \"\"\"\n        Returns True if MD5 checksum on file matches the MD5 checksum written to the database 3 minutes ago.\n        Effectively determines whether sample acquisition has been completed.\n        \"\"\"\n\n        # Write initial MD5 checksum to database\n        md5_checksum = get_md5(path + filename + \".\" + extension)\n        db.update_md5_checksum(filename, md5_checksum)\n\n        # Watch file indefinitely\n        while os.path.exists(path):\n\n            # Wait 3 minutes\n            time.sleep(check_interval)\n\n            new_md5 = get_md5(path + filename + \".\" + extension)\n            old_md5 = db.get_md5(filename)\n\n            # If the MD5 checksum after 3 mins is the same as before, file is done acquiring\n            if new_md5 == old_md5:\n                break\n            else:\n                db.update_md5_checksum(filename, new_md5)\n        \n        return True  \nThe loop waits 3 minutes, then computes the file’s MD5 checksum again. If the checksums match, the loop breaks and qc.process_data_file() is called. If not, the loop repeats.\nDataAcquisitionEventHandler class in AcquisitionListener.py:\n    def on_created(self, event):\n\n        \"\"\"\n        Listen for data file creation\n        \"\"\"\n\n        # Remove directory path and file extension from filename\n        ...\n\n        # Check if file created is in the sequence\n        if not event.is_directory and filename in self.filenames:\n\n            # Start watching file until sample acquisition is complete\n            sample_acquired = self.watch_file(path, filename, extension)\n\n            # Execute QC processing\n            if sample_acquired:\n                qc.process_data_file(event.src_path, filename, extension, self.run_id)\n\n            # Terminate listener when the last data file is acquired\n            if filename == self.filenames[-1]:\n                self.observer.stop()\nJump to relevant functions: - on_created() - watch_file() - get_md5() - db.get_md5() - db.update_md5_checksum() - qc.process_data_file()\n1An MD5 checksum is a 32-character serialized string that represents the contents of a file. If two files have the same MD5 checksum, it is highly likely that they are identical files. Computing this checksum is unlikely to corrupt raw data files, or files of any kind for that matter.\n\n\n3. The processing pipeline is launched\nThe processing pipeline is a wrapper function called qc.process_data_file(), which gets executed when the instrument has finished writing to the data file. It is be described in detail in the upcoming steps.\nIn preparation, this function retrieves the following information from the database: - Instrument run ID - Chromatography method - List of samples in run - List of biological standards in run - MS-DIAL parameters file path - List of internal standards for chromatography - List of targeted features for chromatography and biological standard - MS-DIAL software folder path\nIt’s worth noting that this pipeline was intended to be modular2.\nSimply put, the input for whatever data processing software is used is expected to be an mzML file.\nThe output of that data processing software should be then be a peak table, so that calculations and transformations can be made in the succeeding modules.\nFor the purpose of untargeted metabolomics, data is currently processed by calling the MS-DIAL via the command line.\nJump to relevant functions: - db.get_instrument_run() - db.get_samples_in_run() - db.get_parameter_file_path() - db.get_targeted_features() - db.get_internal_standards() - db.get_msdial_directory() - run_msconvert() - run_msdial_processing() - peak_list_to_dataframe() - qc_sample() - db.write_qc_results()\n2As development continues, implementation of other data processing software tools is as straightforward as making a function call to that tool (and storing user parameters, of course).\n\n\n4. MSConvert converts the raw data to mzML format\nTo ensure that the raw data remains untouched (and therefore uncorrupted) by MS-AutoQC, it is copied3 to a local app directory, MS-AutoQC/data.\nA Docker image of MSConvert is then called via the command line. After a few seconds, the mzML file will be saved to MS-AutoQC/data.\nTo prevent unnecessary storage, the copy of the original raw data file is deleted.\nAutoQCProcessing.py:\ndef run_msconvert(path, filename, extension, output_folder):\n\n    \"\"\"\n    Converts data files in closed vendor format to open mzML format\n    \"\"\"\n\n    # Copy original data file to output folder\n    shutil.copy2(path + filename + \".\" + extension, output_folder)\n\n    # Run MSConvert Docker container and allow 5 seconds for conversion\n    command = \"docker run --rm -e WINEDEBUG=-all -v \" \\\n            + output_folder.replace(\" \", \"/\") \\\n            + \":/data chambm/pwiz-skyline-i-agree-to-the-vendor-licenses wine msconvert /data/\" \\\n            + filename + \".\" + extension\n    os.system(command)\n    time.sleep(3)\n\n    # Delete copy of original data file\n    data_file_copy = output_folder + filename + \".\" + extension\n    os.remove(data_file_copy)\n\n    return\nJump to relevant functions: - run_msconvert()\n3Copying is performed using the native Python function shutil.copy2(), and is unlikely to corrupt the raw data file, or files of any kind.\n\n\n5. MS-DIAL processes the mzML file\ndef run_msdial_processing(filename, msdial_path, parameter_file, input_folder, output_folder):\n\n    \"\"\"\n    Processes data files using MS-DIAL command line tools\n    \"\"\"\n\n    # Navigate to directory containing MS-DIAL\n    home = os.getcwd()\n    os.chdir(msdial_path)\n\n    # Run MS-DIAL\n    command = \"MsdialConsoleApp.exe lcmsdda -i \" + input_folder \\\n              + \" -o \" + output_folder \\\n              + \" -m \" + parameter_file + \" -p\"\n    os.system(command)\n\n    # Clear data file directory for next sample\n    for file in os.listdir(input_folder):\n        filepath = os.path.join(input_folder, file)\n        try:\n            shutil.rmtree(filepath)\n        except OSError:\n            os.remove(filepath)\n\n    # Return to original working directory\n    os.chdir(home)\n\n    # Return .msdial file path\n    return output_folder + \"/\" + filename.split(\".\")[0] + \".msdial\"\n\n\n6. MS-AutoQC performs quality control checks\ndef peak_list_to_dataframe(sample_peak_list, internal_standards=None, targeted_features=None):\n\n    \"\"\"\n    Returns DataFrame with m/z, RT, and intensity info for each internal standard in a given sample\n    \"\"\"\n\n    # Convert .msdial file into a DataFrame\n    df_peak_list = pd.read_csv(sample_peak_list, sep=\"\\t\", engine=\"python\", skip_blank_lines=True)\n    df_peak_list.rename(columns={\"Title\": \"Name\"}, inplace=True)\n\n    # Get only the m/z, RT, and intensity columns\n    df_peak_list = df_peak_list[[\"Name\", \"Precursor m/z\", \"RT (min)\", \"Height\"]]\n\n    # Query only internal standards (or targeted features for biological standard)\n    if internal_standards is not None:\n        df_peak_list = df_peak_list.loc[df_peak_list[\"Name\"].isin(internal_standards)]\n    elif targeted_features is not None:\n        df_peak_list = df_peak_list.loc[df_peak_list[\"Name\"].isin(targeted_features)]\n\n    # DataFrame readiness\n    df_peak_list.reset_index(drop=True, inplace=True)\n\n    # Return DataFrame\n    return df_peak_list\n\n\n7. The MS-AutoQC dashboard is refreshed with QC results\nTo-do…\n\n\n8. The user is notified of QC fails and warnings\nTo-do…\n\n\n\nDatabase schema\nData stays in persistence in a local SQLite database. Together, the database and methods directory – which stores MSP/TXT libraries and MS-DIAL parameter files – comprise a user’s MS-AutoQC workspace. A diagram of the database schema is shown below."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MS-AutoQC",
    "section": "",
    "text": "MS-AutoQC is an all-in-one solution for automated quality control of liquid chromatography-mass spectrometry (LC-MS) data, either during or after data acquisition. It offers a fast, straightforward approach to ensure collection of high-quality data, allowing for less time extracting ion chromatograms and more time conducting experiments.\nDeveloped at the Mass Spectrometry Platform of CZ Biohub San Francisco, MS-AutoQC provides a host of key features to streamline untargeted metabolomics research, such as:\n\nAutomated and user-defined quality control checks during instrument runs\nRealtime updates on QC fails in the form of Slack or email notifications\nInteractive data visualization of internal standard retention time, precursor m/z, and intensity across samples\nGoogle Drive cloud sync and secure, Google-authenticated access to QC results from any device\n\n \n\nDownload\nDownload the latest version of MS-AutoQC here: https://github.com/czbiohub/MS-AutoQC/releases\n\n\nRequirements\nMS-AutoQC was designed to run on Windows platforms because of its dependency on MSConvert for vendor format data conversion and MS-DIAL for data processing and identification.\nMacOS users cannot setup MS-AutoQC jobs. However, MS-AutoQC is a local web app, so MacOS users can still log in to their workspace to view QC data visualizations, as well as to configure instrument settings.\nIn addition, MS-AutoQC requires Python 3.9+ and various Python packages, including Pandas, SQLAlchemy, Plotly, Dash, Bootstrap, Watchdog, and the Google Drive and Slack API. These are installed automatically during setup.\nInstallation of Python and various Python packages on MS instrument computers comes at no risk, but MS-AutoQC can be run and installed on an separate network computer if preferred. To learn more, please read the installation guide.\n\n\nSupported Vendors\nMS-AutoQC was designed to be a universal tool. Because MSConvert converts a copy of the raw data into mzML format before performing the rest of its functions, the package should work seamlessly with data of all vendor formats.\nHowever, MS-AutoQC has only been tested extensively on Thermo Fisher mass spectrometers and Thermo RAW files. As such, it is expected that there may be bugs / issues with processing data of other vendor formats.\nIf you would like to help us test support on Agilent / Bruker / Sciex / Waters instruments, please send an email to wasim.sandhu@czbiohub.org."
  },
  {
    "objectID": "download.html",
    "href": "download.html",
    "title": "Download",
    "section": "",
    "text": "Download"
  },
  {
    "objectID": "user-guide.html",
    "href": "user-guide.html",
    "title": "User Guide",
    "section": "",
    "text": "This is a Quarto website."
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "FAQ",
    "section": "",
    "text": "Frequently Asked Questions"
  },
  {
    "objectID": "troubleshooting.html",
    "href": "troubleshooting.html",
    "title": "Troubleshooting",
    "section": "",
    "text": "Troubleshooting"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation",
    "section": "",
    "text": "Installing MS-AutoQC is relatively easy and straightforward. You’ll need to:\nIf you run into trouble or have any questions, please feel free to open a new issue on GitHub, or send an email to wasim.sandhu@czbiohub.org. You can also visit the Troubleshooting section to see if your issue has been documented already."
  },
  {
    "objectID": "get-started.html#navigation",
    "href": "get-started.html#navigation",
    "title": "Get Started",
    "section": "Navigation",
    "text": "Navigation\n\nStart MS-AutoQC\nCreate a new workspace\nConfigure internal standards\nConfigure AutoQC parameters\nSpecify MS-DIAL location\nSetup a new run\nOptional: Configure biological standards\nOptional: Configure MS-DIAL processing parameters\nOptional: Configure Google Drive sync\nOptional: Configure Slack/email notifications"
  },
  {
    "objectID": "get-started.html#start-ms-autoqc",
    "href": "get-started.html#start-ms-autoqc",
    "title": "Get Started",
    "section": "1. Start MS-AutoQC",
    "text": "1. Start MS-AutoQC\nYou can start MS-AutoQC using Python. For example, if the MS-AutoQC folder path was C:/Users/Wasim/Downloads/MS-AutoQC, the user should enter the following commands in Command Prompt:\ncd C:/Users/Wasim/Downloads/MS-AutoQC\npython MS-AutoQC.py"
  },
  {
    "objectID": "get-started.html#create-a-new-workspace",
    "href": "get-started.html#create-a-new-workspace",
    "title": "Get Started",
    "section": "2. Create a new workspace",
    "text": "2. Create a new workspace\nIf you followed the steps in the installation guide correctly, you will be greeted by the following welcome screen:\n\n\n\nWelcome screen\n\n\nPlease select I’m setting up MS-AutoQC on a new instrument. Then, you will be prompted to give your instrument a unique name and select your instrument’s vendor.\n\n\n\nI’m setting up MS-AutoQC on a new instrument\n\n\n\nOptional: Sync with Google Drive\nTBD\nOnce you’re done, click Complete setup to create your workspace. After your workspace loads, it should look something like this:\n\n\n\nBlank workspace"
  },
  {
    "objectID": "get-started.html#configure-internal-standards",
    "href": "get-started.html#configure-internal-standards",
    "title": "Get Started",
    "section": "3. Configure internal standards",
    "text": "3. Configure internal standards\nNow that the workspace has been created, you’re ready to start configuring your chromatography methods and corresponding internal standards. The workflow for adding internal standards is simple:\n\nAdd a chromatography method\nSelect the chromatography and polarity to modify\nAdd an internal standard library\nOptional: Set a different MS-DIAL processing configuration\n\n\n3a. Add a chromatography method\nNavigate to Settings (in the top right corner) > Internal Standards. Once you’re there, it should look something like this:\n\n\n\nSettings > Internal Standards\n\n\nIn the Manage chromatography methods section at the top, add a new chromatography method by giving it a name and clicking Add method.\n\n\n\nAdd a new chromatography method\n\n\nIf successful, you should see your new method in the Chromatography methods table.\n\n\n3b. Select the chromatography and polarity to modify\nInternal standards must be configured for both positive and negative mode for each chromatography method.\nLet’s start by selecting the chromatography method you created, and then selecting Positive Mode for the polarity.\n\n\n\nConfigure chromatography methods\n\n\n\n\n3c. Add an internal standard library\nNow, we can specify our internal standard library. MS-AutoQC accepts identification libraries in either MSP or CSV format (although it is important to note that MS-DIAL cannot perform MS2 spectral matching using CSV libraries during identification).\nHere is an example internal standard library in CSV format:\n\n\n\nCommon Name\nMS1 m/z\nRT (min)\n\n\n\n\n1_Methionine_d8\n158.1085398\n7.479\n\n\n1_1_Methylnicotinamide_d3\n141.0975946\n6.217\n\n\n1_Creatinine_d3\n117.0850186\n4.908\n\n\n1_Carnitine_d3\n165.1313\n7.8\n\n\n1_Acetylcarnitine_d3\n207.1418647\n7.169\n\n\n1_TMAO_d9\n85.13218108\n5.495\n\n\n1_Choline_d9\n114.1713062\n5.123\n\n\n1_CUDA\n341.2798695\n1.104\n\n\n1_Glutamine_d5\n152.1078024\n8.642\n\n\n1_Glutamic Acid_d3\n151.0792645\n8.805\n\n\n1_Arginine_d7\n182.1628894\n9.497\n\n\n1_Alanine_d3\n93.07378516\n8.14\n\n\n1_Valine d8\n126.136469\n7.809\n\n\n1_Tryptophan d5\n210.1285378\n6.897\n\n\n1_Serine d3\n109.0686998\n8.704\n\n\n1_Lysine d8\n155.1630181\n9.578\n\n\n1_Phenylalanine d8\n174.136469\n6.92\n\n\n1_Hippuric acid d5\n185.0969033\n3.011\n\n\n\nAnd here is one internal standard from a library in MSP format:\nNAME: 1_HippuricAcid_d5\nSCANNUMBER: 1229\nRETENTIONTIME: 3.011485\nPRECURSORMZ: 185.0967\nPRECURSORTYPE: [M+H]+\nIONMODE: Positive\nINTENSITY: 2.157809E+07\nISOTOPE: M + 0\nINCHIKEY:\nSMILES:\nFORMULA:\nNum Peaks: 33\n51.02318    5550\n56.94302    2599\n57.93503    32786\n...\n171.3111    3202\n181.08981   2837\n185.09656   4996\nClick the Browse Files button to browse for your MSP or CSV file, then click the Add MSP to  Positive Mode button.\n\n\n\nAdd internal standard identification files\n\n\nThat’s it! Now, you can select Negative Mode from the polarity dropdown and add your negative mode internal standards. Once you’re done, your screen should look something like this:\n\n\n\nInternal standard settings configured"
  },
  {
    "objectID": "get-started.html#configure-autoqc-parameters",
    "href": "get-started.html#configure-autoqc-parameters",
    "title": "Get Started",
    "section": "4. Configure AutoQC parameters",
    "text": "4. Configure AutoQC parameters\nOnce you have configured your chromatography methods, you can then navigate to Settings > QC Configurations to define your QC criteria.\n\n\n\nSettings > QC configurations\n\n\nMS-AutoQC stores individual parameters in configurations, so that you can configure a specific configuration to fit each chromatography method.\n\n\n\nSettings > QC configurations\n\n\nYou can specify these parameters however you’d like, and enable / disable them as needed. To revert a configuration back to the default recommended settings, simply click the Reset default settings button.\nOnce you’re done, don’t forget to click Save changes!"
  },
  {
    "objectID": "get-started.html#specify-ms-dial-location",
    "href": "get-started.html#specify-ms-dial-location",
    "title": "Get Started",
    "section": "5. Specify MS-DIAL location",
    "text": "5. Specify MS-DIAL location\nThe last thing to do is to specify the location of your MS-DIAL v4 download.\nTo do this, navigate to Settings > MS-DIAL Configurations and browse (or enter) the folder path into the MS-DIAL download location field.\nFor example, if the downloaded MS-DIAL files are located in C:\\Users\\eliaslab\\Documents\\MSDIAL, then enter this into the text field and click Save Changes.\n\n\n\nSettings > MS-DIAL Configurations"
  },
  {
    "objectID": "get-started.html#setup-a-new-run",
    "href": "get-started.html#setup-a-new-run",
    "title": "Get Started",
    "section": "6. Setup a new run",
    "text": "6. Setup a new run\nSetting up a new MS-AutoQC job was designed to be as fast and easy as possible. To get MS-AutoQC monitoring an active instrument run (or QC’ing a completed batch), the user simply needs to enter a few fields of information:\n\nRun ID\nChromatography method\nOptional: Biological standard(s)\nAcquisition sequence file\nOptional: sample metadata\nData acquisition path\n\n\n\n\nNew MS-AutoQC Job\n\n\nMS-AutoQC will intelligently validate that everything is in place for it to start working. It does this by:\n\nEnsuring that the run ID is unique so that data is not corrupted\nVerifying that your chromatography method has valid internal standard libraries\nEnsuring that your acquisition sequence contains the required columns\nVerifying that the data acquisition path exists\nValidating biological standard libraries and sample metadata columns\n\nOnce it has validated these fields, the blue button will become enabled and you’re all set to begin.\n\n\n\nNew MS-AutoQC Job"
  },
  {
    "objectID": "get-started.html#optional-configure-biological-standards",
    "href": "get-started.html#optional-configure-biological-standards",
    "title": "Get Started",
    "section": "7. Optional: Configure biological standards",
    "text": "7. Optional: Configure biological standards"
  },
  {
    "objectID": "get-started.html#optional-configure-ms-dial-processing-parameters",
    "href": "get-started.html#optional-configure-ms-dial-processing-parameters",
    "title": "Get Started",
    "section": "8. Optional: Configure MS-DIAL processing parameters",
    "text": "8. Optional: Configure MS-DIAL processing parameters"
  },
  {
    "objectID": "get-started.html#optional-configure-google-drive-sync",
    "href": "get-started.html#optional-configure-google-drive-sync",
    "title": "Get Started",
    "section": "9. Optional: Configure Google Drive sync",
    "text": "9. Optional: Configure Google Drive sync"
  },
  {
    "objectID": "get-started.html#optional-configure-slackemail-notifications",
    "href": "get-started.html#optional-configure-slackemail-notifications",
    "title": "Get Started",
    "section": "10. Optional: Configure Slack/email notifications",
    "text": "10. Optional: Configure Slack/email notifications"
  },
  {
    "objectID": "installation.html#a.-download-ms-autoqc",
    "href": "installation.html#a.-download-ms-autoqc",
    "title": "Installation",
    "section": "a. Download MS-AutoQC",
    "text": "a. Download MS-AutoQC\nPlease download the latest version of MS-AutoQC (which is v1.0 at the time of this writing) for either Windows or MacOS.\nOnce the ZIP file has been downloaded and extracted, MS-AutoQC can be launched from a Command Prompt or Terminal window. For example, if the MS-AutoQC folder path was C:/Users/Wasim/Downloads/MS-AutoQC, the user should enter the following commands:\ncd C:/Users/Wasim/Downloads/MS-AutoQC\npython MS-AutoQC.py\nAlternatively, Windows users can also launch MS-AutoQC by double-clicking the .exe file."
  },
  {
    "objectID": "installation.html#b.-install-python-dependencies",
    "href": "installation.html#b.-install-python-dependencies",
    "title": "Installation",
    "section": "b. Install Python dependencies",
    "text": "b. Install Python dependencies\nOn first launch, Python will install all required dependencies automatically, and this may take a minute or two. (If you’re curious, you can find a list of these dependencies here.)\nOnce that’s done, MS-AutoQC will open in your web browser and should look like this:\n\nIf you see this screen, then MS-AutoQC was installed properly! If not, double check your command prompt and see if there were any errors in package installation. You can refer to the Troubleshooting page for common mistakes / errors."
  },
  {
    "objectID": "installation.html#important-note-1",
    "href": "installation.html#important-note-1",
    "title": "Installation",
    "section": "Important note",
    "text": "Important note\nAt this point, if you are installing MS-AutoQC only to sign in to your workspace and view the QC dashboard, you can move on to the Getting Started section and learn how to use MS-AutoQC.\nIf you are installing MS-AutoQC on an instrument computer, follow through with installation of MS-DIAL and MSConvert below."
  },
  {
    "objectID": "overview.html#retention-time-across-samples",
    "href": "overview.html#retention-time-across-samples",
    "title": "Overview",
    "section": "Retention time across samples",
    "text": "Retention time across samples\nPlotting retention time values for a given internal standard gives insight into retention time shifts, which can indicate any of the following:\n\nIncorrect mobile phase concentration\nChanges in flow rate\nChanges in column temperature\nFaulty column\n\nWith MS-AutoQC, you can view an RT vs. sample plot for each of your internal standards. Select an internal standard using the dropdown, or seek through them using the previous / next buttons."
  },
  {
    "objectID": "overview.html#intensity-across-samples",
    "href": "overview.html#intensity-across-samples",
    "title": "Overview",
    "section": "Intensity across samples",
    "text": "Intensity across samples\nPlotting intensity (peak height) values can give insight into sample preparation and ionization variability. Low internal standard intensities can indicate the following:\n\nBad injection\nError in sample preparation\nInstrument performance (sample not ionizing correctly)\n\nMS-AutoQC allows you to filter the intensity vs. sample plot by samples, pools, or blanks using the plot filter on the left-hand side. You can scroll through the plot using the plot scroll bar below."
  },
  {
    "objectID": "overview.html#delta-mz-vs.-sample-plot",
    "href": "overview.html#delta-mz-vs.-sample-plot",
    "title": "Overview",
    "section": "Delta m/z vs. sample plot",
    "text": "Delta m/z vs. sample plot\nPlotting delta m/z values can give insight into mass accuracy and instrument performance."
  },
  {
    "objectID": "overview.html#sample-information-card",
    "href": "overview.html#sample-information-card",
    "title": "Overview",
    "section": "Sample information card",
    "text": "Sample information card\nTo investigate a sample more closely, you can select one from the sample table (or click a marker on the plot!) and the sample information card will open.\nThis card conveniently aggregates information from the sequence, metadata, processed data, and QC results into one place."
  },
  {
    "objectID": "overview.html#new-job-setup",
    "href": "overview.html#new-job-setup",
    "title": "Overview",
    "section": "New job setup",
    "text": "New job setup\nSetting up a new MS-AutoQC job was designed to be as fast and easy as possible. To get the AutoQC algorithm running, the user just needs to enter:\n\nRun ID\nChromatography\nBiological standards (optional)\nAcquisition sequence file\nSample metadata file\nData file directory\n\n\nThe form will then give the user intelligent feedback on whether they have provided valid resources. Once the user has chosen whether the job is for an active or completed instrument run, the new job can be executed."
  },
  {
    "objectID": "overview.html#google-drive-and-slack-settings",
    "href": "overview.html#google-drive-and-slack-settings",
    "title": "Overview",
    "section": "Google Drive and Slack settings",
    "text": "Google Drive and Slack settings"
  },
  {
    "objectID": "overview.html#internal-standard-settings",
    "href": "overview.html#internal-standard-settings",
    "title": "Overview",
    "section": "Internal standard settings",
    "text": "Internal standard settings"
  },
  {
    "objectID": "overview.html#biological-standard-settings",
    "href": "overview.html#biological-standard-settings",
    "title": "Overview",
    "section": "Biological standard settings",
    "text": "Biological standard settings"
  },
  {
    "objectID": "overview.html#qc-configuration-settings",
    "href": "overview.html#qc-configuration-settings",
    "title": "Overview",
    "section": "QC configuration settings",
    "text": "QC configuration settings"
  },
  {
    "objectID": "overview.html#ms-dial-configuration-settings",
    "href": "overview.html#ms-dial-configuration-settings",
    "title": "Overview",
    "section": "MS-DIAL configuration settings",
    "text": "MS-DIAL configuration settings"
  }
]